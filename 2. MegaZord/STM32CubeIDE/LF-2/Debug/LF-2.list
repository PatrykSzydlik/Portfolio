
LF-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006738  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  080067f8  080067f8  000167f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a70  08006a70  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  08006a70  08006a70  00016a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a78  08006a78  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a78  08006a78  00016a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a7c  08006a7c  00016a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08006a80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  20000034  08006ab4  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08006ab4  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000acf7  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ae5  00000000  00000000  0002ad53  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c50  00000000  00000000  0002c838  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b68  00000000  00000000  0002d488  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013664  00000000  00000000  0002dff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b1b5  00000000  00000000  00041654  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007b181  00000000  00000000  0004c809  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c798a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c40  00000000  00000000  000c7a08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000034 	.word	0x20000034
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080067e0 	.word	0x080067e0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000038 	.word	0x20000038
 8000104:	080067e0 	.word	0x080067e0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	1c08      	adds	r0, r1, #0
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	464f      	mov	r7, r9
 8000438:	4646      	mov	r6, r8
 800043a:	46d6      	mov	lr, sl
 800043c:	b5c0      	push	{r6, r7, lr}
 800043e:	0004      	movs	r4, r0
 8000440:	b082      	sub	sp, #8
 8000442:	000d      	movs	r5, r1
 8000444:	4691      	mov	r9, r2
 8000446:	4698      	mov	r8, r3
 8000448:	428b      	cmp	r3, r1
 800044a:	d82f      	bhi.n	80004ac <__udivmoddi4+0x78>
 800044c:	d02c      	beq.n	80004a8 <__udivmoddi4+0x74>
 800044e:	4641      	mov	r1, r8
 8000450:	4648      	mov	r0, r9
 8000452:	f000 f8b1 	bl	80005b8 <__clzdi2>
 8000456:	0029      	movs	r1, r5
 8000458:	0006      	movs	r6, r0
 800045a:	0020      	movs	r0, r4
 800045c:	f000 f8ac 	bl	80005b8 <__clzdi2>
 8000460:	1a33      	subs	r3, r6, r0
 8000462:	469c      	mov	ip, r3
 8000464:	3b20      	subs	r3, #32
 8000466:	469a      	mov	sl, r3
 8000468:	d500      	bpl.n	800046c <__udivmoddi4+0x38>
 800046a:	e076      	b.n	800055a <__udivmoddi4+0x126>
 800046c:	464b      	mov	r3, r9
 800046e:	4652      	mov	r2, sl
 8000470:	4093      	lsls	r3, r2
 8000472:	001f      	movs	r7, r3
 8000474:	464b      	mov	r3, r9
 8000476:	4662      	mov	r2, ip
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d828      	bhi.n	80004d2 <__udivmoddi4+0x9e>
 8000480:	d025      	beq.n	80004ce <__udivmoddi4+0x9a>
 8000482:	4653      	mov	r3, sl
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5a>
 800048c:	e07b      	b.n	8000586 <__udivmoddi4+0x152>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	4652      	mov	r2, sl
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4662      	mov	r2, ip
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e018      	b.n	80004da <__udivmoddi4+0xa6>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9d0      	bls.n	800044e <__udivmoddi4+0x1a>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8a>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b002      	add	sp, #8
 80004c4:	bc1c      	pop	{r2, r3, r4}
 80004c6:	4690      	mov	r8, r2
 80004c8:	4699      	mov	r9, r3
 80004ca:	46a2      	mov	sl, r4
 80004cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ce:	42a3      	cmp	r3, r4
 80004d0:	d9d7      	bls.n	8000482 <__udivmoddi4+0x4e>
 80004d2:	2200      	movs	r2, #0
 80004d4:	2300      	movs	r3, #0
 80004d6:	9200      	str	r2, [sp, #0]
 80004d8:	9301      	str	r3, [sp, #4]
 80004da:	4663      	mov	r3, ip
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d0e9      	beq.n	80004b4 <__udivmoddi4+0x80>
 80004e0:	07fb      	lsls	r3, r7, #31
 80004e2:	4698      	mov	r8, r3
 80004e4:	4641      	mov	r1, r8
 80004e6:	0872      	lsrs	r2, r6, #1
 80004e8:	430a      	orrs	r2, r1
 80004ea:	087b      	lsrs	r3, r7, #1
 80004ec:	4666      	mov	r6, ip
 80004ee:	e00e      	b.n	800050e <__udivmoddi4+0xda>
 80004f0:	42ab      	cmp	r3, r5
 80004f2:	d101      	bne.n	80004f8 <__udivmoddi4+0xc4>
 80004f4:	42a2      	cmp	r2, r4
 80004f6:	d80c      	bhi.n	8000512 <__udivmoddi4+0xde>
 80004f8:	1aa4      	subs	r4, r4, r2
 80004fa:	419d      	sbcs	r5, r3
 80004fc:	2001      	movs	r0, #1
 80004fe:	1924      	adds	r4, r4, r4
 8000500:	416d      	adcs	r5, r5
 8000502:	2100      	movs	r1, #0
 8000504:	3e01      	subs	r6, #1
 8000506:	1824      	adds	r4, r4, r0
 8000508:	414d      	adcs	r5, r1
 800050a:	2e00      	cmp	r6, #0
 800050c:	d006      	beq.n	800051c <__udivmoddi4+0xe8>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d9ee      	bls.n	80004f0 <__udivmoddi4+0xbc>
 8000512:	3e01      	subs	r6, #1
 8000514:	1924      	adds	r4, r4, r4
 8000516:	416d      	adcs	r5, r5
 8000518:	2e00      	cmp	r6, #0
 800051a:	d1f8      	bne.n	800050e <__udivmoddi4+0xda>
 800051c:	9800      	ldr	r0, [sp, #0]
 800051e:	9901      	ldr	r1, [sp, #4]
 8000520:	4653      	mov	r3, sl
 8000522:	1900      	adds	r0, r0, r4
 8000524:	4169      	adcs	r1, r5
 8000526:	2b00      	cmp	r3, #0
 8000528:	db23      	blt.n	8000572 <__udivmoddi4+0x13e>
 800052a:	002b      	movs	r3, r5
 800052c:	4652      	mov	r2, sl
 800052e:	40d3      	lsrs	r3, r2
 8000530:	002a      	movs	r2, r5
 8000532:	4664      	mov	r4, ip
 8000534:	40e2      	lsrs	r2, r4
 8000536:	001c      	movs	r4, r3
 8000538:	4653      	mov	r3, sl
 800053a:	0015      	movs	r5, r2
 800053c:	2b00      	cmp	r3, #0
 800053e:	db2d      	blt.n	800059c <__udivmoddi4+0x168>
 8000540:	0026      	movs	r6, r4
 8000542:	4657      	mov	r7, sl
 8000544:	40be      	lsls	r6, r7
 8000546:	0033      	movs	r3, r6
 8000548:	0026      	movs	r6, r4
 800054a:	4667      	mov	r7, ip
 800054c:	40be      	lsls	r6, r7
 800054e:	0032      	movs	r2, r6
 8000550:	1a80      	subs	r0, r0, r2
 8000552:	4199      	sbcs	r1, r3
 8000554:	9000      	str	r0, [sp, #0]
 8000556:	9101      	str	r1, [sp, #4]
 8000558:	e7ac      	b.n	80004b4 <__udivmoddi4+0x80>
 800055a:	4662      	mov	r2, ip
 800055c:	2320      	movs	r3, #32
 800055e:	1a9b      	subs	r3, r3, r2
 8000560:	464a      	mov	r2, r9
 8000562:	40da      	lsrs	r2, r3
 8000564:	4661      	mov	r1, ip
 8000566:	0013      	movs	r3, r2
 8000568:	4642      	mov	r2, r8
 800056a:	408a      	lsls	r2, r1
 800056c:	0017      	movs	r7, r2
 800056e:	431f      	orrs	r7, r3
 8000570:	e780      	b.n	8000474 <__udivmoddi4+0x40>
 8000572:	4662      	mov	r2, ip
 8000574:	2320      	movs	r3, #32
 8000576:	1a9b      	subs	r3, r3, r2
 8000578:	002a      	movs	r2, r5
 800057a:	4666      	mov	r6, ip
 800057c:	409a      	lsls	r2, r3
 800057e:	0023      	movs	r3, r4
 8000580:	40f3      	lsrs	r3, r6
 8000582:	4313      	orrs	r3, r2
 8000584:	e7d4      	b.n	8000530 <__udivmoddi4+0xfc>
 8000586:	4662      	mov	r2, ip
 8000588:	2320      	movs	r3, #32
 800058a:	2100      	movs	r1, #0
 800058c:	1a9b      	subs	r3, r3, r2
 800058e:	2200      	movs	r2, #0
 8000590:	9100      	str	r1, [sp, #0]
 8000592:	9201      	str	r2, [sp, #4]
 8000594:	2201      	movs	r2, #1
 8000596:	40da      	lsrs	r2, r3
 8000598:	9201      	str	r2, [sp, #4]
 800059a:	e780      	b.n	800049e <__udivmoddi4+0x6a>
 800059c:	2320      	movs	r3, #32
 800059e:	4662      	mov	r2, ip
 80005a0:	0026      	movs	r6, r4
 80005a2:	1a9b      	subs	r3, r3, r2
 80005a4:	40de      	lsrs	r6, r3
 80005a6:	002f      	movs	r7, r5
 80005a8:	46b0      	mov	r8, r6
 80005aa:	4666      	mov	r6, ip
 80005ac:	40b7      	lsls	r7, r6
 80005ae:	4646      	mov	r6, r8
 80005b0:	003b      	movs	r3, r7
 80005b2:	4333      	orrs	r3, r6
 80005b4:	e7c8      	b.n	8000548 <__udivmoddi4+0x114>
 80005b6:	46c0      	nop			; (mov r8, r8)

080005b8 <__clzdi2>:
 80005b8:	b510      	push	{r4, lr}
 80005ba:	2900      	cmp	r1, #0
 80005bc:	d103      	bne.n	80005c6 <__clzdi2+0xe>
 80005be:	f000 f807 	bl	80005d0 <__clzsi2>
 80005c2:	3020      	adds	r0, #32
 80005c4:	e002      	b.n	80005cc <__clzdi2+0x14>
 80005c6:	1c08      	adds	r0, r1, #0
 80005c8:	f000 f802 	bl	80005d0 <__clzsi2>
 80005cc:	bd10      	pop	{r4, pc}
 80005ce:	46c0      	nop			; (mov r8, r8)

080005d0 <__clzsi2>:
 80005d0:	211c      	movs	r1, #28
 80005d2:	2301      	movs	r3, #1
 80005d4:	041b      	lsls	r3, r3, #16
 80005d6:	4298      	cmp	r0, r3
 80005d8:	d301      	bcc.n	80005de <__clzsi2+0xe>
 80005da:	0c00      	lsrs	r0, r0, #16
 80005dc:	3910      	subs	r1, #16
 80005de:	0a1b      	lsrs	r3, r3, #8
 80005e0:	4298      	cmp	r0, r3
 80005e2:	d301      	bcc.n	80005e8 <__clzsi2+0x18>
 80005e4:	0a00      	lsrs	r0, r0, #8
 80005e6:	3908      	subs	r1, #8
 80005e8:	091b      	lsrs	r3, r3, #4
 80005ea:	4298      	cmp	r0, r3
 80005ec:	d301      	bcc.n	80005f2 <__clzsi2+0x22>
 80005ee:	0900      	lsrs	r0, r0, #4
 80005f0:	3904      	subs	r1, #4
 80005f2:	a202      	add	r2, pc, #8	; (adr r2, 80005fc <__clzsi2+0x2c>)
 80005f4:	5c10      	ldrb	r0, [r2, r0]
 80005f6:	1840      	adds	r0, r0, r1
 80005f8:	4770      	bx	lr
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	02020304 	.word	0x02020304
 8000600:	01010101 	.word	0x01010101
	...

0800060c <HAL_GPIO_EXTI_Callback>:
static void MX_TIM21_Init(void);


/* USER CODE BEGIN PFP */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	0002      	movs	r2, r0
 8000614:	1dbb      	adds	r3, r7, #6
 8000616:	801a      	strh	r2, [r3, #0]

	if (start == 1) {
 8000618:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <HAL_GPIO_EXTI_Callback+0x48>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d103      	bne.n	8000628 <HAL_GPIO_EXTI_Callback+0x1c>
		start = 0;
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <HAL_GPIO_EXTI_Callback+0x48>)
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	e009      	b.n	800063c <HAL_GPIO_EXTI_Callback+0x30>
	} else if (start == 0) {
 8000628:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <HAL_GPIO_EXTI_Callback+0x48>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d105      	bne.n	800063c <HAL_GPIO_EXTI_Callback+0x30>
		start = 1;
 8000630:	4b08      	ldr	r3, [pc, #32]	; (8000654 <HAL_GPIO_EXTI_Callback+0x48>)
 8000632:	2201      	movs	r2, #1
 8000634:	601a      	str	r2, [r3, #0]
		inicjuj = 1;
 8000636:	4b08      	ldr	r3, [pc, #32]	; (8000658 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000638:	2201      	movs	r2, #1
 800063a:	601a      	str	r2, [r3, #0]
	};

	HAL_GPIO_TogglePin(LED_2_GPIO_Port, LED_2_Pin);
 800063c:	2380      	movs	r3, #128	; 0x80
 800063e:	015a      	lsls	r2, r3, #5
 8000640:	23a0      	movs	r3, #160	; 0xa0
 8000642:	05db      	lsls	r3, r3, #23
 8000644:	0011      	movs	r1, r2
 8000646:	0018      	movs	r0, r3
 8000648:	f002 fd8a 	bl	8003160 <HAL_GPIO_TogglePin>

}
 800064c:	46c0      	nop			; (mov r8, r8)
 800064e:	46bd      	mov	sp, r7
 8000650:	b002      	add	sp, #8
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000064 	.word	0x20000064
 8000658:	20000068 	.word	0x20000068

0800065c <analiza_czujnikow>:
		zmienna = -zmienna;
	};
	return zmienna;
}

void analiza_czujnikow(uint32_t wartosci[9]) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]

	czujniki[0] = wartosci[8];
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	3320      	adds	r3, #32
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	b29a      	uxth	r2, r3
 800066c:	4b44      	ldr	r3, [pc, #272]	; (8000780 <analiza_czujnikow+0x124>)
 800066e:	801a      	strh	r2, [r3, #0]
	czujniki[1] = wartosci[7];
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	331c      	adds	r3, #28
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	b29a      	uxth	r2, r3
 8000678:	4b41      	ldr	r3, [pc, #260]	; (8000780 <analiza_czujnikow+0x124>)
 800067a:	805a      	strh	r2, [r3, #2]
	czujniki[2] = wartosci[6];
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	3318      	adds	r3, #24
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	b29a      	uxth	r2, r3
 8000684:	4b3e      	ldr	r3, [pc, #248]	; (8000780 <analiza_czujnikow+0x124>)
 8000686:	809a      	strh	r2, [r3, #4]
	czujniki[3] = wartosci[5];
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	3314      	adds	r3, #20
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	b29a      	uxth	r2, r3
 8000690:	4b3b      	ldr	r3, [pc, #236]	; (8000780 <analiza_czujnikow+0x124>)
 8000692:	80da      	strh	r2, [r3, #6]
	czujniki[4] = wartosci[4];
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	3310      	adds	r3, #16
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	b29a      	uxth	r2, r3
 800069c:	4b38      	ldr	r3, [pc, #224]	; (8000780 <analiza_czujnikow+0x124>)
 800069e:	811a      	strh	r2, [r3, #8]
	czujniki[5] = wartosci[0];
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	b29a      	uxth	r2, r3
 80006a6:	4b36      	ldr	r3, [pc, #216]	; (8000780 <analiza_czujnikow+0x124>)
 80006a8:	815a      	strh	r2, [r3, #10]
	czujniki[6] = wartosci[1];
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	3304      	adds	r3, #4
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	b29a      	uxth	r2, r3
 80006b2:	4b33      	ldr	r3, [pc, #204]	; (8000780 <analiza_czujnikow+0x124>)
 80006b4:	819a      	strh	r2, [r3, #12]
	czujniki[7] = wartosci[2];
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	3308      	adds	r3, #8
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	b29a      	uxth	r2, r3
 80006be:	4b30      	ldr	r3, [pc, #192]	; (8000780 <analiza_czujnikow+0x124>)
 80006c0:	81da      	strh	r2, [r3, #14]
	czujniki[8] = wartosci[3];
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	330c      	adds	r3, #12
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	b29a      	uxth	r2, r3
 80006ca:	4b2d      	ldr	r3, [pc, #180]	; (8000780 <analiza_czujnikow+0x124>)
 80006cc:	821a      	strh	r2, [r3, #16]

	for (int i = 0; i < 9; ++i) {
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	e015      	b.n	8000700 <analiza_czujnikow+0xa4>
		if (czujniki[i] > prog) {
 80006d4:	4b2a      	ldr	r3, [pc, #168]	; (8000780 <analiza_czujnikow+0x124>)
 80006d6:	68fa      	ldr	r2, [r7, #12]
 80006d8:	0052      	lsls	r2, r2, #1
 80006da:	5ad2      	ldrh	r2, [r2, r3]
 80006dc:	4b29      	ldr	r3, [pc, #164]	; (8000784 <analiza_czujnikow+0x128>)
 80006de:	881b      	ldrh	r3, [r3, #0]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d905      	bls.n	80006f0 <analiza_czujnikow+0x94>
			czujniki[i] = 1;
 80006e4:	4b26      	ldr	r3, [pc, #152]	; (8000780 <analiza_czujnikow+0x124>)
 80006e6:	68fa      	ldr	r2, [r7, #12]
 80006e8:	0052      	lsls	r2, r2, #1
 80006ea:	2101      	movs	r1, #1
 80006ec:	52d1      	strh	r1, [r2, r3]
 80006ee:	e004      	b.n	80006fa <analiza_czujnikow+0x9e>
		} else {
			czujniki[i] = 0;
 80006f0:	4b23      	ldr	r3, [pc, #140]	; (8000780 <analiza_czujnikow+0x124>)
 80006f2:	68fa      	ldr	r2, [r7, #12]
 80006f4:	0052      	lsls	r2, r2, #1
 80006f6:	2100      	movs	r1, #0
 80006f8:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < 9; ++i) {
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	3301      	adds	r3, #1
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	2b08      	cmp	r3, #8
 8000704:	dde6      	ble.n	80006d4 <analiza_czujnikow+0x78>
		};
	};

	kat_prosty = 0;
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <analiza_czujnikow+0x12c>)
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]

	if (czujniki[2] + czujniki[3] + czujniki[4] == 3
 800070c:	4b1c      	ldr	r3, [pc, #112]	; (8000780 <analiza_czujnikow+0x124>)
 800070e:	889b      	ldrh	r3, [r3, #4]
 8000710:	001a      	movs	r2, r3
 8000712:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <analiza_czujnikow+0x124>)
 8000714:	88db      	ldrh	r3, [r3, #6]
 8000716:	18d3      	adds	r3, r2, r3
 8000718:	4a19      	ldr	r2, [pc, #100]	; (8000780 <analiza_czujnikow+0x124>)
 800071a:	8912      	ldrh	r2, [r2, #8]
 800071c:	189b      	adds	r3, r3, r2
 800071e:	2b03      	cmp	r3, #3
 8000720:	d110      	bne.n	8000744 <analiza_czujnikow+0xe8>
			&& czujniki[5] + czujniki[6] == 0) {
 8000722:	4b17      	ldr	r3, [pc, #92]	; (8000780 <analiza_czujnikow+0x124>)
 8000724:	895b      	ldrh	r3, [r3, #10]
 8000726:	001a      	movs	r2, r3
 8000728:	4b15      	ldr	r3, [pc, #84]	; (8000780 <analiza_czujnikow+0x124>)
 800072a:	899b      	ldrh	r3, [r3, #12]
 800072c:	18d3      	adds	r3, r2, r3
 800072e:	2b00      	cmp	r3, #0
 8000730:	d108      	bne.n	8000744 <analiza_czujnikow+0xe8>
		kat_prosty = -1;
 8000732:	4b15      	ldr	r3, [pc, #84]	; (8000788 <analiza_czujnikow+0x12c>)
 8000734:	2201      	movs	r2, #1
 8000736:	4252      	negs	r2, r2
 8000738:	601a      	str	r2, [r3, #0]
		przestrzelony = -1;
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <analiza_czujnikow+0x130>)
 800073c:	2201      	movs	r2, #1
 800073e:	4252      	negs	r2, r2
 8000740:	601a      	str	r2, [r3, #0]
			&& czujniki[2] + czujniki[3] == 0) {
		kat_prosty = 1;
		przestrzelony = 1;
	};

}
 8000742:	e018      	b.n	8000776 <analiza_czujnikow+0x11a>
	} else if (czujniki[6] + czujniki[4] + czujniki[5] == 3
 8000744:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <analiza_czujnikow+0x124>)
 8000746:	899b      	ldrh	r3, [r3, #12]
 8000748:	001a      	movs	r2, r3
 800074a:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <analiza_czujnikow+0x124>)
 800074c:	891b      	ldrh	r3, [r3, #8]
 800074e:	18d3      	adds	r3, r2, r3
 8000750:	4a0b      	ldr	r2, [pc, #44]	; (8000780 <analiza_czujnikow+0x124>)
 8000752:	8952      	ldrh	r2, [r2, #10]
 8000754:	189b      	adds	r3, r3, r2
 8000756:	2b03      	cmp	r3, #3
 8000758:	d10d      	bne.n	8000776 <analiza_czujnikow+0x11a>
			&& czujniki[2] + czujniki[3] == 0) {
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <analiza_czujnikow+0x124>)
 800075c:	889b      	ldrh	r3, [r3, #4]
 800075e:	001a      	movs	r2, r3
 8000760:	4b07      	ldr	r3, [pc, #28]	; (8000780 <analiza_czujnikow+0x124>)
 8000762:	88db      	ldrh	r3, [r3, #6]
 8000764:	18d3      	adds	r3, r2, r3
 8000766:	2b00      	cmp	r3, #0
 8000768:	d105      	bne.n	8000776 <analiza_czujnikow+0x11a>
		kat_prosty = 1;
 800076a:	4b07      	ldr	r3, [pc, #28]	; (8000788 <analiza_czujnikow+0x12c>)
 800076c:	2201      	movs	r2, #1
 800076e:	601a      	str	r2, [r3, #0]
		przestrzelony = 1;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <analiza_czujnikow+0x130>)
 8000772:	2201      	movs	r2, #1
 8000774:	601a      	str	r2, [r3, #0]
}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	46bd      	mov	sp, r7
 800077a:	b004      	add	sp, #16
 800077c:	bd80      	pop	{r7, pc}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	20000070 	.word	0x20000070
 8000784:	20000050 	.word	0x20000050
 8000788:	2000006c 	.word	0x2000006c
 800078c:	2000005c 	.word	0x2000005c

08000790 <analiza_polozenia>:

int analiza_polozenia() {
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0
	int error = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
	int ile = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	613b      	str	r3, [r7, #16]
	int dzielnik = 1;
 800079e:	2301      	movs	r3, #1
 80007a0:	60fb      	str	r3, [r7, #12]

	// Wolniejsza jazda na zakr�tach

	if (czujniki[0] + czujniki[8] > 0) {
 80007a2:	4b6d      	ldr	r3, [pc, #436]	; (8000958 <analiza_polozenia+0x1c8>)
 80007a4:	881b      	ldrh	r3, [r3, #0]
 80007a6:	001a      	movs	r2, r3
 80007a8:	4b6b      	ldr	r3, [pc, #428]	; (8000958 <analiza_polozenia+0x1c8>)
 80007aa:	8a1b      	ldrh	r3, [r3, #16]
 80007ac:	18d3      	adds	r3, r2, r3
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	dd06      	ble.n	80007c0 <analiza_polozenia+0x30>
		predkosc_zadana = SPEED_3 * VMED / 100;
 80007b2:	4b6a      	ldr	r3, [pc, #424]	; (800095c <analiza_polozenia+0x1cc>)
 80007b4:	227a      	movs	r2, #122	; 0x7a
 80007b6:	601a      	str	r2, [r3, #0]
		Kp = KP+10;
 80007b8:	4b69      	ldr	r3, [pc, #420]	; (8000960 <analiza_polozenia+0x1d0>)
 80007ba:	2210      	movs	r2, #16
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	e030      	b.n	8000822 <analiza_polozenia+0x92>
	} else if (czujniki[1] + czujniki[7] > 0) {
 80007c0:	4b65      	ldr	r3, [pc, #404]	; (8000958 <analiza_polozenia+0x1c8>)
 80007c2:	885b      	ldrh	r3, [r3, #2]
 80007c4:	001a      	movs	r2, r3
 80007c6:	4b64      	ldr	r3, [pc, #400]	; (8000958 <analiza_polozenia+0x1c8>)
 80007c8:	89db      	ldrh	r3, [r3, #14]
 80007ca:	18d3      	adds	r3, r2, r3
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	dd06      	ble.n	80007de <analiza_polozenia+0x4e>
		predkosc_zadana = SPEED_2 * VMED / 100;
 80007d0:	4b62      	ldr	r3, [pc, #392]	; (800095c <analiza_polozenia+0x1cc>)
 80007d2:	22af      	movs	r2, #175	; 0xaf
 80007d4:	601a      	str	r2, [r3, #0]
		Kp = KP+6;
 80007d6:	4b62      	ldr	r3, [pc, #392]	; (8000960 <analiza_polozenia+0x1d0>)
 80007d8:	220c      	movs	r2, #12
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	e021      	b.n	8000822 <analiza_polozenia+0x92>
	} else if (czujniki[2] + czujniki[6] > 0) {
 80007de:	4b5e      	ldr	r3, [pc, #376]	; (8000958 <analiza_polozenia+0x1c8>)
 80007e0:	889b      	ldrh	r3, [r3, #4]
 80007e2:	001a      	movs	r2, r3
 80007e4:	4b5c      	ldr	r3, [pc, #368]	; (8000958 <analiza_polozenia+0x1c8>)
 80007e6:	899b      	ldrh	r3, [r3, #12]
 80007e8:	18d3      	adds	r3, r2, r3
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	dd07      	ble.n	80007fe <analiza_polozenia+0x6e>
		predkosc_zadana = SPEED_1 * VMED / 100;
 80007ee:	4b5b      	ldr	r3, [pc, #364]	; (800095c <analiza_polozenia+0x1cc>)
 80007f0:	2283      	movs	r2, #131	; 0x83
 80007f2:	0052      	lsls	r2, r2, #1
 80007f4:	601a      	str	r2, [r3, #0]
		Kp = KP+3;
 80007f6:	4b5a      	ldr	r3, [pc, #360]	; (8000960 <analiza_polozenia+0x1d0>)
 80007f8:	2209      	movs	r2, #9
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	e011      	b.n	8000822 <analiza_polozenia+0x92>
	} else if (czujniki[3] + czujniki[4] + czujniki[5] > 0) {
 80007fe:	4b56      	ldr	r3, [pc, #344]	; (8000958 <analiza_polozenia+0x1c8>)
 8000800:	88db      	ldrh	r3, [r3, #6]
 8000802:	001a      	movs	r2, r3
 8000804:	4b54      	ldr	r3, [pc, #336]	; (8000958 <analiza_polozenia+0x1c8>)
 8000806:	891b      	ldrh	r3, [r3, #8]
 8000808:	18d3      	adds	r3, r2, r3
 800080a:	4a53      	ldr	r2, [pc, #332]	; (8000958 <analiza_polozenia+0x1c8>)
 800080c:	8952      	ldrh	r2, [r2, #10]
 800080e:	189b      	adds	r3, r3, r2
 8000810:	2b00      	cmp	r3, #0
 8000812:	dd06      	ble.n	8000822 <analiza_polozenia+0x92>
		predkosc_zadana = VMED;
 8000814:	4b51      	ldr	r3, [pc, #324]	; (800095c <analiza_polozenia+0x1cc>)
 8000816:	22af      	movs	r2, #175	; 0xaf
 8000818:	0052      	lsls	r2, r2, #1
 800081a:	601a      	str	r2, [r3, #0]
		Kp = KP;
 800081c:	4b50      	ldr	r3, [pc, #320]	; (8000960 <analiza_polozenia+0x1d0>)
 800081e:	2206      	movs	r2, #6
 8000820:	601a      	str	r2, [r3, #0]
	};

	//Nowe wagi dla aktualnej predkosci

	for (int i = 0; i < 9; ++i) {
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	e013      	b.n	8000850 <analiza_polozenia+0xc0>
		wagi[i] = (wzor_wag[i] * predkosc_zadana) / 100;
 8000828:	4b4e      	ldr	r3, [pc, #312]	; (8000964 <analiza_polozenia+0x1d4>)
 800082a:	68ba      	ldr	r2, [r7, #8]
 800082c:	0092      	lsls	r2, r2, #2
 800082e:	58d2      	ldr	r2, [r2, r3]
 8000830:	4b4a      	ldr	r3, [pc, #296]	; (800095c <analiza_polozenia+0x1cc>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4353      	muls	r3, r2
 8000836:	2164      	movs	r1, #100	; 0x64
 8000838:	0018      	movs	r0, r3
 800083a:	f7ff fcef 	bl	800021c <__divsi3>
 800083e:	0003      	movs	r3, r0
 8000840:	0019      	movs	r1, r3
 8000842:	4b49      	ldr	r3, [pc, #292]	; (8000968 <analiza_polozenia+0x1d8>)
 8000844:	68ba      	ldr	r2, [r7, #8]
 8000846:	0092      	lsls	r2, r2, #2
 8000848:	50d1      	str	r1, [r2, r3]
	for (int i = 0; i < 9; ++i) {
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	3301      	adds	r3, #1
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	2b08      	cmp	r3, #8
 8000854:	dde8      	ble.n	8000828 <analiza_polozenia+0x98>
	};

	//Jezeli przestrzelony to zmniejsz reakcje po powrocie na tras�

	if (przestrzelony != 0) {
 8000856:	4b45      	ldr	r3, [pc, #276]	; (800096c <analiza_polozenia+0x1dc>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <analiza_polozenia+0xd2>
		dzielnik = DZIELNIK;
 800085e:	230f      	movs	r3, #15
 8000860:	60fb      	str	r3, [r7, #12]
	};

	//Nadanie warto�ci czujnikom

	for (int i = 0; i < 9; ++i) {
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	e01d      	b.n	80008a4 <analiza_polozenia+0x114>
		error += czujniki[i] * wagi[i] / dzielnik;
 8000868:	4b3b      	ldr	r3, [pc, #236]	; (8000958 <analiza_polozenia+0x1c8>)
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	0052      	lsls	r2, r2, #1
 800086e:	5ad3      	ldrh	r3, [r2, r3]
 8000870:	0019      	movs	r1, r3
 8000872:	4b3d      	ldr	r3, [pc, #244]	; (8000968 <analiza_polozenia+0x1d8>)
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	0092      	lsls	r2, r2, #2
 8000878:	58d3      	ldr	r3, [r2, r3]
 800087a:	434b      	muls	r3, r1
 800087c:	68f9      	ldr	r1, [r7, #12]
 800087e:	0018      	movs	r0, r3
 8000880:	f7ff fccc 	bl	800021c <__divsi3>
 8000884:	0003      	movs	r3, r0
 8000886:	001a      	movs	r2, r3
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	189b      	adds	r3, r3, r2
 800088c:	617b      	str	r3, [r7, #20]
		ile += czujniki[i];
 800088e:	4b32      	ldr	r3, [pc, #200]	; (8000958 <analiza_polozenia+0x1c8>)
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	0052      	lsls	r2, r2, #1
 8000894:	5ad3      	ldrh	r3, [r2, r3]
 8000896:	001a      	movs	r2, r3
 8000898:	693b      	ldr	r3, [r7, #16]
 800089a:	189b      	adds	r3, r3, r2
 800089c:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < 9; ++i) {
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	3301      	adds	r3, #1
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2b08      	cmp	r3, #8
 80008a8:	ddde      	ble.n	8000868 <analiza_polozenia+0xd8>
	};

	//Je�li wykrywa lini� to jedzie wed�ug czujnik�w

	if (ile > 0) {
 80008aa:	693b      	ldr	r3, [r7, #16]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	dd06      	ble.n	80008be <analiza_polozenia+0x12e>
		error /= ile;
 80008b0:	6939      	ldr	r1, [r7, #16]
 80008b2:	6978      	ldr	r0, [r7, #20]
 80008b4:	f7ff fcb2 	bl	800021c <__divsi3>
 80008b8:	0003      	movs	r3, r0
 80008ba:	617b      	str	r3, [r7, #20]
 80008bc:	e02e      	b.n	800091c <analiza_polozenia+0x18c>
	} else if (ile == 0) {
 80008be:	693b      	ldr	r3, [r7, #16]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d12b      	bne.n	800091c <analiza_polozenia+0x18c>

		// Obs�uga przestrzelenia

		if (poprzednia_korekta > wagi[7]) {
 80008c4:	4b28      	ldr	r3, [pc, #160]	; (8000968 <analiza_polozenia+0x1d8>)
 80008c6:	69da      	ldr	r2, [r3, #28]
 80008c8:	4b29      	ldr	r3, [pc, #164]	; (8000970 <analiza_polozenia+0x1e0>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	da0d      	bge.n	80008ec <analiza_polozenia+0x15c>
			error = wagi[8]*PRZESTRZAL/100;
 80008d0:	4b25      	ldr	r3, [pc, #148]	; (8000968 <analiza_polozenia+0x1d8>)
 80008d2:	6a1b      	ldr	r3, [r3, #32]
 80008d4:	228c      	movs	r2, #140	; 0x8c
 80008d6:	4353      	muls	r3, r2
 80008d8:	2164      	movs	r1, #100	; 0x64
 80008da:	0018      	movs	r0, r3
 80008dc:	f7ff fc9e 	bl	800021c <__divsi3>
 80008e0:	0003      	movs	r3, r0
 80008e2:	617b      	str	r3, [r7, #20]
			przestrzelony = 1;
 80008e4:	4b21      	ldr	r3, [pc, #132]	; (800096c <analiza_polozenia+0x1dc>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	e017      	b.n	800091c <analiza_polozenia+0x18c>

		} else if (poprzednia_korekta < wagi[1]) {
 80008ec:	4b1e      	ldr	r3, [pc, #120]	; (8000968 <analiza_polozenia+0x1d8>)
 80008ee:	685a      	ldr	r2, [r3, #4]
 80008f0:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <analiza_polozenia+0x1e0>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	dd0e      	ble.n	8000916 <analiza_polozenia+0x186>
			error = wagi[0]*PRZESTRZAL/100;
 80008f8:	4b1b      	ldr	r3, [pc, #108]	; (8000968 <analiza_polozenia+0x1d8>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	228c      	movs	r2, #140	; 0x8c
 80008fe:	4353      	muls	r3, r2
 8000900:	2164      	movs	r1, #100	; 0x64
 8000902:	0018      	movs	r0, r3
 8000904:	f7ff fc8a 	bl	800021c <__divsi3>
 8000908:	0003      	movs	r3, r0
 800090a:	617b      	str	r3, [r7, #20]
			przestrzelony = -1;
 800090c:	4b17      	ldr	r3, [pc, #92]	; (800096c <analiza_polozenia+0x1dc>)
 800090e:	2201      	movs	r2, #1
 8000910:	4252      	negs	r2, r2
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	e002      	b.n	800091c <analiza_polozenia+0x18c>
		} else {
			error = poprzednia_korekta;
 8000916:	4b16      	ldr	r3, [pc, #88]	; (8000970 <analiza_polozenia+0x1e0>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	617b      	str	r3, [r7, #20]
		};
	};

	//Usuniecie flagi przestrzelenia gdy wroci na tor

	if (przestrzelony == 1 && error <= wagi[5]) {
 800091c:	4b13      	ldr	r3, [pc, #76]	; (800096c <analiza_polozenia+0x1dc>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b01      	cmp	r3, #1
 8000922:	d108      	bne.n	8000936 <analiza_polozenia+0x1a6>
 8000924:	4b10      	ldr	r3, [pc, #64]	; (8000968 <analiza_polozenia+0x1d8>)
 8000926:	695b      	ldr	r3, [r3, #20]
 8000928:	697a      	ldr	r2, [r7, #20]
 800092a:	429a      	cmp	r2, r3
 800092c:	dc03      	bgt.n	8000936 <analiza_polozenia+0x1a6>
		przestrzelony = 0;
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <analiza_polozenia+0x1dc>)
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	e00b      	b.n	800094e <analiza_polozenia+0x1be>
	} else if (przestrzelony == -1 && error >= wagi[3]) {
 8000936:	4b0d      	ldr	r3, [pc, #52]	; (800096c <analiza_polozenia+0x1dc>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	3301      	adds	r3, #1
 800093c:	d107      	bne.n	800094e <analiza_polozenia+0x1be>
 800093e:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <analiza_polozenia+0x1d8>)
 8000940:	68db      	ldr	r3, [r3, #12]
 8000942:	697a      	ldr	r2, [r7, #20]
 8000944:	429a      	cmp	r2, r3
 8000946:	db02      	blt.n	800094e <analiza_polozenia+0x1be>
		przestrzelony = 0;
 8000948:	4b08      	ldr	r3, [pc, #32]	; (800096c <analiza_polozenia+0x1dc>)
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
	};
	return error;
 800094e:	697b      	ldr	r3, [r7, #20]
}
 8000950:	0018      	movs	r0, r3
 8000952:	46bd      	mov	sp, r7
 8000954:	b006      	add	sp, #24
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000070 	.word	0x20000070
 800095c:	20000000 	.word	0x20000000
 8000960:	20000028 	.word	0x20000028
 8000964:	20000004 	.word	0x20000004
 8000968:	2000012c 	.word	0x2000012c
 800096c:	2000005c 	.word	0x2000005c
 8000970:	20000058 	.word	0x20000058

08000974 <PD>:

int PD() {
 8000974:	b590      	push	{r4, r7, lr}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
	int rozniczka = 0;
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
	rozniczka = korekta - poprzednia_korekta;
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <PD+0x50>)
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <PD+0x54>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	1ad3      	subs	r3, r2, r3
 8000988:	607b      	str	r3, [r7, #4]
	poprzednia_korekta = korekta;
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <PD+0x50>)
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <PD+0x54>)
 8000990:	601a      	str	r2, [r3, #0]
	return Kp * korekta / 10 + Kd * rozniczka / 100;
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <PD+0x58>)
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <PD+0x50>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4353      	muls	r3, r2
 800099c:	210a      	movs	r1, #10
 800099e:	0018      	movs	r0, r3
 80009a0:	f7ff fc3c 	bl	800021c <__divsi3>
 80009a4:	0003      	movs	r3, r0
 80009a6:	001c      	movs	r4, r3
 80009a8:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <PD+0x5c>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	687a      	ldr	r2, [r7, #4]
 80009ae:	4353      	muls	r3, r2
 80009b0:	2164      	movs	r1, #100	; 0x64
 80009b2:	0018      	movs	r0, r3
 80009b4:	f7ff fc32 	bl	800021c <__divsi3>
 80009b8:	0003      	movs	r3, r0
 80009ba:	18e3      	adds	r3, r4, r3
}
 80009bc:	0018      	movs	r0, r3
 80009be:	46bd      	mov	sp, r7
 80009c0:	b003      	add	sp, #12
 80009c2:	bd90      	pop	{r4, r7, pc}
 80009c4:	20000054 	.word	0x20000054
 80009c8:	20000058 	.word	0x20000058
 80009cc:	20000028 	.word	0x20000028
 80009d0:	2000002c 	.word	0x2000002c

080009d4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM6) {
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a17      	ldr	r2, [pc, #92]	; (8000a40 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d11b      	bne.n	8000a1e <HAL_TIM_PeriodElapsedCallback+0x4a>
		analiza_czujnikow(pomiar);
 80009e6:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80009e8:	0018      	movs	r0, r3
 80009ea:	f7ff fe37 	bl	800065c <analiza_czujnikow>
		korekta = analiza_polozenia();
 80009ee:	f7ff fecf 	bl	8000790 <analiza_polozenia>
 80009f2:	0002      	movs	r2, r0
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80009f6:	601a      	str	r2, [r3, #0]
		regulacja = PD();
 80009f8:	f7ff ffbc 	bl	8000974 <PD>
 80009fc:	0002      	movs	r2, r0
 80009fe:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000a00:	601a      	str	r2, [r3, #0]
		lewy_silnik = predkosc_zadana + regulacja;
 8000a02:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	18d2      	adds	r2, r2, r3
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000a0e:	601a      	str	r2, [r3, #0]
		prawy_silnik = predkosc_zadana - regulacja;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	1ad2      	subs	r2, r2, r3
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000a1c:	601a      	str	r2, [r3, #0]
	};

	if (htim->Instance == TIM21) {
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a0e      	ldr	r2, [pc, #56]	; (8000a5c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d107      	bne.n	8000a38 <HAL_TIM_PeriodElapsedCallback+0x64>
		HAL_GPIO_TogglePin(LED_0_GPIO_Port, LED_0_Pin);
 8000a28:	2380      	movs	r3, #128	; 0x80
 8000a2a:	005a      	lsls	r2, r3, #1
 8000a2c:	23a0      	movs	r3, #160	; 0xa0
 8000a2e:	05db      	lsls	r3, r3, #23
 8000a30:	0011      	movs	r1, r2
 8000a32:	0018      	movs	r0, r3
 8000a34:	f002 fb94 	bl	8003160 <HAL_GPIO_TogglePin>
	};
}
 8000a38:	46c0      	nop			; (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	b002      	add	sp, #8
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40001000 	.word	0x40001000
 8000a44:	20000088 	.word	0x20000088
 8000a48:	20000054 	.word	0x20000054
 8000a4c:	20000060 	.word	0x20000060
 8000a50:	20000000 	.word	0x20000000
 8000a54:	20000084 	.word	0x20000084
 8000a58:	2000018c 	.word	0x2000018c
 8000a5c:	40010800 	.word	0x40010800

08000a60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a64:	f000 fdf0 	bl	8001648 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a68:	f000 f83e 	bl	8000ae8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a6c:	f000 fb1e 	bl	80010ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000a70:	f000 fafe 	bl	8001070 <MX_DMA_Init>
  MX_ADC_Init();
 8000a74:	f000 f8aa 	bl	8000bcc <MX_ADC_Init>
  MX_TIM2_Init();
 8000a78:	f000 f986 	bl	8000d88 <MX_TIM2_Init>
  MX_TIM6_Init();
 8000a7c:	f000 fa0e 	bl	8000e9c <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8000a80:	f000 fac6 	bl	8001010 <MX_USART1_UART_Init>
  MX_TIM21_Init();
 8000a84:	f000 fa46 	bl	8000f14 <MX_TIM21_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc, pomiar, 9);
 8000a88:	4912      	ldr	r1, [pc, #72]	; (8000ad4 <main+0x74>)
 8000a8a:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <main+0x78>)
 8000a8c:	2209      	movs	r2, #9
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f001 f9f0 	bl	8001e74 <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <main+0x7c>)
 8000a96:	2100      	movs	r1, #0
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f003 ffad 	bl	80049f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000a9e:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <main+0x7c>)
 8000aa0:	2104      	movs	r1, #4
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f003 ffa8 	bl	80049f8 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 8000aa8:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <main+0x80>)
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f003 fea6 	bl	80047fc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim21);
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <main+0x84>)
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f003 fea2 	bl	80047fc <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(1000);
 8000ab8:	23fa      	movs	r3, #250	; 0xfa
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	0018      	movs	r0, r3
 8000abe:	f000 fe23 	bl	8001708 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8000ac2:	2380      	movs	r3, #128	; 0x80
 8000ac4:	011a      	lsls	r2, r3, #4
 8000ac6:	23a0      	movs	r3, #160	; 0xa0
 8000ac8:	05db      	lsls	r3, r3, #23
 8000aca:	0011      	movs	r1, r2
 8000acc:	0018      	movs	r0, r3
 8000ace:	f002 fb47 	bl	8003160 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000ad2:	e7f1      	b.n	8000ab8 <main+0x58>
 8000ad4:	20000088 	.word	0x20000088
 8000ad8:	20000214 	.word	0x20000214
 8000adc:	20000190 	.word	0x20000190
 8000ae0:	20000150 	.word	0x20000150
 8000ae4:	20000270 	.word	0x20000270

08000ae8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae8:	b590      	push	{r4, r7, lr}
 8000aea:	b09d      	sub	sp, #116	; 0x74
 8000aec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aee:	2438      	movs	r4, #56	; 0x38
 8000af0:	193b      	adds	r3, r7, r4
 8000af2:	0018      	movs	r0, r3
 8000af4:	2338      	movs	r3, #56	; 0x38
 8000af6:	001a      	movs	r2, r3
 8000af8:	2100      	movs	r1, #0
 8000afa:	f005 fe69 	bl	80067d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000afe:	2324      	movs	r3, #36	; 0x24
 8000b00:	18fb      	adds	r3, r7, r3
 8000b02:	0018      	movs	r0, r3
 8000b04:	2314      	movs	r3, #20
 8000b06:	001a      	movs	r2, r3
 8000b08:	2100      	movs	r1, #0
 8000b0a:	f005 fe61 	bl	80067d0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	0018      	movs	r0, r3
 8000b12:	2320      	movs	r3, #32
 8000b14:	001a      	movs	r2, r3
 8000b16:	2100      	movs	r1, #0
 8000b18:	f005 fe5a 	bl	80067d0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b1c:	4b29      	ldr	r3, [pc, #164]	; (8000bc4 <SystemClock_Config+0xdc>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a29      	ldr	r2, [pc, #164]	; (8000bc8 <SystemClock_Config+0xe0>)
 8000b22:	401a      	ands	r2, r3
 8000b24:	4b27      	ldr	r3, [pc, #156]	; (8000bc4 <SystemClock_Config+0xdc>)
 8000b26:	2180      	movs	r1, #128	; 0x80
 8000b28:	0109      	lsls	r1, r1, #4
 8000b2a:	430a      	orrs	r2, r1
 8000b2c:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b2e:	0021      	movs	r1, r4
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	2202      	movs	r2, #2
 8000b34:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b36:	187b      	adds	r3, r7, r1
 8000b38:	2201      	movs	r2, #1
 8000b3a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b3c:	187b      	adds	r3, r7, r1
 8000b3e:	2210      	movs	r2, #16
 8000b40:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b42:	187b      	adds	r3, r7, r1
 8000b44:	2202      	movs	r2, #2
 8000b46:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b48:	187b      	adds	r3, r7, r1
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000b4e:	187b      	adds	r3, r7, r1
 8000b50:	2280      	movs	r2, #128	; 0x80
 8000b52:	02d2      	lsls	r2, r2, #11
 8000b54:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000b56:	187b      	adds	r3, r7, r1
 8000b58:	2280      	movs	r2, #128	; 0x80
 8000b5a:	03d2      	lsls	r2, r2, #15
 8000b5c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b5e:	187b      	adds	r3, r7, r1
 8000b60:	0018      	movs	r0, r3
 8000b62:	f002 fb75 	bl	8003250 <HAL_RCC_OscConfig>
 8000b66:	1e03      	subs	r3, r0, #0
 8000b68:	d001      	beq.n	8000b6e <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000b6a:	f000 fb29 	bl	80011c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b6e:	2124      	movs	r1, #36	; 0x24
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	220f      	movs	r2, #15
 8000b74:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b76:	187b      	adds	r3, r7, r1
 8000b78:	2203      	movs	r2, #3
 8000b7a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b7c:	187b      	adds	r3, r7, r1
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b82:	187b      	adds	r3, r7, r1
 8000b84:	2200      	movs	r2, #0
 8000b86:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b88:	187b      	adds	r3, r7, r1
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b8e:	187b      	adds	r3, r7, r1
 8000b90:	2101      	movs	r1, #1
 8000b92:	0018      	movs	r0, r3
 8000b94:	f003 f8d0 	bl	8003d38 <HAL_RCC_ClockConfig>
 8000b98:	1e03      	subs	r3, r0, #0
 8000b9a:	d001      	beq.n	8000ba0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000b9c:	f000 fb10 	bl	80011c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ba0:	1d3b      	adds	r3, r7, #4
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f003 fb64 	bl	800427c <HAL_RCCEx_PeriphCLKConfig>
 8000bb4:	1e03      	subs	r3, r0, #0
 8000bb6:	d001      	beq.n	8000bbc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000bb8:	f000 fb02 	bl	80011c0 <Error_Handler>
  }
}
 8000bbc:	46c0      	nop			; (mov r8, r8)
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	b01d      	add	sp, #116	; 0x74
 8000bc2:	bd90      	pop	{r4, r7, pc}
 8000bc4:	40007000 	.word	0x40007000
 8000bc8:	ffffe7ff 	.word	0xffffe7ff

08000bcc <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bd2:	003b      	movs	r3, r7
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	2308      	movs	r3, #8
 8000bd8:	001a      	movs	r2, r3
 8000bda:	2100      	movs	r1, #0
 8000bdc:	f005 fdf8 	bl	80067d0 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8000be0:	4b5e      	ldr	r3, [pc, #376]	; (8000d5c <MX_ADC_Init+0x190>)
 8000be2:	4a5f      	ldr	r2, [pc, #380]	; (8000d60 <MX_ADC_Init+0x194>)
 8000be4:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000be6:	4b5d      	ldr	r3, [pc, #372]	; (8000d5c <MX_ADC_Init+0x190>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bec:	4b5b      	ldr	r3, [pc, #364]	; (8000d5c <MX_ADC_Init+0x190>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000bf2:	4b5a      	ldr	r3, [pc, #360]	; (8000d5c <MX_ADC_Init+0x190>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_39CYCLES_5;
 8000bf8:	4b58      	ldr	r3, [pc, #352]	; (8000d5c <MX_ADC_Init+0x190>)
 8000bfa:	2205      	movs	r2, #5
 8000bfc:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000bfe:	4b57      	ldr	r3, [pc, #348]	; (8000d5c <MX_ADC_Init+0x190>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c04:	4b55      	ldr	r3, [pc, #340]	; (8000d5c <MX_ADC_Init+0x190>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000c0a:	4b54      	ldr	r3, [pc, #336]	; (8000d5c <MX_ADC_Init+0x190>)
 8000c0c:	2220      	movs	r2, #32
 8000c0e:	2101      	movs	r1, #1
 8000c10:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000c12:	4b52      	ldr	r3, [pc, #328]	; (8000d5c <MX_ADC_Init+0x190>)
 8000c14:	2221      	movs	r2, #33	; 0x21
 8000c16:	2100      	movs	r1, #0
 8000c18:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c1a:	4b50      	ldr	r3, [pc, #320]	; (8000d5c <MX_ADC_Init+0x190>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c20:	4b4e      	ldr	r3, [pc, #312]	; (8000d5c <MX_ADC_Init+0x190>)
 8000c22:	22c2      	movs	r2, #194	; 0xc2
 8000c24:	32ff      	adds	r2, #255	; 0xff
 8000c26:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000c28:	4b4c      	ldr	r3, [pc, #304]	; (8000d5c <MX_ADC_Init+0x190>)
 8000c2a:	222c      	movs	r2, #44	; 0x2c
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c30:	4b4a      	ldr	r3, [pc, #296]	; (8000d5c <MX_ADC_Init+0x190>)
 8000c32:	2204      	movs	r2, #4
 8000c34:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000c36:	4b49      	ldr	r3, [pc, #292]	; (8000d5c <MX_ADC_Init+0x190>)
 8000c38:	2280      	movs	r2, #128	; 0x80
 8000c3a:	0152      	lsls	r2, r2, #5
 8000c3c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000c3e:	4b47      	ldr	r3, [pc, #284]	; (8000d5c <MX_ADC_Init+0x190>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000c44:	4b45      	ldr	r3, [pc, #276]	; (8000d5c <MX_ADC_Init+0x190>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000c4a:	4b44      	ldr	r3, [pc, #272]	; (8000d5c <MX_ADC_Init+0x190>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000c50:	4b42      	ldr	r3, [pc, #264]	; (8000d5c <MX_ADC_Init+0x190>)
 8000c52:	0018      	movs	r0, r3
 8000c54:	f000 fd76 	bl	8001744 <HAL_ADC_Init>
 8000c58:	1e03      	subs	r3, r0, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000c5c:	f000 fab0 	bl	80011c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c60:	003b      	movs	r3, r7
 8000c62:	4a40      	ldr	r2, [pc, #256]	; (8000d64 <MX_ADC_Init+0x198>)
 8000c64:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000c66:	003b      	movs	r3, r7
 8000c68:	2280      	movs	r2, #128	; 0x80
 8000c6a:	0152      	lsls	r2, r2, #5
 8000c6c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c6e:	003a      	movs	r2, r7
 8000c70:	4b3a      	ldr	r3, [pc, #232]	; (8000d5c <MX_ADC_Init+0x190>)
 8000c72:	0011      	movs	r1, r2
 8000c74:	0018      	movs	r0, r3
 8000c76:	f001 f9a9 	bl	8001fcc <HAL_ADC_ConfigChannel>
 8000c7a:	1e03      	subs	r3, r0, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000c7e:	f000 fa9f 	bl	80011c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000c82:	003b      	movs	r3, r7
 8000c84:	4a38      	ldr	r2, [pc, #224]	; (8000d68 <MX_ADC_Init+0x19c>)
 8000c86:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c88:	003a      	movs	r2, r7
 8000c8a:	4b34      	ldr	r3, [pc, #208]	; (8000d5c <MX_ADC_Init+0x190>)
 8000c8c:	0011      	movs	r1, r2
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f001 f99c 	bl	8001fcc <HAL_ADC_ConfigChannel>
 8000c94:	1e03      	subs	r3, r0, #0
 8000c96:	d001      	beq.n	8000c9c <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000c98:	f000 fa92 	bl	80011c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000c9c:	003b      	movs	r3, r7
 8000c9e:	4a33      	ldr	r2, [pc, #204]	; (8000d6c <MX_ADC_Init+0x1a0>)
 8000ca0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ca2:	003a      	movs	r2, r7
 8000ca4:	4b2d      	ldr	r3, [pc, #180]	; (8000d5c <MX_ADC_Init+0x190>)
 8000ca6:	0011      	movs	r1, r2
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f001 f98f 	bl	8001fcc <HAL_ADC_ConfigChannel>
 8000cae:	1e03      	subs	r3, r0, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_ADC_Init+0xea>
  {
    Error_Handler();
 8000cb2:	f000 fa85 	bl	80011c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000cb6:	003b      	movs	r3, r7
 8000cb8:	4a2d      	ldr	r2, [pc, #180]	; (8000d70 <MX_ADC_Init+0x1a4>)
 8000cba:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000cbc:	003a      	movs	r2, r7
 8000cbe:	4b27      	ldr	r3, [pc, #156]	; (8000d5c <MX_ADC_Init+0x190>)
 8000cc0:	0011      	movs	r1, r2
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f001 f982 	bl	8001fcc <HAL_ADC_ConfigChannel>
 8000cc8:	1e03      	subs	r3, r0, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_ADC_Init+0x104>
  {
    Error_Handler();
 8000ccc:	f000 fa78 	bl	80011c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000cd0:	003b      	movs	r3, r7
 8000cd2:	4a28      	ldr	r2, [pc, #160]	; (8000d74 <MX_ADC_Init+0x1a8>)
 8000cd4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000cd6:	003a      	movs	r2, r7
 8000cd8:	4b20      	ldr	r3, [pc, #128]	; (8000d5c <MX_ADC_Init+0x190>)
 8000cda:	0011      	movs	r1, r2
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f001 f975 	bl	8001fcc <HAL_ADC_ConfigChannel>
 8000ce2:	1e03      	subs	r3, r0, #0
 8000ce4:	d001      	beq.n	8000cea <MX_ADC_Init+0x11e>
  {
    Error_Handler();
 8000ce6:	f000 fa6b 	bl	80011c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000cea:	003b      	movs	r3, r7
 8000cec:	4a22      	ldr	r2, [pc, #136]	; (8000d78 <MX_ADC_Init+0x1ac>)
 8000cee:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000cf0:	003a      	movs	r2, r7
 8000cf2:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <MX_ADC_Init+0x190>)
 8000cf4:	0011      	movs	r1, r2
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f001 f968 	bl	8001fcc <HAL_ADC_ConfigChannel>
 8000cfc:	1e03      	subs	r3, r0, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_ADC_Init+0x138>
  {
    Error_Handler();
 8000d00:	f000 fa5e 	bl	80011c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000d04:	003b      	movs	r3, r7
 8000d06:	4a1d      	ldr	r2, [pc, #116]	; (8000d7c <MX_ADC_Init+0x1b0>)
 8000d08:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000d0a:	003a      	movs	r2, r7
 8000d0c:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <MX_ADC_Init+0x190>)
 8000d0e:	0011      	movs	r1, r2
 8000d10:	0018      	movs	r0, r3
 8000d12:	f001 f95b 	bl	8001fcc <HAL_ADC_ConfigChannel>
 8000d16:	1e03      	subs	r3, r0, #0
 8000d18:	d001      	beq.n	8000d1e <MX_ADC_Init+0x152>
  {
    Error_Handler();
 8000d1a:	f000 fa51 	bl	80011c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000d1e:	003b      	movs	r3, r7
 8000d20:	4a17      	ldr	r2, [pc, #92]	; (8000d80 <MX_ADC_Init+0x1b4>)
 8000d22:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000d24:	003a      	movs	r2, r7
 8000d26:	4b0d      	ldr	r3, [pc, #52]	; (8000d5c <MX_ADC_Init+0x190>)
 8000d28:	0011      	movs	r1, r2
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f001 f94e 	bl	8001fcc <HAL_ADC_ConfigChannel>
 8000d30:	1e03      	subs	r3, r0, #0
 8000d32:	d001      	beq.n	8000d38 <MX_ADC_Init+0x16c>
  {
    Error_Handler();
 8000d34:	f000 fa44 	bl	80011c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000d38:	003b      	movs	r3, r7
 8000d3a:	4a12      	ldr	r2, [pc, #72]	; (8000d84 <MX_ADC_Init+0x1b8>)
 8000d3c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000d3e:	003a      	movs	r2, r7
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <MX_ADC_Init+0x190>)
 8000d42:	0011      	movs	r1, r2
 8000d44:	0018      	movs	r0, r3
 8000d46:	f001 f941 	bl	8001fcc <HAL_ADC_ConfigChannel>
 8000d4a:	1e03      	subs	r3, r0, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_ADC_Init+0x186>
  {
    Error_Handler();
 8000d4e:	f000 fa37 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000d52:	46c0      	nop			; (mov r8, r8)
 8000d54:	46bd      	mov	sp, r7
 8000d56:	b002      	add	sp, #8
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	20000214 	.word	0x20000214
 8000d60:	40012400 	.word	0x40012400
 8000d64:	04000002 	.word	0x04000002
 8000d68:	08000004 	.word	0x08000004
 8000d6c:	0c000008 	.word	0x0c000008
 8000d70:	10000010 	.word	0x10000010
 8000d74:	14000020 	.word	0x14000020
 8000d78:	18000040 	.word	0x18000040
 8000d7c:	1c000080 	.word	0x1c000080
 8000d80:	20000100 	.word	0x20000100
 8000d84:	24000200 	.word	0x24000200

08000d88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08a      	sub	sp, #40	; 0x28
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d8e:	2318      	movs	r3, #24
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	0018      	movs	r0, r3
 8000d94:	2310      	movs	r3, #16
 8000d96:	001a      	movs	r2, r3
 8000d98:	2100      	movs	r1, #0
 8000d9a:	f005 fd19 	bl	80067d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d9e:	2310      	movs	r3, #16
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	0018      	movs	r0, r3
 8000da4:	2308      	movs	r3, #8
 8000da6:	001a      	movs	r2, r3
 8000da8:	2100      	movs	r1, #0
 8000daa:	f005 fd11 	bl	80067d0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dae:	003b      	movs	r3, r7
 8000db0:	0018      	movs	r0, r3
 8000db2:	2310      	movs	r3, #16
 8000db4:	001a      	movs	r2, r3
 8000db6:	2100      	movs	r1, #0
 8000db8:	f005 fd0a 	bl	80067d0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dbc:	4b35      	ldr	r3, [pc, #212]	; (8000e94 <MX_TIM2_Init+0x10c>)
 8000dbe:	2280      	movs	r2, #128	; 0x80
 8000dc0:	05d2      	lsls	r2, r2, #23
 8000dc2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32;
 8000dc4:	4b33      	ldr	r3, [pc, #204]	; (8000e94 <MX_TIM2_Init+0x10c>)
 8000dc6:	2220      	movs	r2, #32
 8000dc8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dca:	4b32      	ldr	r3, [pc, #200]	; (8000e94 <MX_TIM2_Init+0x10c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000dd0:	4b30      	ldr	r3, [pc, #192]	; (8000e94 <MX_TIM2_Init+0x10c>)
 8000dd2:	4a31      	ldr	r2, [pc, #196]	; (8000e98 <MX_TIM2_Init+0x110>)
 8000dd4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd6:	4b2f      	ldr	r3, [pc, #188]	; (8000e94 <MX_TIM2_Init+0x10c>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ddc:	4b2d      	ldr	r3, [pc, #180]	; (8000e94 <MX_TIM2_Init+0x10c>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000de2:	4b2c      	ldr	r3, [pc, #176]	; (8000e94 <MX_TIM2_Init+0x10c>)
 8000de4:	0018      	movs	r0, r3
 8000de6:	f003 fc5b 	bl	80046a0 <HAL_TIM_Base_Init>
 8000dea:	1e03      	subs	r3, r0, #0
 8000dec:	d001      	beq.n	8000df2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000dee:	f000 f9e7 	bl	80011c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000df2:	2118      	movs	r1, #24
 8000df4:	187b      	adds	r3, r7, r1
 8000df6:	2280      	movs	r2, #128	; 0x80
 8000df8:	0152      	lsls	r2, r2, #5
 8000dfa:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dfc:	187a      	adds	r2, r7, r1
 8000dfe:	4b25      	ldr	r3, [pc, #148]	; (8000e94 <MX_TIM2_Init+0x10c>)
 8000e00:	0011      	movs	r1, r2
 8000e02:	0018      	movs	r0, r3
 8000e04:	f004 f88c 	bl	8004f20 <HAL_TIM_ConfigClockSource>
 8000e08:	1e03      	subs	r3, r0, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000e0c:	f000 f9d8 	bl	80011c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e10:	4b20      	ldr	r3, [pc, #128]	; (8000e94 <MX_TIM2_Init+0x10c>)
 8000e12:	0018      	movs	r0, r3
 8000e14:	f003 fd38 	bl	8004888 <HAL_TIM_PWM_Init>
 8000e18:	1e03      	subs	r3, r0, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000e1c:	f000 f9d0 	bl	80011c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e20:	2110      	movs	r1, #16
 8000e22:	187b      	adds	r3, r7, r1
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e28:	187b      	adds	r3, r7, r1
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e2e:	187a      	adds	r2, r7, r1
 8000e30:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <MX_TIM2_Init+0x10c>)
 8000e32:	0011      	movs	r1, r2
 8000e34:	0018      	movs	r0, r3
 8000e36:	f004 fd89 	bl	800594c <HAL_TIMEx_MasterConfigSynchronization>
 8000e3a:	1e03      	subs	r3, r0, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000e3e:	f000 f9bf 	bl	80011c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e42:	003b      	movs	r3, r7
 8000e44:	2260      	movs	r2, #96	; 0x60
 8000e46:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000e48:	003b      	movs	r3, r7
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e4e:	003b      	movs	r3, r7
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e54:	003b      	movs	r3, r7
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e5a:	0039      	movs	r1, r7
 8000e5c:	4b0d      	ldr	r3, [pc, #52]	; (8000e94 <MX_TIM2_Init+0x10c>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	0018      	movs	r0, r3
 8000e62:	f003 ff09 	bl	8004c78 <HAL_TIM_PWM_ConfigChannel>
 8000e66:	1e03      	subs	r3, r0, #0
 8000e68:	d001      	beq.n	8000e6e <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000e6a:	f000 f9a9 	bl	80011c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e6e:	0039      	movs	r1, r7
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <MX_TIM2_Init+0x10c>)
 8000e72:	2204      	movs	r2, #4
 8000e74:	0018      	movs	r0, r3
 8000e76:	f003 feff 	bl	8004c78 <HAL_TIM_PWM_ConfigChannel>
 8000e7a:	1e03      	subs	r3, r0, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 8000e7e:	f000 f99f 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e82:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <MX_TIM2_Init+0x10c>)
 8000e84:	0018      	movs	r0, r3
 8000e86:	f000 fa89 	bl	800139c <HAL_TIM_MspPostInit>

}
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	b00a      	add	sp, #40	; 0x28
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	46c0      	nop			; (mov r8, r8)
 8000e94:	20000190 	.word	0x20000190
 8000e98:	000003e7 	.word	0x000003e7

08000e9c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea2:	003b      	movs	r3, r7
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	2308      	movs	r3, #8
 8000ea8:	001a      	movs	r2, r3
 8000eaa:	2100      	movs	r1, #0
 8000eac:	f005 fc90 	bl	80067d0 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000eb0:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <MX_TIM6_Init+0x6c>)
 8000eb2:	4a16      	ldr	r2, [pc, #88]	; (8000f0c <MX_TIM6_Init+0x70>)
 8000eb4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000eb6:	4b14      	ldr	r3, [pc, #80]	; (8000f08 <MX_TIM6_Init+0x6c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ebc:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <MX_TIM6_Init+0x6c>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000ec2:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <MX_TIM6_Init+0x6c>)
 8000ec4:	4a12      	ldr	r2, [pc, #72]	; (8000f10 <MX_TIM6_Init+0x74>)
 8000ec6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec8:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <MX_TIM6_Init+0x6c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ece:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <MX_TIM6_Init+0x6c>)
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f003 fbe5 	bl	80046a0 <HAL_TIM_Base_Init>
 8000ed6:	1e03      	subs	r3, r0, #0
 8000ed8:	d001      	beq.n	8000ede <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000eda:	f000 f971 	bl	80011c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ede:	003b      	movs	r3, r7
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee4:	003b      	movs	r3, r7
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000eea:	003a      	movs	r2, r7
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <MX_TIM6_Init+0x6c>)
 8000eee:	0011      	movs	r1, r2
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	f004 fd2b 	bl	800594c <HAL_TIMEx_MasterConfigSynchronization>
 8000ef6:	1e03      	subs	r3, r0, #0
 8000ef8:	d001      	beq.n	8000efe <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000efa:	f000 f961 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	46bd      	mov	sp, r7
 8000f02:	b002      	add	sp, #8
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	46c0      	nop			; (mov r8, r8)
 8000f08:	20000150 	.word	0x20000150
 8000f0c:	40001000 	.word	0x40001000
 8000f10:	000003e7 	.word	0x000003e7

08000f14 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08a      	sub	sp, #40	; 0x28
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f1a:	2318      	movs	r3, #24
 8000f1c:	18fb      	adds	r3, r7, r3
 8000f1e:	0018      	movs	r0, r3
 8000f20:	2310      	movs	r3, #16
 8000f22:	001a      	movs	r2, r3
 8000f24:	2100      	movs	r1, #0
 8000f26:	f005 fc53 	bl	80067d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f2a:	2310      	movs	r3, #16
 8000f2c:	18fb      	adds	r3, r7, r3
 8000f2e:	0018      	movs	r0, r3
 8000f30:	2308      	movs	r3, #8
 8000f32:	001a      	movs	r2, r3
 8000f34:	2100      	movs	r1, #0
 8000f36:	f005 fc4b 	bl	80067d0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f3a:	003b      	movs	r3, r7
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	2310      	movs	r3, #16
 8000f40:	001a      	movs	r2, r3
 8000f42:	2100      	movs	r1, #0
 8000f44:	f005 fc44 	bl	80067d0 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8000f48:	4b2e      	ldr	r3, [pc, #184]	; (8001004 <MX_TIM21_Init+0xf0>)
 8000f4a:	4a2f      	ldr	r2, [pc, #188]	; (8001008 <MX_TIM21_Init+0xf4>)
 8000f4c:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 32000;
 8000f4e:	4b2d      	ldr	r3, [pc, #180]	; (8001004 <MX_TIM21_Init+0xf0>)
 8000f50:	22fa      	movs	r2, #250	; 0xfa
 8000f52:	01d2      	lsls	r2, r2, #7
 8000f54:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f56:	4b2b      	ldr	r3, [pc, #172]	; (8001004 <MX_TIM21_Init+0xf0>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 999;
 8000f5c:	4b29      	ldr	r3, [pc, #164]	; (8001004 <MX_TIM21_Init+0xf0>)
 8000f5e:	4a2b      	ldr	r2, [pc, #172]	; (800100c <MX_TIM21_Init+0xf8>)
 8000f60:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f62:	4b28      	ldr	r3, [pc, #160]	; (8001004 <MX_TIM21_Init+0xf0>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f68:	4b26      	ldr	r3, [pc, #152]	; (8001004 <MX_TIM21_Init+0xf0>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8000f6e:	4b25      	ldr	r3, [pc, #148]	; (8001004 <MX_TIM21_Init+0xf0>)
 8000f70:	0018      	movs	r0, r3
 8000f72:	f003 fb95 	bl	80046a0 <HAL_TIM_Base_Init>
 8000f76:	1e03      	subs	r3, r0, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM21_Init+0x6a>
  {
    Error_Handler();
 8000f7a:	f000 f921 	bl	80011c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f7e:	2118      	movs	r1, #24
 8000f80:	187b      	adds	r3, r7, r1
 8000f82:	2280      	movs	r2, #128	; 0x80
 8000f84:	0152      	lsls	r2, r2, #5
 8000f86:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8000f88:	187a      	adds	r2, r7, r1
 8000f8a:	4b1e      	ldr	r3, [pc, #120]	; (8001004 <MX_TIM21_Init+0xf0>)
 8000f8c:	0011      	movs	r1, r2
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f003 ffc6 	bl	8004f20 <HAL_TIM_ConfigClockSource>
 8000f94:	1e03      	subs	r3, r0, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM21_Init+0x88>
  {
    Error_Handler();
 8000f98:	f000 f912 	bl	80011c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim21) != HAL_OK)
 8000f9c:	4b19      	ldr	r3, [pc, #100]	; (8001004 <MX_TIM21_Init+0xf0>)
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f003 fc72 	bl	8004888 <HAL_TIM_PWM_Init>
 8000fa4:	1e03      	subs	r3, r0, #0
 8000fa6:	d001      	beq.n	8000fac <MX_TIM21_Init+0x98>
  {
    Error_Handler();
 8000fa8:	f000 f90a 	bl	80011c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fac:	2110      	movs	r1, #16
 8000fae:	187b      	adds	r3, r7, r1
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb4:	187b      	adds	r3, r7, r1
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8000fba:	187a      	adds	r2, r7, r1
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <MX_TIM21_Init+0xf0>)
 8000fbe:	0011      	movs	r1, r2
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f004 fcc3 	bl	800594c <HAL_TIMEx_MasterConfigSynchronization>
 8000fc6:	1e03      	subs	r3, r0, #0
 8000fc8:	d001      	beq.n	8000fce <MX_TIM21_Init+0xba>
  {
    Error_Handler();
 8000fca:	f000 f8f9 	bl	80011c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fce:	003b      	movs	r3, r7
 8000fd0:	2260      	movs	r2, #96	; 0x60
 8000fd2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000fd4:	003b      	movs	r3, r7
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fda:	003b      	movs	r3, r7
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fe0:	003b      	movs	r3, r7
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fe6:	0039      	movs	r1, r7
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <MX_TIM21_Init+0xf0>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	0018      	movs	r0, r3
 8000fee:	f003 fe43 	bl	8004c78 <HAL_TIM_PWM_ConfigChannel>
 8000ff2:	1e03      	subs	r3, r0, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM21_Init+0xe6>
  {
    Error_Handler();
 8000ff6:	f000 f8e3 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	b00a      	add	sp, #40	; 0x28
 8001000:	bd80      	pop	{r7, pc}
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	20000270 	.word	0x20000270
 8001008:	40010800 	.word	0x40010800
 800100c:	000003e7 	.word	0x000003e7

08001010 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001014:	4b14      	ldr	r3, [pc, #80]	; (8001068 <MX_USART1_UART_Init+0x58>)
 8001016:	4a15      	ldr	r2, [pc, #84]	; (800106c <MX_USART1_UART_Init+0x5c>)
 8001018:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800101a:	4b13      	ldr	r3, [pc, #76]	; (8001068 <MX_USART1_UART_Init+0x58>)
 800101c:	22e1      	movs	r2, #225	; 0xe1
 800101e:	0252      	lsls	r2, r2, #9
 8001020:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <MX_USART1_UART_Init+0x58>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001028:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <MX_USART1_UART_Init+0x58>)
 800102a:	2200      	movs	r2, #0
 800102c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800102e:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <MX_USART1_UART_Init+0x58>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <MX_USART1_UART_Init+0x58>)
 8001036:	220c      	movs	r2, #12
 8001038:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800103a:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <MX_USART1_UART_Init+0x58>)
 800103c:	2200      	movs	r2, #0
 800103e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001040:	4b09      	ldr	r3, [pc, #36]	; (8001068 <MX_USART1_UART_Init+0x58>)
 8001042:	2200      	movs	r2, #0
 8001044:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001046:	4b08      	ldr	r3, [pc, #32]	; (8001068 <MX_USART1_UART_Init+0x58>)
 8001048:	2200      	movs	r2, #0
 800104a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <MX_USART1_UART_Init+0x58>)
 800104e:	2200      	movs	r2, #0
 8001050:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001052:	4b05      	ldr	r3, [pc, #20]	; (8001068 <MX_USART1_UART_Init+0x58>)
 8001054:	0018      	movs	r0, r3
 8001056:	f004 fd11 	bl	8005a7c <HAL_UART_Init>
 800105a:	1e03      	subs	r3, r0, #0
 800105c:	d001      	beq.n	8001062 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800105e:	f000 f8af 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	200000ac 	.word	0x200000ac
 800106c:	40013800 	.word	0x40013800

08001070 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <MX_DMA_Init+0x38>)
 8001078:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <MX_DMA_Init+0x38>)
 800107c:	2101      	movs	r1, #1
 800107e:	430a      	orrs	r2, r1
 8001080:	631a      	str	r2, [r3, #48]	; 0x30
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <MX_DMA_Init+0x38>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	2201      	movs	r2, #1
 8001088:	4013      	ands	r3, r2
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2100      	movs	r1, #0
 8001092:	2009      	movs	r0, #9
 8001094:	f001 fa70 	bl	8002578 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001098:	2009      	movs	r0, #9
 800109a:	f001 fa8d 	bl	80025b8 <HAL_NVIC_EnableIRQ>

}
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	46bd      	mov	sp, r7
 80010a2:	b002      	add	sp, #8
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	40021000 	.word	0x40021000

080010ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010ac:	b590      	push	{r4, r7, lr}
 80010ae:	b089      	sub	sp, #36	; 0x24
 80010b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b2:	240c      	movs	r4, #12
 80010b4:	193b      	adds	r3, r7, r4
 80010b6:	0018      	movs	r0, r3
 80010b8:	2314      	movs	r3, #20
 80010ba:	001a      	movs	r2, r3
 80010bc:	2100      	movs	r1, #0
 80010be:	f005 fb87 	bl	80067d0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c2:	4b3b      	ldr	r3, [pc, #236]	; (80011b0 <MX_GPIO_Init+0x104>)
 80010c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010c6:	4b3a      	ldr	r3, [pc, #232]	; (80011b0 <MX_GPIO_Init+0x104>)
 80010c8:	2104      	movs	r1, #4
 80010ca:	430a      	orrs	r2, r1
 80010cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80010ce:	4b38      	ldr	r3, [pc, #224]	; (80011b0 <MX_GPIO_Init+0x104>)
 80010d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d2:	2204      	movs	r2, #4
 80010d4:	4013      	ands	r3, r2
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	4b35      	ldr	r3, [pc, #212]	; (80011b0 <MX_GPIO_Init+0x104>)
 80010dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010de:	4b34      	ldr	r3, [pc, #208]	; (80011b0 <MX_GPIO_Init+0x104>)
 80010e0:	2101      	movs	r1, #1
 80010e2:	430a      	orrs	r2, r1
 80010e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80010e6:	4b32      	ldr	r3, [pc, #200]	; (80011b0 <MX_GPIO_Init+0x104>)
 80010e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ea:	2201      	movs	r2, #1
 80010ec:	4013      	ands	r3, r2
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f2:	4b2f      	ldr	r3, [pc, #188]	; (80011b0 <MX_GPIO_Init+0x104>)
 80010f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010f6:	4b2e      	ldr	r3, [pc, #184]	; (80011b0 <MX_GPIO_Init+0x104>)
 80010f8:	2102      	movs	r1, #2
 80010fa:	430a      	orrs	r2, r1
 80010fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80010fe:	4b2c      	ldr	r3, [pc, #176]	; (80011b0 <MX_GPIO_Init+0x104>)
 8001100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001102:	2202      	movs	r2, #2
 8001104:	4013      	ands	r3, r2
 8001106:	603b      	str	r3, [r7, #0]
 8001108:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_0_Pin|LED_1_Pin|LED_2_Pin, GPIO_PIN_RESET);
 800110a:	23c8      	movs	r3, #200	; 0xc8
 800110c:	0159      	lsls	r1, r3, #5
 800110e:	23a0      	movs	r3, #160	; 0xa0
 8001110:	05db      	lsls	r3, r3, #23
 8001112:	2200      	movs	r2, #0
 8001114:	0018      	movs	r0, r3
 8001116:	f001 ffab 	bl	8003070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L_2_Pin|L_1_Pin|P_2_Pin|P_1_Pin, GPIO_PIN_RESET);
 800111a:	4b26      	ldr	r3, [pc, #152]	; (80011b4 <MX_GPIO_Init+0x108>)
 800111c:	2200      	movs	r2, #0
 800111e:	21f0      	movs	r1, #240	; 0xf0
 8001120:	0018      	movs	r0, r3
 8001122:	f001 ffa5 	bl	8003070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Przycisk_Pin */
  GPIO_InitStruct.Pin = Przycisk_Pin;
 8001126:	193b      	adds	r3, r7, r4
 8001128:	2280      	movs	r2, #128	; 0x80
 800112a:	01d2      	lsls	r2, r2, #7
 800112c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800112e:	193b      	adds	r3, r7, r4
 8001130:	4a21      	ldr	r2, [pc, #132]	; (80011b8 <MX_GPIO_Init+0x10c>)
 8001132:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	193b      	adds	r3, r7, r4
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Przycisk_GPIO_Port, &GPIO_InitStruct);
 800113a:	193b      	adds	r3, r7, r4
 800113c:	4a1f      	ldr	r2, [pc, #124]	; (80011bc <MX_GPIO_Init+0x110>)
 800113e:	0019      	movs	r1, r3
 8001140:	0010      	movs	r0, r2
 8001142:	f001 fd27 	bl	8002b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_0_Pin LED_1_Pin LED_2_Pin */
  GPIO_InitStruct.Pin = LED_0_Pin|LED_1_Pin|LED_2_Pin;
 8001146:	0021      	movs	r1, r4
 8001148:	187b      	adds	r3, r7, r1
 800114a:	22c8      	movs	r2, #200	; 0xc8
 800114c:	0152      	lsls	r2, r2, #5
 800114e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001150:	187b      	adds	r3, r7, r1
 8001152:	2201      	movs	r2, #1
 8001154:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	187b      	adds	r3, r7, r1
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	187b      	adds	r3, r7, r1
 800115e:	2200      	movs	r2, #0
 8001160:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001162:	000c      	movs	r4, r1
 8001164:	187a      	adds	r2, r7, r1
 8001166:	23a0      	movs	r3, #160	; 0xa0
 8001168:	05db      	lsls	r3, r3, #23
 800116a:	0011      	movs	r1, r2
 800116c:	0018      	movs	r0, r3
 800116e:	f001 fd11 	bl	8002b94 <HAL_GPIO_Init>

  /*Configure GPIO pins : L_2_Pin L_1_Pin P_2_Pin P_1_Pin */
  GPIO_InitStruct.Pin = L_2_Pin|L_1_Pin|P_2_Pin|P_1_Pin;
 8001172:	0021      	movs	r1, r4
 8001174:	187b      	adds	r3, r7, r1
 8001176:	22f0      	movs	r2, #240	; 0xf0
 8001178:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117a:	187b      	adds	r3, r7, r1
 800117c:	2201      	movs	r2, #1
 800117e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	187b      	adds	r3, r7, r1
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001186:	187b      	adds	r3, r7, r1
 8001188:	2200      	movs	r2, #0
 800118a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118c:	187b      	adds	r3, r7, r1
 800118e:	4a09      	ldr	r2, [pc, #36]	; (80011b4 <MX_GPIO_Init+0x108>)
 8001190:	0019      	movs	r1, r3
 8001192:	0010      	movs	r0, r2
 8001194:	f001 fcfe 	bl	8002b94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001198:	2200      	movs	r2, #0
 800119a:	2100      	movs	r1, #0
 800119c:	2007      	movs	r0, #7
 800119e:	f001 f9eb 	bl	8002578 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80011a2:	2007      	movs	r0, #7
 80011a4:	f001 fa08 	bl	80025b8 <HAL_NVIC_EnableIRQ>

}
 80011a8:	46c0      	nop			; (mov r8, r8)
 80011aa:	46bd      	mov	sp, r7
 80011ac:	b009      	add	sp, #36	; 0x24
 80011ae:	bd90      	pop	{r4, r7, pc}
 80011b0:	40021000 	.word	0x40021000
 80011b4:	50000400 	.word	0x50000400
 80011b8:	10110000 	.word	0x10110000
 80011bc:	50000800 	.word	0x50000800

080011c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80011c4:	46c0      	nop			; (mov r8, r8)
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
 80011d2:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80011d4:	46c0      	nop			; (mov r8, r8)
 80011d6:	46bd      	mov	sp, r7
 80011d8:	b002      	add	sp, #8
 80011da:	bd80      	pop	{r7, pc}

080011dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e0:	4b07      	ldr	r3, [pc, #28]	; (8001200 <HAL_MspInit+0x24>)
 80011e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <HAL_MspInit+0x24>)
 80011e6:	2101      	movs	r1, #1
 80011e8:	430a      	orrs	r2, r1
 80011ea:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ec:	4b04      	ldr	r3, [pc, #16]	; (8001200 <HAL_MspInit+0x24>)
 80011ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011f0:	4b03      	ldr	r3, [pc, #12]	; (8001200 <HAL_MspInit+0x24>)
 80011f2:	2180      	movs	r1, #128	; 0x80
 80011f4:	0549      	lsls	r1, r1, #21
 80011f6:	430a      	orrs	r2, r1
 80011f8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40021000 	.word	0x40021000

08001204 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001204:	b590      	push	{r4, r7, lr}
 8001206:	b08b      	sub	sp, #44	; 0x2c
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	2314      	movs	r3, #20
 800120e:	18fb      	adds	r3, r7, r3
 8001210:	0018      	movs	r0, r3
 8001212:	2314      	movs	r3, #20
 8001214:	001a      	movs	r2, r3
 8001216:	2100      	movs	r1, #0
 8001218:	f005 fada 	bl	80067d0 <memset>
  if(hadc->Instance==ADC1)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a38      	ldr	r2, [pc, #224]	; (8001304 <HAL_ADC_MspInit+0x100>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d169      	bne.n	80012fa <HAL_ADC_MspInit+0xf6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001226:	4b38      	ldr	r3, [pc, #224]	; (8001308 <HAL_ADC_MspInit+0x104>)
 8001228:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800122a:	4b37      	ldr	r3, [pc, #220]	; (8001308 <HAL_ADC_MspInit+0x104>)
 800122c:	2180      	movs	r1, #128	; 0x80
 800122e:	0089      	lsls	r1, r1, #2
 8001230:	430a      	orrs	r2, r1
 8001232:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001234:	4b34      	ldr	r3, [pc, #208]	; (8001308 <HAL_ADC_MspInit+0x104>)
 8001236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001238:	4b33      	ldr	r3, [pc, #204]	; (8001308 <HAL_ADC_MspInit+0x104>)
 800123a:	2101      	movs	r1, #1
 800123c:	430a      	orrs	r2, r1
 800123e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001240:	4b31      	ldr	r3, [pc, #196]	; (8001308 <HAL_ADC_MspInit+0x104>)
 8001242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001244:	2201      	movs	r2, #1
 8001246:	4013      	ands	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
 800124a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800124c:	4b2e      	ldr	r3, [pc, #184]	; (8001308 <HAL_ADC_MspInit+0x104>)
 800124e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001250:	4b2d      	ldr	r3, [pc, #180]	; (8001308 <HAL_ADC_MspInit+0x104>)
 8001252:	2102      	movs	r1, #2
 8001254:	430a      	orrs	r2, r1
 8001256:	62da      	str	r2, [r3, #44]	; 0x2c
 8001258:	4b2b      	ldr	r3, [pc, #172]	; (8001308 <HAL_ADC_MspInit+0x104>)
 800125a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800125c:	2202      	movs	r2, #2
 800125e:	4013      	ands	r3, r2
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 8001264:	2414      	movs	r4, #20
 8001266:	193b      	adds	r3, r7, r4
 8001268:	22fe      	movs	r2, #254	; 0xfe
 800126a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800126c:	193b      	adds	r3, r7, r4
 800126e:	2203      	movs	r2, #3
 8001270:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	193b      	adds	r3, r7, r4
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001278:	193a      	adds	r2, r7, r4
 800127a:	23a0      	movs	r3, #160	; 0xa0
 800127c:	05db      	lsls	r3, r3, #23
 800127e:	0011      	movs	r1, r2
 8001280:	0018      	movs	r0, r3
 8001282:	f001 fc87 	bl	8002b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001286:	193b      	adds	r3, r7, r4
 8001288:	2203      	movs	r2, #3
 800128a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800128c:	193b      	adds	r3, r7, r4
 800128e:	2203      	movs	r2, #3
 8001290:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	193b      	adds	r3, r7, r4
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001298:	193b      	adds	r3, r7, r4
 800129a:	4a1c      	ldr	r2, [pc, #112]	; (800130c <HAL_ADC_MspInit+0x108>)
 800129c:	0019      	movs	r1, r3
 800129e:	0010      	movs	r0, r2
 80012a0:	f001 fc78 	bl	8002b94 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80012a4:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <HAL_ADC_MspInit+0x10c>)
 80012a6:	4a1b      	ldr	r2, [pc, #108]	; (8001314 <HAL_ADC_MspInit+0x110>)
 80012a8:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 80012aa:	4b19      	ldr	r3, [pc, #100]	; (8001310 <HAL_ADC_MspInit+0x10c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012b0:	4b17      	ldr	r3, [pc, #92]	; (8001310 <HAL_ADC_MspInit+0x10c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80012b6:	4b16      	ldr	r3, [pc, #88]	; (8001310 <HAL_ADC_MspInit+0x10c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80012bc:	4b14      	ldr	r3, [pc, #80]	; (8001310 <HAL_ADC_MspInit+0x10c>)
 80012be:	2280      	movs	r2, #128	; 0x80
 80012c0:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012c2:	4b13      	ldr	r3, [pc, #76]	; (8001310 <HAL_ADC_MspInit+0x10c>)
 80012c4:	2280      	movs	r2, #128	; 0x80
 80012c6:	0052      	lsls	r2, r2, #1
 80012c8:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012ca:	4b11      	ldr	r3, [pc, #68]	; (8001310 <HAL_ADC_MspInit+0x10c>)
 80012cc:	2280      	movs	r2, #128	; 0x80
 80012ce:	00d2      	lsls	r2, r2, #3
 80012d0:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80012d2:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <HAL_ADC_MspInit+0x10c>)
 80012d4:	2220      	movs	r2, #32
 80012d6:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80012d8:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <HAL_ADC_MspInit+0x10c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80012de:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <HAL_ADC_MspInit+0x10c>)
 80012e0:	0018      	movs	r0, r3
 80012e2:	f001 f993 	bl	800260c <HAL_DMA_Init>
 80012e6:	1e03      	subs	r3, r0, #0
 80012e8:	d001      	beq.n	80012ee <HAL_ADC_MspInit+0xea>
    {
      Error_Handler();
 80012ea:	f7ff ff69 	bl	80011c0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a07      	ldr	r2, [pc, #28]	; (8001310 <HAL_ADC_MspInit+0x10c>)
 80012f2:	64da      	str	r2, [r3, #76]	; 0x4c
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <HAL_ADC_MspInit+0x10c>)
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012fa:	46c0      	nop			; (mov r8, r8)
 80012fc:	46bd      	mov	sp, r7
 80012fe:	b00b      	add	sp, #44	; 0x2c
 8001300:	bd90      	pop	{r4, r7, pc}
 8001302:	46c0      	nop			; (mov r8, r8)
 8001304:	40012400 	.word	0x40012400
 8001308:	40021000 	.word	0x40021000
 800130c:	50000400 	.word	0x50000400
 8001310:	200001cc 	.word	0x200001cc
 8001314:	40020008 	.word	0x40020008

08001318 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	2380      	movs	r3, #128	; 0x80
 8001326:	05db      	lsls	r3, r3, #23
 8001328:	429a      	cmp	r2, r3
 800132a:	d106      	bne.n	800133a <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800132c:	4b18      	ldr	r3, [pc, #96]	; (8001390 <HAL_TIM_Base_MspInit+0x78>)
 800132e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001330:	4b17      	ldr	r3, [pc, #92]	; (8001390 <HAL_TIM_Base_MspInit+0x78>)
 8001332:	2101      	movs	r1, #1
 8001334:	430a      	orrs	r2, r1
 8001336:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 8001338:	e026      	b.n	8001388 <HAL_TIM_Base_MspInit+0x70>
  else if(htim_base->Instance==TIM6)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a15      	ldr	r2, [pc, #84]	; (8001394 <HAL_TIM_Base_MspInit+0x7c>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d10e      	bne.n	8001362 <HAL_TIM_Base_MspInit+0x4a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_TIM_Base_MspInit+0x78>)
 8001346:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001348:	4b11      	ldr	r3, [pc, #68]	; (8001390 <HAL_TIM_Base_MspInit+0x78>)
 800134a:	2110      	movs	r1, #16
 800134c:	430a      	orrs	r2, r1
 800134e:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001350:	2200      	movs	r2, #0
 8001352:	2100      	movs	r1, #0
 8001354:	2011      	movs	r0, #17
 8001356:	f001 f90f 	bl	8002578 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800135a:	2011      	movs	r0, #17
 800135c:	f001 f92c 	bl	80025b8 <HAL_NVIC_EnableIRQ>
}
 8001360:	e012      	b.n	8001388 <HAL_TIM_Base_MspInit+0x70>
  else if(htim_base->Instance==TIM21)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a0c      	ldr	r2, [pc, #48]	; (8001398 <HAL_TIM_Base_MspInit+0x80>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d10d      	bne.n	8001388 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM21_CLK_ENABLE();
 800136c:	4b08      	ldr	r3, [pc, #32]	; (8001390 <HAL_TIM_Base_MspInit+0x78>)
 800136e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001370:	4b07      	ldr	r3, [pc, #28]	; (8001390 <HAL_TIM_Base_MspInit+0x78>)
 8001372:	2104      	movs	r1, #4
 8001374:	430a      	orrs	r2, r1
 8001376:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 8001378:	2200      	movs	r2, #0
 800137a:	2100      	movs	r1, #0
 800137c:	2014      	movs	r0, #20
 800137e:	f001 f8fb 	bl	8002578 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8001382:	2014      	movs	r0, #20
 8001384:	f001 f918 	bl	80025b8 <HAL_NVIC_EnableIRQ>
}
 8001388:	46c0      	nop			; (mov r8, r8)
 800138a:	46bd      	mov	sp, r7
 800138c:	b002      	add	sp, #8
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40021000 	.word	0x40021000
 8001394:	40001000 	.word	0x40001000
 8001398:	40010800 	.word	0x40010800

0800139c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800139c:	b590      	push	{r4, r7, lr}
 800139e:	b08b      	sub	sp, #44	; 0x2c
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	2314      	movs	r3, #20
 80013a6:	18fb      	adds	r3, r7, r3
 80013a8:	0018      	movs	r0, r3
 80013aa:	2314      	movs	r3, #20
 80013ac:	001a      	movs	r2, r3
 80013ae:	2100      	movs	r1, #0
 80013b0:	f005 fa0e 	bl	80067d0 <memset>
  if(htim->Instance==TIM2)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	2380      	movs	r3, #128	; 0x80
 80013ba:	05db      	lsls	r3, r3, #23
 80013bc:	429a      	cmp	r2, r3
 80013be:	d146      	bne.n	800144e <HAL_TIM_MspPostInit+0xb2>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c0:	4b25      	ldr	r3, [pc, #148]	; (8001458 <HAL_TIM_MspPostInit+0xbc>)
 80013c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013c4:	4b24      	ldr	r3, [pc, #144]	; (8001458 <HAL_TIM_MspPostInit+0xbc>)
 80013c6:	2101      	movs	r1, #1
 80013c8:	430a      	orrs	r2, r1
 80013ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80013cc:	4b22      	ldr	r3, [pc, #136]	; (8001458 <HAL_TIM_MspPostInit+0xbc>)
 80013ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d0:	2201      	movs	r2, #1
 80013d2:	4013      	ands	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d8:	4b1f      	ldr	r3, [pc, #124]	; (8001458 <HAL_TIM_MspPostInit+0xbc>)
 80013da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013dc:	4b1e      	ldr	r3, [pc, #120]	; (8001458 <HAL_TIM_MspPostInit+0xbc>)
 80013de:	2102      	movs	r1, #2
 80013e0:	430a      	orrs	r2, r1
 80013e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80013e4:	4b1c      	ldr	r3, [pc, #112]	; (8001458 <HAL_TIM_MspPostInit+0xbc>)
 80013e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e8:	2202      	movs	r2, #2
 80013ea:	4013      	ands	r3, r2
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = L_PWM_Pin;
 80013f0:	2114      	movs	r1, #20
 80013f2:	187b      	adds	r3, r7, r1
 80013f4:	2280      	movs	r2, #128	; 0x80
 80013f6:	0212      	lsls	r2, r2, #8
 80013f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fa:	000c      	movs	r4, r1
 80013fc:	193b      	adds	r3, r7, r4
 80013fe:	2202      	movs	r2, #2
 8001400:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	193b      	adds	r3, r7, r4
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001408:	193b      	adds	r3, r7, r4
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 800140e:	193b      	adds	r3, r7, r4
 8001410:	2205      	movs	r2, #5
 8001412:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(L_PWM_GPIO_Port, &GPIO_InitStruct);
 8001414:	193a      	adds	r2, r7, r4
 8001416:	23a0      	movs	r3, #160	; 0xa0
 8001418:	05db      	lsls	r3, r3, #23
 800141a:	0011      	movs	r1, r2
 800141c:	0018      	movs	r0, r3
 800141e:	f001 fbb9 	bl	8002b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = P_PWM_Pin;
 8001422:	0021      	movs	r1, r4
 8001424:	187b      	adds	r3, r7, r1
 8001426:	2208      	movs	r2, #8
 8001428:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	187b      	adds	r3, r7, r1
 800142c:	2202      	movs	r2, #2
 800142e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	187b      	adds	r3, r7, r1
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001436:	187b      	adds	r3, r7, r1
 8001438:	2200      	movs	r2, #0
 800143a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800143c:	187b      	adds	r3, r7, r1
 800143e:	2202      	movs	r2, #2
 8001440:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(P_PWM_GPIO_Port, &GPIO_InitStruct);
 8001442:	187b      	adds	r3, r7, r1
 8001444:	4a05      	ldr	r2, [pc, #20]	; (800145c <HAL_TIM_MspPostInit+0xc0>)
 8001446:	0019      	movs	r1, r3
 8001448:	0010      	movs	r0, r2
 800144a:	f001 fba3 	bl	8002b94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	46bd      	mov	sp, r7
 8001452:	b00b      	add	sp, #44	; 0x2c
 8001454:	bd90      	pop	{r4, r7, pc}
 8001456:	46c0      	nop			; (mov r8, r8)
 8001458:	40021000 	.word	0x40021000
 800145c:	50000400 	.word	0x50000400

08001460 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b088      	sub	sp, #32
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	230c      	movs	r3, #12
 800146a:	18fb      	adds	r3, r7, r3
 800146c:	0018      	movs	r0, r3
 800146e:	2314      	movs	r3, #20
 8001470:	001a      	movs	r2, r3
 8001472:	2100      	movs	r1, #0
 8001474:	f005 f9ac 	bl	80067d0 <memset>
  if(huart->Instance==USART1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a18      	ldr	r2, [pc, #96]	; (80014e0 <HAL_UART_MspInit+0x80>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d12a      	bne.n	80014d8 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001482:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <HAL_UART_MspInit+0x84>)
 8001484:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001486:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <HAL_UART_MspInit+0x84>)
 8001488:	2180      	movs	r1, #128	; 0x80
 800148a:	01c9      	lsls	r1, r1, #7
 800148c:	430a      	orrs	r2, r1
 800148e:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001490:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <HAL_UART_MspInit+0x84>)
 8001492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001494:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <HAL_UART_MspInit+0x84>)
 8001496:	2101      	movs	r1, #1
 8001498:	430a      	orrs	r2, r1
 800149a:	62da      	str	r2, [r3, #44]	; 0x2c
 800149c:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <HAL_UART_MspInit+0x84>)
 800149e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a0:	2201      	movs	r2, #1
 80014a2:	4013      	ands	r3, r2
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014a8:	210c      	movs	r1, #12
 80014aa:	187b      	adds	r3, r7, r1
 80014ac:	22c0      	movs	r2, #192	; 0xc0
 80014ae:	00d2      	lsls	r2, r2, #3
 80014b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b2:	187b      	adds	r3, r7, r1
 80014b4:	2202      	movs	r2, #2
 80014b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	187b      	adds	r3, r7, r1
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014be:	187b      	adds	r3, r7, r1
 80014c0:	2203      	movs	r2, #3
 80014c2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80014c4:	187b      	adds	r3, r7, r1
 80014c6:	2204      	movs	r2, #4
 80014c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ca:	187a      	adds	r2, r7, r1
 80014cc:	23a0      	movs	r3, #160	; 0xa0
 80014ce:	05db      	lsls	r3, r3, #23
 80014d0:	0011      	movs	r1, r2
 80014d2:	0018      	movs	r0, r3
 80014d4:	f001 fb5e 	bl	8002b94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014d8:	46c0      	nop			; (mov r8, r8)
 80014da:	46bd      	mov	sp, r7
 80014dc:	b008      	add	sp, #32
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40013800 	.word	0x40013800
 80014e4:	40021000 	.word	0x40021000

080014e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014ec:	46c0      	nop			; (mov r8, r8)
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f6:	e7fe      	b.n	80014f6 <HardFault_Handler+0x4>

080014f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80014fc:	46c0      	nop			; (mov r8, r8)
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001510:	f000 f8e4 	bl	80016dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001514:	46c0      	nop			; (mov r8, r8)
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800151e:	2380      	movs	r3, #128	; 0x80
 8001520:	01db      	lsls	r3, r3, #7
 8001522:	0018      	movs	r0, r3
 8001524:	f001 fe78 	bl	8003218 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001528:	46c0      	nop			; (mov r8, r8)
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001534:	4b03      	ldr	r3, [pc, #12]	; (8001544 <DMA1_Channel1_IRQHandler+0x14>)
 8001536:	0018      	movs	r0, r3
 8001538:	f001 fa50 	bl	80029dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800153c:	46c0      	nop			; (mov r8, r8)
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	200001cc 	.word	0x200001cc

08001548 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800154c:	4b03      	ldr	r3, [pc, #12]	; (800155c <TIM6_DAC_IRQHandler+0x14>)
 800154e:	0018      	movs	r0, r3
 8001550:	f003 faaa 	bl	8004aa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001554:	46c0      	nop			; (mov r8, r8)
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	20000150 	.word	0x20000150

08001560 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8001564:	4b03      	ldr	r3, [pc, #12]	; (8001574 <TIM21_IRQHandler+0x14>)
 8001566:	0018      	movs	r0, r3
 8001568:	f003 fa9e 	bl	8004aa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 800156c:	46c0      	nop			; (mov r8, r8)
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	20000270 	.word	0x20000270

08001578 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 800157c:	4b17      	ldr	r3, [pc, #92]	; (80015dc <SystemInit+0x64>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b16      	ldr	r3, [pc, #88]	; (80015dc <SystemInit+0x64>)
 8001582:	2180      	movs	r1, #128	; 0x80
 8001584:	0049      	lsls	r1, r1, #1
 8001586:	430a      	orrs	r2, r1
 8001588:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800158a:	4b14      	ldr	r3, [pc, #80]	; (80015dc <SystemInit+0x64>)
 800158c:	68da      	ldr	r2, [r3, #12]
 800158e:	4b13      	ldr	r3, [pc, #76]	; (80015dc <SystemInit+0x64>)
 8001590:	4913      	ldr	r1, [pc, #76]	; (80015e0 <SystemInit+0x68>)
 8001592:	400a      	ands	r2, r1
 8001594:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8001596:	4b11      	ldr	r3, [pc, #68]	; (80015dc <SystemInit+0x64>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <SystemInit+0x64>)
 800159c:	4911      	ldr	r1, [pc, #68]	; (80015e4 <SystemInit+0x6c>)
 800159e:	400a      	ands	r2, r1
 80015a0:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <SystemInit+0x64>)
 80015a4:	689a      	ldr	r2, [r3, #8]
 80015a6:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <SystemInit+0x64>)
 80015a8:	2101      	movs	r1, #1
 80015aa:	438a      	bics	r2, r1
 80015ac:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80015ae:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <SystemInit+0x64>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <SystemInit+0x64>)
 80015b4:	490c      	ldr	r1, [pc, #48]	; (80015e8 <SystemInit+0x70>)
 80015b6:	400a      	ands	r2, r1
 80015b8:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80015ba:	4b08      	ldr	r3, [pc, #32]	; (80015dc <SystemInit+0x64>)
 80015bc:	68da      	ldr	r2, [r3, #12]
 80015be:	4b07      	ldr	r3, [pc, #28]	; (80015dc <SystemInit+0x64>)
 80015c0:	490a      	ldr	r1, [pc, #40]	; (80015ec <SystemInit+0x74>)
 80015c2:	400a      	ands	r2, r1
 80015c4:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80015c6:	4b05      	ldr	r3, [pc, #20]	; (80015dc <SystemInit+0x64>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015cc:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <SystemInit+0x78>)
 80015ce:	2280      	movs	r2, #128	; 0x80
 80015d0:	0512      	lsls	r2, r2, #20
 80015d2:	609a      	str	r2, [r3, #8]
#endif
}
 80015d4:	46c0      	nop			; (mov r8, r8)
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	40021000 	.word	0x40021000
 80015e0:	88ff400c 	.word	0x88ff400c
 80015e4:	fef6fff6 	.word	0xfef6fff6
 80015e8:	fffbffff 	.word	0xfffbffff
 80015ec:	ff02ffff 	.word	0xff02ffff
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80015f4:	480d      	ldr	r0, [pc, #52]	; (800162c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80015f6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80015f8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80015fa:	e003      	b.n	8001604 <LoopCopyDataInit>

080015fc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80015fc:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80015fe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001600:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001602:	3104      	adds	r1, #4

08001604 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8001604:	480b      	ldr	r0, [pc, #44]	; (8001634 <LoopForever+0xa>)
  ldr  r3, =_edata
 8001606:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <LoopForever+0xe>)
  adds  r2, r0, r1
 8001608:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800160a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800160c:	d3f6      	bcc.n	80015fc <CopyDataInit>
  ldr  r2, =_sbss
 800160e:	4a0b      	ldr	r2, [pc, #44]	; (800163c <LoopForever+0x12>)
  b  LoopFillZerobss
 8001610:	e002      	b.n	8001618 <LoopFillZerobss>

08001612 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001612:	2300      	movs	r3, #0
  str  r3, [r2]
 8001614:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001616:	3204      	adds	r2, #4

08001618 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8001618:	4b09      	ldr	r3, [pc, #36]	; (8001640 <LoopForever+0x16>)
  cmp  r2, r3
 800161a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800161c:	d3f9      	bcc.n	8001612 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800161e:	f7ff ffab 	bl	8001578 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001622:	f005 f8b1 	bl	8006788 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001626:	f7ff fa1b 	bl	8000a60 <main>

0800162a <LoopForever>:

LoopForever:
    b LoopForever
 800162a:	e7fe      	b.n	800162a <LoopForever>
   ldr   r0, =_estack
 800162c:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8001630:	08006a80 	.word	0x08006a80
  ldr  r0, =_sdata
 8001634:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001638:	20000034 	.word	0x20000034
  ldr  r2, =_sbss
 800163c:	20000034 	.word	0x20000034
  ldr  r3, = _ebss
 8001640:	200002b0 	.word	0x200002b0

08001644 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001644:	e7fe      	b.n	8001644 <ADC1_COMP_IRQHandler>
	...

08001648 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800164e:	1dfb      	adds	r3, r7, #7
 8001650:	2200      	movs	r2, #0
 8001652:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001654:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <HAL_Init+0x3c>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <HAL_Init+0x3c>)
 800165a:	2140      	movs	r1, #64	; 0x40
 800165c:	430a      	orrs	r2, r1
 800165e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001660:	2000      	movs	r0, #0
 8001662:	f000 f811 	bl	8001688 <HAL_InitTick>
 8001666:	1e03      	subs	r3, r0, #0
 8001668:	d003      	beq.n	8001672 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800166a:	1dfb      	adds	r3, r7, #7
 800166c:	2201      	movs	r2, #1
 800166e:	701a      	strb	r2, [r3, #0]
 8001670:	e001      	b.n	8001676 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001672:	f7ff fdb3 	bl	80011dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001676:	1dfb      	adds	r3, r7, #7
 8001678:	781b      	ldrb	r3, [r3, #0]
}
 800167a:	0018      	movs	r0, r3
 800167c:	46bd      	mov	sp, r7
 800167e:	b002      	add	sp, #8
 8001680:	bd80      	pop	{r7, pc}
 8001682:	46c0      	nop			; (mov r8, r8)
 8001684:	40022000 	.word	0x40022000

08001688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001690:	230f      	movs	r3, #15
 8001692:	18fb      	adds	r3, r7, r3
 8001694:	2200      	movs	r2, #0
 8001696:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8001698:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <HAL_InitTick+0x50>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	23fa      	movs	r3, #250	; 0xfa
 800169e:	0099      	lsls	r1, r3, #2
 80016a0:	0010      	movs	r0, r2
 80016a2:	f7fe fd31 	bl	8000108 <__udivsi3>
 80016a6:	0003      	movs	r3, r0
 80016a8:	0018      	movs	r0, r3
 80016aa:	f000 ffa1 	bl	80025f0 <HAL_SYSTICK_Config>
 80016ae:	1e03      	subs	r3, r0, #0
 80016b0:	d004      	beq.n	80016bc <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 80016b2:	230f      	movs	r3, #15
 80016b4:	18fb      	adds	r3, r7, r3
 80016b6:	2201      	movs	r2, #1
 80016b8:	701a      	strb	r2, [r3, #0]
 80016ba:	e006      	b.n	80016ca <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80016bc:	6879      	ldr	r1, [r7, #4]
 80016be:	2301      	movs	r3, #1
 80016c0:	425b      	negs	r3, r3
 80016c2:	2200      	movs	r2, #0
 80016c4:	0018      	movs	r0, r3
 80016c6:	f000 ff57 	bl	8002578 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 80016ca:	230f      	movs	r3, #15
 80016cc:	18fb      	adds	r3, r7, r3
 80016ce:	781b      	ldrb	r3, [r3, #0]
}
 80016d0:	0018      	movs	r0, r3
 80016d2:	46bd      	mov	sp, r7
 80016d4:	b004      	add	sp, #16
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000030 	.word	0x20000030

080016dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  uwTick++;
 80016e0:	4b03      	ldr	r3, [pc, #12]	; (80016f0 <HAL_IncTick+0x14>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	1c5a      	adds	r2, r3, #1
 80016e6:	4b02      	ldr	r3, [pc, #8]	; (80016f0 <HAL_IncTick+0x14>)
 80016e8:	601a      	str	r2, [r3, #0]
}
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	200002ac 	.word	0x200002ac

080016f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  return uwTick;
 80016f8:	4b02      	ldr	r3, [pc, #8]	; (8001704 <HAL_GetTick+0x10>)
 80016fa:	681b      	ldr	r3, [r3, #0]
}
 80016fc:	0018      	movs	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	200002ac 	.word	0x200002ac

08001708 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001710:	f7ff fff0 	bl	80016f4 <HAL_GetTick>
 8001714:	0003      	movs	r3, r0
 8001716:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	3301      	adds	r3, #1
 8001720:	d002      	beq.n	8001728 <HAL_Delay+0x20>
  {
    wait++;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	3301      	adds	r3, #1
 8001726:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001728:	46c0      	nop			; (mov r8, r8)
 800172a:	f7ff ffe3 	bl	80016f4 <HAL_GetTick>
 800172e:	0002      	movs	r2, r0
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	68fa      	ldr	r2, [r7, #12]
 8001736:	429a      	cmp	r2, r3
 8001738:	d8f7      	bhi.n	800172a <HAL_Delay+0x22>
  {
  }
}
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	46bd      	mov	sp, r7
 800173e:	b004      	add	sp, #16
 8001740:	bd80      	pop	{r7, pc}
	...

08001744 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d102      	bne.n	8001758 <HAL_ADC_Init+0x14>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	f000 fb8a 	bl	8001e6c <HAL_ADC_Init+0x728>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4abd      	ldr	r2, [pc, #756]	; (8001a54 <HAL_ADC_Init+0x310>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d006      	beq.n	8001770 <HAL_ADC_Init+0x2c>
 8001762:	23ce      	movs	r3, #206	; 0xce
 8001764:	005a      	lsls	r2, r3, #1
 8001766:	4bbc      	ldr	r3, [pc, #752]	; (8001a58 <HAL_ADC_Init+0x314>)
 8001768:	0011      	movs	r1, r2
 800176a:	0018      	movs	r0, r3
 800176c:	f7ff fd2d 	bl	80011ca <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d05f      	beq.n	8001838 <HAL_ADC_Init+0xf4>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685a      	ldr	r2, [r3, #4]
 800177c:	23c0      	movs	r3, #192	; 0xc0
 800177e:	061b      	lsls	r3, r3, #24
 8001780:	429a      	cmp	r2, r3
 8001782:	d059      	beq.n	8001838 <HAL_ADC_Init+0xf4>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	2380      	movs	r3, #128	; 0x80
 800178a:	05db      	lsls	r3, r3, #23
 800178c:	429a      	cmp	r2, r3
 800178e:	d053      	beq.n	8001838 <HAL_ADC_Init+0xf4>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	2380      	movs	r3, #128	; 0x80
 8001796:	061b      	lsls	r3, r3, #24
 8001798:	429a      	cmp	r2, r3
 800179a:	d04d      	beq.n	8001838 <HAL_ADC_Init+0xf4>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d049      	beq.n	8001838 <HAL_ADC_Init+0xf4>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685a      	ldr	r2, [r3, #4]
 80017a8:	2380      	movs	r3, #128	; 0x80
 80017aa:	02db      	lsls	r3, r3, #11
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d043      	beq.n	8001838 <HAL_ADC_Init+0xf4>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	2380      	movs	r3, #128	; 0x80
 80017b6:	031b      	lsls	r3, r3, #12
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d03d      	beq.n	8001838 <HAL_ADC_Init+0xf4>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	23c0      	movs	r3, #192	; 0xc0
 80017c2:	031b      	lsls	r3, r3, #12
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d037      	beq.n	8001838 <HAL_ADC_Init+0xf4>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685a      	ldr	r2, [r3, #4]
 80017cc:	2380      	movs	r3, #128	; 0x80
 80017ce:	035b      	lsls	r3, r3, #13
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d031      	beq.n	8001838 <HAL_ADC_Init+0xf4>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685a      	ldr	r2, [r3, #4]
 80017d8:	23a0      	movs	r3, #160	; 0xa0
 80017da:	035b      	lsls	r3, r3, #13
 80017dc:	429a      	cmp	r2, r3
 80017de:	d02b      	beq.n	8001838 <HAL_ADC_Init+0xf4>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685a      	ldr	r2, [r3, #4]
 80017e4:	23c0      	movs	r3, #192	; 0xc0
 80017e6:	035b      	lsls	r3, r3, #13
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d025      	beq.n	8001838 <HAL_ADC_Init+0xf4>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685a      	ldr	r2, [r3, #4]
 80017f0:	23e0      	movs	r3, #224	; 0xe0
 80017f2:	035b      	lsls	r3, r3, #13
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d01f      	beq.n	8001838 <HAL_ADC_Init+0xf4>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685a      	ldr	r2, [r3, #4]
 80017fc:	2380      	movs	r3, #128	; 0x80
 80017fe:	039b      	lsls	r3, r3, #14
 8001800:	429a      	cmp	r2, r3
 8001802:	d019      	beq.n	8001838 <HAL_ADC_Init+0xf4>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685a      	ldr	r2, [r3, #4]
 8001808:	2390      	movs	r3, #144	; 0x90
 800180a:	039b      	lsls	r3, r3, #14
 800180c:	429a      	cmp	r2, r3
 800180e:	d013      	beq.n	8001838 <HAL_ADC_Init+0xf4>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	23a0      	movs	r3, #160	; 0xa0
 8001816:	039b      	lsls	r3, r3, #14
 8001818:	429a      	cmp	r2, r3
 800181a:	d00d      	beq.n	8001838 <HAL_ADC_Init+0xf4>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	23b0      	movs	r3, #176	; 0xb0
 8001822:	039b      	lsls	r3, r3, #14
 8001824:	429a      	cmp	r2, r3
 8001826:	d007      	beq.n	8001838 <HAL_ADC_Init+0xf4>
 8001828:	239e      	movs	r3, #158	; 0x9e
 800182a:	33ff      	adds	r3, #255	; 0xff
 800182c:	001a      	movs	r2, r3
 800182e:	4b8a      	ldr	r3, [pc, #552]	; (8001a58 <HAL_ADC_Init+0x314>)
 8001830:	0011      	movs	r1, r2
 8001832:	0018      	movs	r0, r3
 8001834:	f7ff fcc9 	bl	80011ca <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d012      	beq.n	8001866 <HAL_ADC_Init+0x122>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	2b08      	cmp	r3, #8
 8001846:	d00e      	beq.n	8001866 <HAL_ADC_Init+0x122>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	2b10      	cmp	r3, #16
 800184e:	d00a      	beq.n	8001866 <HAL_ADC_Init+0x122>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	2b18      	cmp	r3, #24
 8001856:	d006      	beq.n	8001866 <HAL_ADC_Init+0x122>
 8001858:	23cf      	movs	r3, #207	; 0xcf
 800185a:	005a      	lsls	r2, r3, #1
 800185c:	4b7e      	ldr	r3, [pc, #504]	; (8001a58 <HAL_ADC_Init+0x314>)
 800185e:	0011      	movs	r1, r2
 8001860:	0018      	movs	r0, r3
 8001862:	f7ff fcb2 	bl	80011ca <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d00b      	beq.n	8001886 <HAL_ADC_Init+0x142>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	2b20      	cmp	r3, #32
 8001874:	d007      	beq.n	8001886 <HAL_ADC_Init+0x142>
 8001876:	23a0      	movs	r3, #160	; 0xa0
 8001878:	33ff      	adds	r3, #255	; 0xff
 800187a:	001a      	movs	r2, r3
 800187c:	4b76      	ldr	r3, [pc, #472]	; (8001a58 <HAL_ADC_Init+0x314>)
 800187e:	0011      	movs	r1, r2
 8001880:	0018      	movs	r0, r3
 8001882:	f7ff fca2 	bl	80011ca <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d00a      	beq.n	80018a4 <HAL_ADC_Init+0x160>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	2b02      	cmp	r3, #2
 8001894:	d006      	beq.n	80018a4 <HAL_ADC_Init+0x160>
 8001896:	23d0      	movs	r3, #208	; 0xd0
 8001898:	005a      	lsls	r2, r3, #1
 800189a:	4b6f      	ldr	r3, [pc, #444]	; (8001a58 <HAL_ADC_Init+0x314>)
 800189c:	0011      	movs	r1, r2
 800189e:	0018      	movs	r0, r3
 80018a0:	f7ff fc93 	bl	80011ca <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2220      	movs	r2, #32
 80018a8:	5c9b      	ldrb	r3, [r3, r2]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d00c      	beq.n	80018c8 <HAL_ADC_Init+0x184>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2220      	movs	r2, #32
 80018b2:	5c9b      	ldrb	r3, [r3, r2]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d007      	beq.n	80018c8 <HAL_ADC_Init+0x184>
 80018b8:	23a2      	movs	r3, #162	; 0xa2
 80018ba:	33ff      	adds	r3, #255	; 0xff
 80018bc:	001a      	movs	r2, r3
 80018be:	4b66      	ldr	r3, [pc, #408]	; (8001a58 <HAL_ADC_Init+0x314>)
 80018c0:	0011      	movs	r1, r2
 80018c2:	0018      	movs	r0, r3
 80018c4:	f7ff fc81 	bl	80011ca <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2221      	movs	r2, #33	; 0x21
 80018cc:	5c9b      	ldrb	r3, [r3, r2]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d00b      	beq.n	80018ea <HAL_ADC_Init+0x1a6>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2221      	movs	r2, #33	; 0x21
 80018d6:	5c9b      	ldrb	r3, [r3, r2]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d006      	beq.n	80018ea <HAL_ADC_Init+0x1a6>
 80018dc:	23d1      	movs	r3, #209	; 0xd1
 80018de:	005a      	lsls	r2, r3, #1
 80018e0:	4b5d      	ldr	r3, [pc, #372]	; (8001a58 <HAL_ADC_Init+0x314>)
 80018e2:	0011      	movs	r1, r2
 80018e4:	0018      	movs	r0, r3
 80018e6:	f7ff fc70 	bl	80011ca <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d019      	beq.n	8001926 <HAL_ADC_Init+0x1e2>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018f6:	2380      	movs	r3, #128	; 0x80
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d013      	beq.n	8001926 <HAL_ADC_Init+0x1e2>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001902:	2380      	movs	r3, #128	; 0x80
 8001904:	011b      	lsls	r3, r3, #4
 8001906:	429a      	cmp	r2, r3
 8001908:	d00d      	beq.n	8001926 <HAL_ADC_Init+0x1e2>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800190e:	23c0      	movs	r3, #192	; 0xc0
 8001910:	011b      	lsls	r3, r3, #4
 8001912:	429a      	cmp	r2, r3
 8001914:	d007      	beq.n	8001926 <HAL_ADC_Init+0x1e2>
 8001916:	23a4      	movs	r3, #164	; 0xa4
 8001918:	33ff      	adds	r3, #255	; 0xff
 800191a:	001a      	movs	r2, r3
 800191c:	4b4e      	ldr	r3, [pc, #312]	; (8001a58 <HAL_ADC_Init+0x314>)
 800191e:	0011      	movs	r1, r2
 8001920:	0018      	movs	r0, r3
 8001922:	f7ff fc52 	bl	80011ca <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192a:	2b00      	cmp	r3, #0
 800192c:	d030      	beq.n	8001990 <HAL_ADC_Init+0x24c>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001932:	2b40      	cmp	r3, #64	; 0x40
 8001934:	d02c      	beq.n	8001990 <HAL_ADC_Init+0x24c>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193a:	2b80      	cmp	r3, #128	; 0x80
 800193c:	d028      	beq.n	8001990 <HAL_ADC_Init+0x24c>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001942:	2bc0      	cmp	r3, #192	; 0xc0
 8001944:	d024      	beq.n	8001990 <HAL_ADC_Init+0x24c>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800194a:	2380      	movs	r3, #128	; 0x80
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	429a      	cmp	r2, r3
 8001950:	d01e      	beq.n	8001990 <HAL_ADC_Init+0x24c>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001956:	2380      	movs	r3, #128	; 0x80
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	429a      	cmp	r2, r3
 800195c:	d018      	beq.n	8001990 <HAL_ADC_Init+0x24c>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001962:	23c0      	movs	r3, #192	; 0xc0
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	429a      	cmp	r2, r3
 8001968:	d012      	beq.n	8001990 <HAL_ADC_Init+0x24c>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800196e:	23e0      	movs	r3, #224	; 0xe0
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	429a      	cmp	r2, r3
 8001974:	d00c      	beq.n	8001990 <HAL_ADC_Init+0x24c>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800197a:	23c2      	movs	r3, #194	; 0xc2
 800197c:	33ff      	adds	r3, #255	; 0xff
 800197e:	429a      	cmp	r2, r3
 8001980:	d006      	beq.n	8001990 <HAL_ADC_Init+0x24c>
 8001982:	23d2      	movs	r3, #210	; 0xd2
 8001984:	005a      	lsls	r2, r3, #1
 8001986:	4b34      	ldr	r3, [pc, #208]	; (8001a58 <HAL_ADC_Init+0x314>)
 8001988:	0011      	movs	r1, r2
 800198a:	0018      	movs	r0, r3
 800198c:	f7ff fc1d 	bl	80011ca <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	222c      	movs	r2, #44	; 0x2c
 8001994:	5c9b      	ldrb	r3, [r3, r2]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00c      	beq.n	80019b4 <HAL_ADC_Init+0x270>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	222c      	movs	r2, #44	; 0x2c
 800199e:	5c9b      	ldrb	r3, [r3, r2]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d007      	beq.n	80019b4 <HAL_ADC_Init+0x270>
 80019a4:	23a6      	movs	r3, #166	; 0xa6
 80019a6:	33ff      	adds	r3, #255	; 0xff
 80019a8:	001a      	movs	r2, r3
 80019aa:	4b2b      	ldr	r3, [pc, #172]	; (8001a58 <HAL_ADC_Init+0x314>)
 80019ac:	0011      	movs	r1, r2
 80019ae:	0018      	movs	r0, r3
 80019b0:	f7ff fc0b 	bl	80011ca <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	695b      	ldr	r3, [r3, #20]
 80019b8:	2b04      	cmp	r3, #4
 80019ba:	d00a      	beq.n	80019d2 <HAL_ADC_Init+0x28e>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	695b      	ldr	r3, [r3, #20]
 80019c0:	2b08      	cmp	r3, #8
 80019c2:	d006      	beq.n	80019d2 <HAL_ADC_Init+0x28e>
 80019c4:	23d3      	movs	r3, #211	; 0xd3
 80019c6:	005a      	lsls	r2, r3, #1
 80019c8:	4b23      	ldr	r3, [pc, #140]	; (8001a58 <HAL_ADC_Init+0x314>)
 80019ca:	0011      	movs	r1, r2
 80019cc:	0018      	movs	r0, r3
 80019ce:	f7ff fbfc 	bl	80011ca <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00d      	beq.n	80019f6 <HAL_ADC_Init+0x2b2>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019de:	2380      	movs	r3, #128	; 0x80
 80019e0:	015b      	lsls	r3, r3, #5
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d007      	beq.n	80019f6 <HAL_ADC_Init+0x2b2>
 80019e6:	23a8      	movs	r3, #168	; 0xa8
 80019e8:	33ff      	adds	r3, #255	; 0xff
 80019ea:	001a      	movs	r2, r3
 80019ec:	4b1a      	ldr	r3, [pc, #104]	; (8001a58 <HAL_ADC_Init+0x314>)
 80019ee:	0011      	movs	r1, r2
 80019f0:	0018      	movs	r0, r3
 80019f2:	f7ff fbea 	bl	80011ca <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d00a      	beq.n	8001a14 <HAL_ADC_Init+0x2d0>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d006      	beq.n	8001a14 <HAL_ADC_Init+0x2d0>
 8001a06:	23d4      	movs	r3, #212	; 0xd4
 8001a08:	005a      	lsls	r2, r3, #1
 8001a0a:	4b13      	ldr	r3, [pc, #76]	; (8001a58 <HAL_ADC_Init+0x314>)
 8001a0c:	0011      	movs	r1, r2
 8001a0e:	0018      	movs	r0, r3
 8001a10:	f7ff fbdb 	bl	80011ca <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerFrequencyMode));
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d00b      	beq.n	8001a34 <HAL_ADC_Init+0x2f0>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d007      	beq.n	8001a34 <HAL_ADC_Init+0x2f0>
 8001a24:	23aa      	movs	r3, #170	; 0xaa
 8001a26:	33ff      	adds	r3, #255	; 0xff
 8001a28:	001a      	movs	r2, r3
 8001a2a:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <HAL_ADC_Init+0x314>)
 8001a2c:	0011      	movs	r1, r2
 8001a2e:	0018      	movs	r0, r3
 8001a30:	f7ff fbcb 	bl	80011ca <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoPowerOff));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	69db      	ldr	r3, [r3, #28]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d00f      	beq.n	8001a5c <HAL_ADC_Init+0x318>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	69db      	ldr	r3, [r3, #28]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d00b      	beq.n	8001a5c <HAL_ADC_Init+0x318>
 8001a44:	23d5      	movs	r3, #213	; 0xd5
 8001a46:	005a      	lsls	r2, r3, #1
 8001a48:	4b03      	ldr	r3, [pc, #12]	; (8001a58 <HAL_ADC_Init+0x314>)
 8001a4a:	0011      	movs	r1, r2
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	f7ff fbbc 	bl	80011ca <assert_failed>
 8001a52:	e003      	b.n	8001a5c <HAL_ADC_Init+0x318>
 8001a54:	40012400 	.word	0x40012400
 8001a58:	080067f8 	.word	0x080067f8
  assert_param(IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTime));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d023      	beq.n	8001aac <HAL_ADC_Init+0x368>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d01f      	beq.n	8001aac <HAL_ADC_Init+0x368>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d01b      	beq.n	8001aac <HAL_ADC_Init+0x368>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a78:	2b03      	cmp	r3, #3
 8001a7a:	d017      	beq.n	8001aac <HAL_ADC_Init+0x368>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a80:	2b04      	cmp	r3, #4
 8001a82:	d013      	beq.n	8001aac <HAL_ADC_Init+0x368>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a88:	2b05      	cmp	r3, #5
 8001a8a:	d00f      	beq.n	8001aac <HAL_ADC_Init+0x368>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a90:	2b06      	cmp	r3, #6
 8001a92:	d00b      	beq.n	8001aac <HAL_ADC_Init+0x368>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a98:	2b07      	cmp	r3, #7
 8001a9a:	d007      	beq.n	8001aac <HAL_ADC_Init+0x368>
 8001a9c:	23ac      	movs	r3, #172	; 0xac
 8001a9e:	33ff      	adds	r3, #255	; 0xff
 8001aa0:	001a      	movs	r2, r3
 8001aa2:	4bd3      	ldr	r3, [pc, #844]	; (8001df0 <HAL_ADC_Init+0x6ac>)
 8001aa4:	0011      	movs	r1, r2
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	f7ff fb8f 	bl	80011ca <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d00a      	beq.n	8001aca <HAL_ADC_Init+0x386>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d006      	beq.n	8001aca <HAL_ADC_Init+0x386>
 8001abc:	23d6      	movs	r3, #214	; 0xd6
 8001abe:	005a      	lsls	r2, r3, #1
 8001ac0:	4bcb      	ldr	r3, [pc, #812]	; (8001df0 <HAL_ADC_Init+0x6ac>)
 8001ac2:	0011      	movs	r1, r2
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	f7ff fb80 	bl	80011ca <assert_failed>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d10a      	bne.n	8001ae8 <HAL_ADC_Init+0x3a4>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2250      	movs	r2, #80	; 0x50
 8001adc:	2100      	movs	r1, #0
 8001ade:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	f7ff fb8e 	bl	8001204 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aec:	2210      	movs	r2, #16
 8001aee:	4013      	ands	r3, r2
 8001af0:	2b10      	cmp	r3, #16
 8001af2:	d005      	beq.n	8001b00 <HAL_ADC_Init+0x3bc>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	2204      	movs	r2, #4
 8001afc:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001afe:	d00b      	beq.n	8001b18 <HAL_ADC_Init+0x3d4>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b04:	2210      	movs	r2, #16
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2250      	movs	r2, #80	; 0x50
 8001b10:	2100      	movs	r1, #0
 8001b12:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e1a9      	b.n	8001e6c <HAL_ADC_Init+0x728>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b1c:	4ab5      	ldr	r2, [pc, #724]	; (8001df4 <HAL_ADC_Init+0x6b0>)
 8001b1e:	4013      	ands	r3, r2
 8001b20:	2202      	movs	r2, #2
 8001b22:	431a      	orrs	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	2203      	movs	r2, #3
 8001b30:	4013      	ands	r3, r2
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d108      	bne.n	8001b48 <HAL_ADC_Init+0x404>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	4013      	ands	r3, r2
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d101      	bne.n	8001b48 <HAL_ADC_Init+0x404>
 8001b44:	2301      	movs	r3, #1
 8001b46:	e000      	b.n	8001b4a <HAL_ADC_Init+0x406>
 8001b48:	2300      	movs	r3, #0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d149      	bne.n	8001be2 <HAL_ADC_Init+0x49e>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	23c0      	movs	r3, #192	; 0xc0
 8001b54:	061b      	lsls	r3, r3, #24
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d00b      	beq.n	8001b72 <HAL_ADC_Init+0x42e>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685a      	ldr	r2, [r3, #4]
 8001b5e:	2380      	movs	r3, #128	; 0x80
 8001b60:	05db      	lsls	r3, r3, #23
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d005      	beq.n	8001b72 <HAL_ADC_Init+0x42e>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685a      	ldr	r2, [r3, #4]
 8001b6a:	2380      	movs	r3, #128	; 0x80
 8001b6c:	061b      	lsls	r3, r3, #24
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d111      	bne.n	8001b96 <HAL_ADC_Init+0x452>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	691a      	ldr	r2, [r3, #16]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	0092      	lsls	r2, r2, #2
 8001b7e:	0892      	lsrs	r2, r2, #2
 8001b80:	611a      	str	r2, [r3, #16]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6919      	ldr	r1, [r3, #16]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	430a      	orrs	r2, r1
 8001b92:	611a      	str	r2, [r3, #16]
 8001b94:	e014      	b.n	8001bc0 <HAL_ADC_Init+0x47c>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	691a      	ldr	r2, [r3, #16]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	0092      	lsls	r2, r2, #2
 8001ba2:	0892      	lsrs	r2, r2, #2
 8001ba4:	611a      	str	r2, [r3, #16]
 8001ba6:	4b94      	ldr	r3, [pc, #592]	; (8001df8 <HAL_ADC_Init+0x6b4>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	4b93      	ldr	r3, [pc, #588]	; (8001df8 <HAL_ADC_Init+0x6b4>)
 8001bac:	4993      	ldr	r1, [pc, #588]	; (8001dfc <HAL_ADC_Init+0x6b8>)
 8001bae:	400a      	ands	r2, r1
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	4b91      	ldr	r3, [pc, #580]	; (8001df8 <HAL_ADC_Init+0x6b4>)
 8001bb4:	6819      	ldr	r1, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	4b8f      	ldr	r3, [pc, #572]	; (8001df8 <HAL_ADC_Init+0x6b4>)
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68da      	ldr	r2, [r3, #12]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2118      	movs	r1, #24
 8001bcc:	438a      	bics	r2, r1
 8001bce:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68d9      	ldr	r1, [r3, #12]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	689a      	ldr	r2, [r3, #8]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	430a      	orrs	r2, r1
 8001be0:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001be2:	4b85      	ldr	r3, [pc, #532]	; (8001df8 <HAL_ADC_Init+0x6b4>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	4b84      	ldr	r3, [pc, #528]	; (8001df8 <HAL_ADC_Init+0x6b4>)
 8001be8:	4985      	ldr	r1, [pc, #532]	; (8001e00 <HAL_ADC_Init+0x6bc>)
 8001bea:	400a      	ands	r2, r1
 8001bec:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8001bee:	4b82      	ldr	r3, [pc, #520]	; (8001df8 <HAL_ADC_Init+0x6b4>)
 8001bf0:	6819      	ldr	r1, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bf6:	065a      	lsls	r2, r3, #25
 8001bf8:	4b7f      	ldr	r3, [pc, #508]	; (8001df8 <HAL_ADC_Init+0x6b4>)
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	2380      	movs	r3, #128	; 0x80
 8001c06:	055b      	lsls	r3, r3, #21
 8001c08:	4013      	ands	r3, r2
 8001c0a:	d108      	bne.n	8001c1e <HAL_ADC_Init+0x4da>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2180      	movs	r1, #128	; 0x80
 8001c18:	0549      	lsls	r1, r1, #21
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68da      	ldr	r2, [r3, #12]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4976      	ldr	r1, [pc, #472]	; (8001e04 <HAL_ADC_Init+0x6c0>)
 8001c2a:	400a      	ands	r2, r1
 8001c2c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68d9      	ldr	r1, [r3, #12]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d101      	bne.n	8001c44 <HAL_ADC_Init+0x500>
 8001c40:	2304      	movs	r3, #4
 8001c42:	e000      	b.n	8001c46 <HAL_ADC_Init+0x502>
 8001c44:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001c46:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2020      	movs	r0, #32
 8001c4c:	5c1b      	ldrb	r3, [r3, r0]
 8001c4e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001c50:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	202c      	movs	r0, #44	; 0x2c
 8001c56:	5c1b      	ldrb	r3, [r3, r0]
 8001c58:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001c5a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001c60:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001c68:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001c70:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c7e:	23c2      	movs	r3, #194	; 0xc2
 8001c80:	33ff      	adds	r3, #255	; 0xff
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d00b      	beq.n	8001c9e <HAL_ADC_Init+0x55a>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68d9      	ldr	r1, [r3, #12]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001c94:	431a      	orrs	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2221      	movs	r2, #33	; 0x21
 8001ca2:	5c9b      	ldrb	r3, [r3, r2]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d11a      	bne.n	8001cde <HAL_ADC_Init+0x59a>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2220      	movs	r2, #32
 8001cac:	5c9b      	ldrb	r3, [r3, r2]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d109      	bne.n	8001cc6 <HAL_ADC_Init+0x582>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68da      	ldr	r2, [r3, #12]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2180      	movs	r1, #128	; 0x80
 8001cbe:	0249      	lsls	r1, r1, #9
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	60da      	str	r2, [r3, #12]
 8001cc4:	e00b      	b.n	8001cde <HAL_ADC_Init+0x59a>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cca:	2220      	movs	r2, #32
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d000      	beq.n	8001ce8 <HAL_ADC_Init+0x5a4>
 8001ce6:	e095      	b.n	8001e14 <HAL_ADC_Init+0x6d0>
  {
    assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversample.Ratio));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d022      	beq.n	8001d36 <HAL_ADC_Init+0x5f2>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf4:	2b04      	cmp	r3, #4
 8001cf6:	d01e      	beq.n	8001d36 <HAL_ADC_Init+0x5f2>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfc:	2b08      	cmp	r3, #8
 8001cfe:	d01a      	beq.n	8001d36 <HAL_ADC_Init+0x5f2>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d04:	2b0c      	cmp	r3, #12
 8001d06:	d016      	beq.n	8001d36 <HAL_ADC_Init+0x5f2>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0c:	2b10      	cmp	r3, #16
 8001d0e:	d012      	beq.n	8001d36 <HAL_ADC_Init+0x5f2>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d14:	2b14      	cmp	r3, #20
 8001d16:	d00e      	beq.n	8001d36 <HAL_ADC_Init+0x5f2>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	2b18      	cmp	r3, #24
 8001d1e:	d00a      	beq.n	8001d36 <HAL_ADC_Init+0x5f2>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d24:	2b1c      	cmp	r3, #28
 8001d26:	d006      	beq.n	8001d36 <HAL_ADC_Init+0x5f2>
 8001d28:	2393      	movs	r3, #147	; 0x93
 8001d2a:	009a      	lsls	r2, r3, #2
 8001d2c:	4b30      	ldr	r3, [pc, #192]	; (8001df0 <HAL_ADC_Init+0x6ac>)
 8001d2e:	0011      	movs	r1, r2
 8001d30:	0018      	movs	r0, r3
 8001d32:	f7ff fa4a 	bl	80011ca <assert_failed>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversample.RightBitShift));
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d027      	beq.n	8001d8e <HAL_ADC_Init+0x64a>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d42:	2b20      	cmp	r3, #32
 8001d44:	d023      	beq.n	8001d8e <HAL_ADC_Init+0x64a>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4a:	2b40      	cmp	r3, #64	; 0x40
 8001d4c:	d01f      	beq.n	8001d8e <HAL_ADC_Init+0x64a>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d52:	2b60      	cmp	r3, #96	; 0x60
 8001d54:	d01b      	beq.n	8001d8e <HAL_ADC_Init+0x64a>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5a:	2b80      	cmp	r3, #128	; 0x80
 8001d5c:	d017      	beq.n	8001d8e <HAL_ADC_Init+0x64a>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d62:	2ba0      	cmp	r3, #160	; 0xa0
 8001d64:	d013      	beq.n	8001d8e <HAL_ADC_Init+0x64a>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6a:	2bc0      	cmp	r3, #192	; 0xc0
 8001d6c:	d00f      	beq.n	8001d8e <HAL_ADC_Init+0x64a>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d72:	2be0      	cmp	r3, #224	; 0xe0
 8001d74:	d00b      	beq.n	8001d8e <HAL_ADC_Init+0x64a>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d7a:	2380      	movs	r3, #128	; 0x80
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d005      	beq.n	8001d8e <HAL_ADC_Init+0x64a>
 8001d82:	4a21      	ldr	r2, [pc, #132]	; (8001e08 <HAL_ADC_Init+0x6c4>)
 8001d84:	4b1a      	ldr	r3, [pc, #104]	; (8001df0 <HAL_ADC_Init+0x6ac>)
 8001d86:	0011      	movs	r1, r2
 8001d88:	0018      	movs	r0, r3
 8001d8a:	f7ff fa1e 	bl	80011ca <assert_failed>
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversample.TriggeredMode));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00b      	beq.n	8001dae <HAL_ADC_Init+0x66a>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001d9a:	2380      	movs	r3, #128	; 0x80
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d005      	beq.n	8001dae <HAL_ADC_Init+0x66a>
 8001da2:	4a1a      	ldr	r2, [pc, #104]	; (8001e0c <HAL_ADC_Init+0x6c8>)
 8001da4:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <HAL_ADC_Init+0x6ac>)
 8001da6:	0011      	movs	r1, r2
 8001da8:	0018      	movs	r0, r3
 8001daa:	f7ff fa0e 	bl	80011ca <assert_failed>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	691a      	ldr	r2, [r3, #16]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4915      	ldr	r1, [pc, #84]	; (8001e10 <HAL_ADC_Init+0x6cc>)
 8001dba:	400a      	ands	r2, r1
 8001dbc:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	6919      	ldr	r1, [r3, #16]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001dcc:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8001dd2:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	691a      	ldr	r2, [r3, #16]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2101      	movs	r1, #1
 8001de8:	430a      	orrs	r2, r1
 8001dea:	611a      	str	r2, [r3, #16]
 8001dec:	e021      	b.n	8001e32 <HAL_ADC_Init+0x6ee>
 8001dee:	46c0      	nop			; (mov r8, r8)
 8001df0:	080067f8 	.word	0x080067f8
 8001df4:	fffffefd 	.word	0xfffffefd
 8001df8:	40012708 	.word	0x40012708
 8001dfc:	ffc3ffff 	.word	0xffc3ffff
 8001e00:	fdffffff 	.word	0xfdffffff
 8001e04:	fffe0219 	.word	0xfffe0219
 8001e08:	0000024d 	.word	0x0000024d
 8001e0c:	0000024e 	.word	0x0000024e
 8001e10:	fffffc03 	.word	0xfffffc03
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d107      	bne.n	8001e32 <HAL_ADC_Init+0x6ee>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	691a      	ldr	r2, [r3, #16]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	438a      	bics	r2, r1
 8001e30:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	695a      	ldr	r2, [r3, #20]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2107      	movs	r1, #7
 8001e3e:	438a      	bics	r2, r1
 8001e40:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6959      	ldr	r1, [r3, #20]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e5e:	2203      	movs	r2, #3
 8001e60:	4393      	bics	r3, r2
 8001e62:	2201      	movs	r2, #1
 8001e64:	431a      	orrs	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	b002      	add	sp, #8
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001e74:	b590      	push	{r4, r7, lr}
 8001e76:	b087      	sub	sp, #28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e80:	2317      	movs	r3, #23
 8001e82:	18fb      	adds	r3, r7, r3
 8001e84:	2200      	movs	r2, #0
 8001e86:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a3c      	ldr	r2, [pc, #240]	; (8001f80 <HAL_ADC_Start_DMA+0x10c>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d005      	beq.n	8001e9e <HAL_ADC_Start_DMA+0x2a>
 8001e92:	4a3c      	ldr	r2, [pc, #240]	; (8001f84 <HAL_ADC_Start_DMA+0x110>)
 8001e94:	4b3c      	ldr	r3, [pc, #240]	; (8001f88 <HAL_ADC_Start_DMA+0x114>)
 8001e96:	0011      	movs	r1, r2
 8001e98:	0018      	movs	r0, r3
 8001e9a:	f7ff f996 	bl	80011ca <assert_failed>
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	2204      	movs	r2, #4
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d15e      	bne.n	8001f68 <HAL_ADC_Start_DMA+0xf4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2250      	movs	r2, #80	; 0x50
 8001eae:	5c9b      	ldrb	r3, [r3, r2]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d101      	bne.n	8001eb8 <HAL_ADC_Start_DMA+0x44>
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	e05e      	b.n	8001f76 <HAL_ADC_Start_DMA+0x102>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2250      	movs	r2, #80	; 0x50
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	69db      	ldr	r3, [r3, #28]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d007      	beq.n	8001ed8 <HAL_ADC_Start_DMA+0x64>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001ec8:	2317      	movs	r3, #23
 8001eca:	18fc      	adds	r4, r7, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	0018      	movs	r0, r3
 8001ed0:	f000 f9a8 	bl	8002224 <ADC_Enable>
 8001ed4:	0003      	movs	r3, r0
 8001ed6:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ed8:	2317      	movs	r3, #23
 8001eda:	18fb      	adds	r3, r7, r3
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d146      	bne.n	8001f70 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee6:	4a29      	ldr	r2, [pc, #164]	; (8001f8c <HAL_ADC_Start_DMA+0x118>)
 8001ee8:	4013      	ands	r3, r2
 8001eea:	2280      	movs	r2, #128	; 0x80
 8001eec:	0052      	lsls	r2, r2, #1
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2250      	movs	r2, #80	; 0x50
 8001efe:	2100      	movs	r1, #0
 8001f00:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f06:	4a22      	ldr	r2, [pc, #136]	; (8001f90 <HAL_ADC_Start_DMA+0x11c>)
 8001f08:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0e:	4a21      	ldr	r2, [pc, #132]	; (8001f94 <HAL_ADC_Start_DMA+0x120>)
 8001f10:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f16:	4a20      	ldr	r2, [pc, #128]	; (8001f98 <HAL_ADC_Start_DMA+0x124>)
 8001f18:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	221c      	movs	r2, #28
 8001f20:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	685a      	ldr	r2, [r3, #4]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2110      	movs	r1, #16
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68da      	ldr	r2, [r3, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	3340      	adds	r3, #64	; 0x40
 8001f4c:	0019      	movs	r1, r3
 8001f4e:	68ba      	ldr	r2, [r7, #8]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f000 fccb 	bl	80028ec <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2104      	movs	r1, #4
 8001f62:	430a      	orrs	r2, r1
 8001f64:	609a      	str	r2, [r3, #8]
 8001f66:	e003      	b.n	8001f70 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f68:	2317      	movs	r3, #23
 8001f6a:	18fb      	adds	r3, r7, r3
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f70:	2317      	movs	r3, #23
 8001f72:	18fb      	adds	r3, r7, r3
 8001f74:	781b      	ldrb	r3, [r3, #0]
}
 8001f76:	0018      	movs	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	b007      	add	sp, #28
 8001f7c:	bd90      	pop	{r4, r7, pc}
 8001f7e:	46c0      	nop			; (mov r8, r8)
 8001f80:	40012400 	.word	0x40012400
 8001f84:	000005d9 	.word	0x000005d9
 8001f88:	080067f8 	.word	0x080067f8
 8001f8c:	fffff0fe 	.word	0xfffff0fe
 8001f90:	080022e5 	.word	0x080022e5
 8001f94:	08002399 	.word	0x08002399
 8001f98:	080023b7 	.word	0x080023b7

08001f9c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001fa4:	46c0      	nop			; (mov r8, r8)
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	b002      	add	sp, #8
 8001faa:	bd80      	pop	{r7, pc}

08001fac <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001fb4:	46c0      	nop			; (mov r8, r8)
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	b002      	add	sp, #8
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001fc4:	46c0      	nop			; (mov r8, r8)
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	b002      	add	sp, #8
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a79      	ldr	r2, [pc, #484]	; (80021c0 <HAL_ADC_ConfigChannel+0x1f4>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d005      	beq.n	8001fec <HAL_ADC_ConfigChannel+0x20>
 8001fe0:	4a78      	ldr	r2, [pc, #480]	; (80021c4 <HAL_ADC_ConfigChannel+0x1f8>)
 8001fe2:	4b79      	ldr	r3, [pc, #484]	; (80021c8 <HAL_ADC_ConfigChannel+0x1fc>)
 8001fe4:	0011      	movs	r1, r2
 8001fe6:	0018      	movs	r0, r3
 8001fe8:	f7ff f8ef 	bl	80011ca <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d05a      	beq.n	80020aa <HAL_ADC_ConfigChannel+0xde>
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a74      	ldr	r2, [pc, #464]	; (80021cc <HAL_ADC_ConfigChannel+0x200>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d055      	beq.n	80020aa <HAL_ADC_ConfigChannel+0xde>
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a73      	ldr	r2, [pc, #460]	; (80021d0 <HAL_ADC_ConfigChannel+0x204>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d050      	beq.n	80020aa <HAL_ADC_ConfigChannel+0xde>
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a71      	ldr	r2, [pc, #452]	; (80021d4 <HAL_ADC_ConfigChannel+0x208>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d04b      	beq.n	80020aa <HAL_ADC_ConfigChannel+0xde>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a70      	ldr	r2, [pc, #448]	; (80021d8 <HAL_ADC_ConfigChannel+0x20c>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d046      	beq.n	80020aa <HAL_ADC_ConfigChannel+0xde>
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a6e      	ldr	r2, [pc, #440]	; (80021dc <HAL_ADC_ConfigChannel+0x210>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d041      	beq.n	80020aa <HAL_ADC_ConfigChannel+0xde>
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a6d      	ldr	r2, [pc, #436]	; (80021e0 <HAL_ADC_ConfigChannel+0x214>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d03c      	beq.n	80020aa <HAL_ADC_ConfigChannel+0xde>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a6b      	ldr	r2, [pc, #428]	; (80021e4 <HAL_ADC_ConfigChannel+0x218>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d037      	beq.n	80020aa <HAL_ADC_ConfigChannel+0xde>
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a6a      	ldr	r2, [pc, #424]	; (80021e8 <HAL_ADC_ConfigChannel+0x21c>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d032      	beq.n	80020aa <HAL_ADC_ConfigChannel+0xde>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a68      	ldr	r2, [pc, #416]	; (80021ec <HAL_ADC_ConfigChannel+0x220>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d02d      	beq.n	80020aa <HAL_ADC_ConfigChannel+0xde>
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a67      	ldr	r2, [pc, #412]	; (80021f0 <HAL_ADC_ConfigChannel+0x224>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d028      	beq.n	80020aa <HAL_ADC_ConfigChannel+0xde>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a65      	ldr	r2, [pc, #404]	; (80021f4 <HAL_ADC_ConfigChannel+0x228>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d023      	beq.n	80020aa <HAL_ADC_ConfigChannel+0xde>
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a64      	ldr	r2, [pc, #400]	; (80021f8 <HAL_ADC_ConfigChannel+0x22c>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d01e      	beq.n	80020aa <HAL_ADC_ConfigChannel+0xde>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a62      	ldr	r2, [pc, #392]	; (80021fc <HAL_ADC_ConfigChannel+0x230>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d019      	beq.n	80020aa <HAL_ADC_ConfigChannel+0xde>
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a61      	ldr	r2, [pc, #388]	; (8002200 <HAL_ADC_ConfigChannel+0x234>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d014      	beq.n	80020aa <HAL_ADC_ConfigChannel+0xde>
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a5f      	ldr	r2, [pc, #380]	; (8002204 <HAL_ADC_ConfigChannel+0x238>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d00f      	beq.n	80020aa <HAL_ADC_ConfigChannel+0xde>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a5e      	ldr	r2, [pc, #376]	; (8002208 <HAL_ADC_ConfigChannel+0x23c>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d00a      	beq.n	80020aa <HAL_ADC_ConfigChannel+0xde>
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a5c      	ldr	r2, [pc, #368]	; (800220c <HAL_ADC_ConfigChannel+0x240>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d005      	beq.n	80020aa <HAL_ADC_ConfigChannel+0xde>
 800209e:	4a5c      	ldr	r2, [pc, #368]	; (8002210 <HAL_ADC_ConfigChannel+0x244>)
 80020a0:	4b49      	ldr	r3, [pc, #292]	; (80021c8 <HAL_ADC_ConfigChannel+0x1fc>)
 80020a2:	0011      	movs	r1, r2
 80020a4:	0018      	movs	r0, r3
 80020a6:	f7ff f890 	bl	80011ca <assert_failed>
  assert_param(IS_ADC_RANK(sConfig->Rank));
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	2380      	movs	r3, #128	; 0x80
 80020b0:	015b      	lsls	r3, r3, #5
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d00b      	beq.n	80020ce <HAL_ADC_ConfigChannel+0x102>
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	4a56      	ldr	r2, [pc, #344]	; (8002214 <HAL_ADC_ConfigChannel+0x248>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d006      	beq.n	80020ce <HAL_ADC_ConfigChannel+0x102>
 80020c0:	23f0      	movs	r3, #240	; 0xf0
 80020c2:	00da      	lsls	r2, r3, #3
 80020c4:	4b40      	ldr	r3, [pc, #256]	; (80021c8 <HAL_ADC_ConfigChannel+0x1fc>)
 80020c6:	0011      	movs	r1, r2
 80020c8:	0018      	movs	r0, r3
 80020ca:	f7ff f87e 	bl	80011ca <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2250      	movs	r2, #80	; 0x50
 80020d2:	5c9b      	ldrb	r3, [r3, r2]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d101      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x110>
 80020d8:	2302      	movs	r3, #2
 80020da:	e06c      	b.n	80021b6 <HAL_ADC_ConfigChannel+0x1ea>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2250      	movs	r2, #80	; 0x50
 80020e0:	2101      	movs	r1, #1
 80020e2:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	2204      	movs	r2, #4
 80020ec:	4013      	ands	r3, r2
 80020ee:	d00b      	beq.n	8002108 <HAL_ADC_ConfigChannel+0x13c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f4:	2220      	movs	r2, #32
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2250      	movs	r2, #80	; 0x50
 8002100:	2100      	movs	r1, #0
 8002102:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e056      	b.n	80021b6 <HAL_ADC_ConfigChannel+0x1ea>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	4a41      	ldr	r2, [pc, #260]	; (8002214 <HAL_ADC_ConfigChannel+0x248>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d028      	beq.n	8002164 <HAL_ADC_ConfigChannel+0x198>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	035b      	lsls	r3, r3, #13
 800211e:	0b5a      	lsrs	r2, r3, #13
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	430a      	orrs	r2, r1
 8002126:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	2380      	movs	r3, #128	; 0x80
 800212e:	02db      	lsls	r3, r3, #11
 8002130:	4013      	ands	r3, r2
 8002132:	d009      	beq.n	8002148 <HAL_ADC_ConfigChannel+0x17c>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8002134:	4b38      	ldr	r3, [pc, #224]	; (8002218 <HAL_ADC_ConfigChannel+0x24c>)
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	4b37      	ldr	r3, [pc, #220]	; (8002218 <HAL_ADC_ConfigChannel+0x24c>)
 800213a:	2180      	movs	r1, #128	; 0x80
 800213c:	0409      	lsls	r1, r1, #16
 800213e:	430a      	orrs	r2, r1
 8002140:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8002142:	200a      	movs	r0, #10
 8002144:	f000 f952 	bl	80023ec <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	2380      	movs	r3, #128	; 0x80
 800214e:	029b      	lsls	r3, r3, #10
 8002150:	4013      	ands	r3, r2
 8002152:	d02b      	beq.n	80021ac <HAL_ADC_ConfigChannel+0x1e0>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8002154:	4b30      	ldr	r3, [pc, #192]	; (8002218 <HAL_ADC_ConfigChannel+0x24c>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	4b2f      	ldr	r3, [pc, #188]	; (8002218 <HAL_ADC_ConfigChannel+0x24c>)
 800215a:	2180      	movs	r1, #128	; 0x80
 800215c:	03c9      	lsls	r1, r1, #15
 800215e:	430a      	orrs	r2, r1
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	e023      	b.n	80021ac <HAL_ADC_ConfigChannel+0x1e0>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	035b      	lsls	r3, r3, #13
 8002170:	0b5b      	lsrs	r3, r3, #13
 8002172:	43d9      	mvns	r1, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	400a      	ands	r2, r1
 800217a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	2380      	movs	r3, #128	; 0x80
 8002182:	02db      	lsls	r3, r3, #11
 8002184:	4013      	ands	r3, r2
 8002186:	d005      	beq.n	8002194 <HAL_ADC_ConfigChannel+0x1c8>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8002188:	4b23      	ldr	r3, [pc, #140]	; (8002218 <HAL_ADC_ConfigChannel+0x24c>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	4b22      	ldr	r3, [pc, #136]	; (8002218 <HAL_ADC_ConfigChannel+0x24c>)
 800218e:	4923      	ldr	r1, [pc, #140]	; (800221c <HAL_ADC_ConfigChannel+0x250>)
 8002190:	400a      	ands	r2, r1
 8002192:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	2380      	movs	r3, #128	; 0x80
 800219a:	029b      	lsls	r3, r3, #10
 800219c:	4013      	ands	r3, r2
 800219e:	d005      	beq.n	80021ac <HAL_ADC_ConfigChannel+0x1e0>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80021a0:	4b1d      	ldr	r3, [pc, #116]	; (8002218 <HAL_ADC_ConfigChannel+0x24c>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	4b1c      	ldr	r3, [pc, #112]	; (8002218 <HAL_ADC_ConfigChannel+0x24c>)
 80021a6:	491e      	ldr	r1, [pc, #120]	; (8002220 <HAL_ADC_ConfigChannel+0x254>)
 80021a8:	400a      	ands	r2, r1
 80021aa:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2250      	movs	r2, #80	; 0x50
 80021b0:	2100      	movs	r1, #0
 80021b2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	0018      	movs	r0, r3
 80021b8:	46bd      	mov	sp, r7
 80021ba:	b002      	add	sp, #8
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	46c0      	nop			; (mov r8, r8)
 80021c0:	40012400 	.word	0x40012400
 80021c4:	0000077e 	.word	0x0000077e
 80021c8:	080067f8 	.word	0x080067f8
 80021cc:	04000002 	.word	0x04000002
 80021d0:	08000004 	.word	0x08000004
 80021d4:	0c000008 	.word	0x0c000008
 80021d8:	10000010 	.word	0x10000010
 80021dc:	14000020 	.word	0x14000020
 80021e0:	18000040 	.word	0x18000040
 80021e4:	1c000080 	.word	0x1c000080
 80021e8:	20000100 	.word	0x20000100
 80021ec:	24000200 	.word	0x24000200
 80021f0:	28000400 	.word	0x28000400
 80021f4:	2c000800 	.word	0x2c000800
 80021f8:	30001000 	.word	0x30001000
 80021fc:	34002000 	.word	0x34002000
 8002200:	38004000 	.word	0x38004000
 8002204:	3c008000 	.word	0x3c008000
 8002208:	48040000 	.word	0x48040000
 800220c:	44020000 	.word	0x44020000
 8002210:	0000077f 	.word	0x0000077f
 8002214:	00001001 	.word	0x00001001
 8002218:	40012708 	.word	0x40012708
 800221c:	ff7fffff 	.word	0xff7fffff
 8002220:	ffbfffff 	.word	0xffbfffff

08002224 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800222c:	2300      	movs	r3, #0
 800222e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	2203      	movs	r2, #3
 8002238:	4013      	ands	r3, r2
 800223a:	2b01      	cmp	r3, #1
 800223c:	d108      	bne.n	8002250 <ADC_Enable+0x2c>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2201      	movs	r2, #1
 8002246:	4013      	ands	r3, r2
 8002248:	2b01      	cmp	r3, #1
 800224a:	d101      	bne.n	8002250 <ADC_Enable+0x2c>
 800224c:	2301      	movs	r3, #1
 800224e:	e000      	b.n	8002252 <ADC_Enable+0x2e>
 8002250:	2300      	movs	r3, #0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d13f      	bne.n	80022d6 <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	4a20      	ldr	r2, [pc, #128]	; (80022e0 <ADC_Enable+0xbc>)
 800225e:	4013      	ands	r3, r2
 8002260:	d00d      	beq.n	800227e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002266:	2210      	movs	r2, #16
 8002268:	431a      	orrs	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002272:	2201      	movs	r2, #1
 8002274:	431a      	orrs	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e02c      	b.n	80022d8 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2101      	movs	r1, #1
 800228a:	430a      	orrs	r2, r1
 800228c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800228e:	2001      	movs	r0, #1
 8002290:	f000 f8ac 	bl	80023ec <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002294:	f7ff fa2e 	bl	80016f4 <HAL_GetTick>
 8002298:	0003      	movs	r3, r0
 800229a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800229c:	e014      	b.n	80022c8 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800229e:	f7ff fa29 	bl	80016f4 <HAL_GetTick>
 80022a2:	0002      	movs	r2, r0
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b0a      	cmp	r3, #10
 80022aa:	d90d      	bls.n	80022c8 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b0:	2210      	movs	r2, #16
 80022b2:	431a      	orrs	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022bc:	2201      	movs	r2, #1
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e007      	b.n	80022d8 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2201      	movs	r2, #1
 80022d0:	4013      	ands	r3, r2
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d1e3      	bne.n	800229e <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	0018      	movs	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	b004      	add	sp, #16
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	80000017 	.word	0x80000017

080022e4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f6:	2250      	movs	r2, #80	; 0x50
 80022f8:	4013      	ands	r3, r2
 80022fa:	d141      	bne.n	8002380 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002300:	2280      	movs	r2, #128	; 0x80
 8002302:	0092      	lsls	r2, r2, #2
 8002304:	431a      	orrs	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68da      	ldr	r2, [r3, #12]
 8002310:	23c0      	movs	r3, #192	; 0xc0
 8002312:	011b      	lsls	r3, r3, #4
 8002314:	4013      	ands	r3, r2
 8002316:	d12e      	bne.n	8002376 <ADC_DMAConvCplt+0x92>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2220      	movs	r2, #32
 800231c:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800231e:	2b00      	cmp	r3, #0
 8002320:	d129      	bne.n	8002376 <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2208      	movs	r2, #8
 800232a:	4013      	ands	r3, r2
 800232c:	2b08      	cmp	r3, #8
 800232e:	d122      	bne.n	8002376 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	2204      	movs	r2, #4
 8002338:	4013      	ands	r3, r2
 800233a:	d110      	bne.n	800235e <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	210c      	movs	r1, #12
 8002348:	438a      	bics	r2, r1
 800234a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002350:	4a10      	ldr	r2, [pc, #64]	; (8002394 <ADC_DMAConvCplt+0xb0>)
 8002352:	4013      	ands	r3, r2
 8002354:	2201      	movs	r2, #1
 8002356:	431a      	orrs	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	655a      	str	r2, [r3, #84]	; 0x54
 800235c:	e00b      	b.n	8002376 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002362:	2220      	movs	r2, #32
 8002364:	431a      	orrs	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236e:	2201      	movs	r2, #1
 8002370:	431a      	orrs	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	0018      	movs	r0, r3
 800237a:	f7ff fe0f 	bl	8001f9c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800237e:	e005      	b.n	800238c <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	0010      	movs	r0, r2
 800238a:	4798      	blx	r3
}
 800238c:	46c0      	nop			; (mov r8, r8)
 800238e:	46bd      	mov	sp, r7
 8002390:	b004      	add	sp, #16
 8002392:	bd80      	pop	{r7, pc}
 8002394:	fffffefe 	.word	0xfffffefe

08002398 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a4:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	0018      	movs	r0, r3
 80023aa:	f7ff fdff 	bl	8001fac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	46bd      	mov	sp, r7
 80023b2:	b004      	add	sp, #16
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b084      	sub	sp, #16
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c8:	2240      	movs	r2, #64	; 0x40
 80023ca:	431a      	orrs	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d4:	2204      	movs	r2, #4
 80023d6:	431a      	orrs	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	0018      	movs	r0, r3
 80023e0:	f7ff fdec 	bl	8001fbc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023e4:	46c0      	nop			; (mov r8, r8)
 80023e6:	46bd      	mov	sp, r7
 80023e8:	b004      	add	sp, #16
 80023ea:	bd80      	pop	{r7, pc}

080023ec <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80023f4:	4b0a      	ldr	r3, [pc, #40]	; (8002420 <ADC_DelayMicroSecond+0x34>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	490a      	ldr	r1, [pc, #40]	; (8002424 <ADC_DelayMicroSecond+0x38>)
 80023fa:	0018      	movs	r0, r3
 80023fc:	f7fd fe84 	bl	8000108 <__udivsi3>
 8002400:	0003      	movs	r3, r0
 8002402:	001a      	movs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4353      	muls	r3, r2
 8002408:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 800240a:	e002      	b.n	8002412 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	3b01      	subs	r3, #1
 8002410:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1f9      	bne.n	800240c <ADC_DelayMicroSecond+0x20>
  } 
}
 8002418:	46c0      	nop			; (mov r8, r8)
 800241a:	46bd      	mov	sp, r7
 800241c:	b004      	add	sp, #16
 800241e:	bd80      	pop	{r7, pc}
 8002420:	20000030 	.word	0x20000030
 8002424:	000f4240 	.word	0x000f4240

08002428 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	0002      	movs	r2, r0
 8002430:	1dfb      	adds	r3, r7, #7
 8002432:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002434:	1dfb      	adds	r3, r7, #7
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	001a      	movs	r2, r3
 800243a:	231f      	movs	r3, #31
 800243c:	401a      	ands	r2, r3
 800243e:	4b04      	ldr	r3, [pc, #16]	; (8002450 <NVIC_EnableIRQ+0x28>)
 8002440:	2101      	movs	r1, #1
 8002442:	4091      	lsls	r1, r2
 8002444:	000a      	movs	r2, r1
 8002446:	601a      	str	r2, [r3, #0]
}
 8002448:	46c0      	nop			; (mov r8, r8)
 800244a:	46bd      	mov	sp, r7
 800244c:	b002      	add	sp, #8
 800244e:	bd80      	pop	{r7, pc}
 8002450:	e000e100 	.word	0xe000e100

08002454 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002454:	b590      	push	{r4, r7, lr}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	0002      	movs	r2, r0
 800245c:	6039      	str	r1, [r7, #0]
 800245e:	1dfb      	adds	r3, r7, #7
 8002460:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8002462:	1dfb      	adds	r3, r7, #7
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b7f      	cmp	r3, #127	; 0x7f
 8002468:	d932      	bls.n	80024d0 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800246a:	4a2f      	ldr	r2, [pc, #188]	; (8002528 <NVIC_SetPriority+0xd4>)
 800246c:	1dfb      	adds	r3, r7, #7
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	0019      	movs	r1, r3
 8002472:	230f      	movs	r3, #15
 8002474:	400b      	ands	r3, r1
 8002476:	3b08      	subs	r3, #8
 8002478:	089b      	lsrs	r3, r3, #2
 800247a:	3306      	adds	r3, #6
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	18d3      	adds	r3, r2, r3
 8002480:	3304      	adds	r3, #4
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	1dfa      	adds	r2, r7, #7
 8002486:	7812      	ldrb	r2, [r2, #0]
 8002488:	0011      	movs	r1, r2
 800248a:	2203      	movs	r2, #3
 800248c:	400a      	ands	r2, r1
 800248e:	00d2      	lsls	r2, r2, #3
 8002490:	21ff      	movs	r1, #255	; 0xff
 8002492:	4091      	lsls	r1, r2
 8002494:	000a      	movs	r2, r1
 8002496:	43d2      	mvns	r2, r2
 8002498:	401a      	ands	r2, r3
 800249a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	019b      	lsls	r3, r3, #6
 80024a0:	22ff      	movs	r2, #255	; 0xff
 80024a2:	401a      	ands	r2, r3
 80024a4:	1dfb      	adds	r3, r7, #7
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	0018      	movs	r0, r3
 80024aa:	2303      	movs	r3, #3
 80024ac:	4003      	ands	r3, r0
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024b2:	481d      	ldr	r0, [pc, #116]	; (8002528 <NVIC_SetPriority+0xd4>)
 80024b4:	1dfb      	adds	r3, r7, #7
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	001c      	movs	r4, r3
 80024ba:	230f      	movs	r3, #15
 80024bc:	4023      	ands	r3, r4
 80024be:	3b08      	subs	r3, #8
 80024c0:	089b      	lsrs	r3, r3, #2
 80024c2:	430a      	orrs	r2, r1
 80024c4:	3306      	adds	r3, #6
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	18c3      	adds	r3, r0, r3
 80024ca:	3304      	adds	r3, #4
 80024cc:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80024ce:	e027      	b.n	8002520 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024d0:	4a16      	ldr	r2, [pc, #88]	; (800252c <NVIC_SetPriority+0xd8>)
 80024d2:	1dfb      	adds	r3, r7, #7
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	b25b      	sxtb	r3, r3
 80024d8:	089b      	lsrs	r3, r3, #2
 80024da:	33c0      	adds	r3, #192	; 0xc0
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	589b      	ldr	r3, [r3, r2]
 80024e0:	1dfa      	adds	r2, r7, #7
 80024e2:	7812      	ldrb	r2, [r2, #0]
 80024e4:	0011      	movs	r1, r2
 80024e6:	2203      	movs	r2, #3
 80024e8:	400a      	ands	r2, r1
 80024ea:	00d2      	lsls	r2, r2, #3
 80024ec:	21ff      	movs	r1, #255	; 0xff
 80024ee:	4091      	lsls	r1, r2
 80024f0:	000a      	movs	r2, r1
 80024f2:	43d2      	mvns	r2, r2
 80024f4:	401a      	ands	r2, r3
 80024f6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	019b      	lsls	r3, r3, #6
 80024fc:	22ff      	movs	r2, #255	; 0xff
 80024fe:	401a      	ands	r2, r3
 8002500:	1dfb      	adds	r3, r7, #7
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	0018      	movs	r0, r3
 8002506:	2303      	movs	r3, #3
 8002508:	4003      	ands	r3, r0
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800250e:	4807      	ldr	r0, [pc, #28]	; (800252c <NVIC_SetPriority+0xd8>)
 8002510:	1dfb      	adds	r3, r7, #7
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	b25b      	sxtb	r3, r3
 8002516:	089b      	lsrs	r3, r3, #2
 8002518:	430a      	orrs	r2, r1
 800251a:	33c0      	adds	r3, #192	; 0xc0
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	501a      	str	r2, [r3, r0]
}
 8002520:	46c0      	nop			; (mov r8, r8)
 8002522:	46bd      	mov	sp, r7
 8002524:	b003      	add	sp, #12
 8002526:	bd90      	pop	{r4, r7, pc}
 8002528:	e000ed00 	.word	0xe000ed00
 800252c:	e000e100 	.word	0xe000e100

08002530 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3b01      	subs	r3, #1
 800253c:	4a0c      	ldr	r2, [pc, #48]	; (8002570 <SysTick_Config+0x40>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d901      	bls.n	8002546 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002542:	2301      	movs	r3, #1
 8002544:	e010      	b.n	8002568 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002546:	4b0b      	ldr	r3, [pc, #44]	; (8002574 <SysTick_Config+0x44>)
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	3a01      	subs	r2, #1
 800254c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800254e:	2301      	movs	r3, #1
 8002550:	425b      	negs	r3, r3
 8002552:	2103      	movs	r1, #3
 8002554:	0018      	movs	r0, r3
 8002556:	f7ff ff7d 	bl	8002454 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800255a:	4b06      	ldr	r3, [pc, #24]	; (8002574 <SysTick_Config+0x44>)
 800255c:	2200      	movs	r2, #0
 800255e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002560:	4b04      	ldr	r3, [pc, #16]	; (8002574 <SysTick_Config+0x44>)
 8002562:	2207      	movs	r2, #7
 8002564:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002566:	2300      	movs	r3, #0
}
 8002568:	0018      	movs	r0, r3
 800256a:	46bd      	mov	sp, r7
 800256c:	b002      	add	sp, #8
 800256e:	bd80      	pop	{r7, pc}
 8002570:	00ffffff 	.word	0x00ffffff
 8002574:	e000e010 	.word	0xe000e010

08002578 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	60b9      	str	r1, [r7, #8]
 8002580:	607a      	str	r2, [r7, #4]
 8002582:	230f      	movs	r3, #15
 8002584:	18fb      	adds	r3, r7, r3
 8002586:	1c02      	adds	r2, r0, #0
 8002588:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	2b03      	cmp	r3, #3
 800258e:	d904      	bls.n	800259a <HAL_NVIC_SetPriority+0x22>
 8002590:	4b08      	ldr	r3, [pc, #32]	; (80025b4 <HAL_NVIC_SetPriority+0x3c>)
 8002592:	2187      	movs	r1, #135	; 0x87
 8002594:	0018      	movs	r0, r3
 8002596:	f7fe fe18 	bl	80011ca <assert_failed>
  NVIC_SetPriority(IRQn,PreemptPriority);
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	230f      	movs	r3, #15
 800259e:	18fb      	adds	r3, r7, r3
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	b25b      	sxtb	r3, r3
 80025a4:	0011      	movs	r1, r2
 80025a6:	0018      	movs	r0, r3
 80025a8:	f7ff ff54 	bl	8002454 <NVIC_SetPriority>
}
 80025ac:	46c0      	nop			; (mov r8, r8)
 80025ae:	46bd      	mov	sp, r7
 80025b0:	b004      	add	sp, #16
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	08006830 	.word	0x08006830

080025b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	0002      	movs	r2, r0
 80025c0:	1dfb      	adds	r3, r7, #7
 80025c2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80025c4:	1dfb      	adds	r3, r7, #7
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2b7f      	cmp	r3, #127	; 0x7f
 80025ca:	d904      	bls.n	80025d6 <HAL_NVIC_EnableIRQ+0x1e>
 80025cc:	4b07      	ldr	r3, [pc, #28]	; (80025ec <HAL_NVIC_EnableIRQ+0x34>)
 80025ce:	2197      	movs	r1, #151	; 0x97
 80025d0:	0018      	movs	r0, r3
 80025d2:	f7fe fdfa 	bl	80011ca <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025d6:	1dfb      	adds	r3, r7, #7
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	b25b      	sxtb	r3, r3
 80025dc:	0018      	movs	r0, r3
 80025de:	f7ff ff23 	bl	8002428 <NVIC_EnableIRQ>
}
 80025e2:	46c0      	nop			; (mov r8, r8)
 80025e4:	46bd      	mov	sp, r7
 80025e6:	b002      	add	sp, #8
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	46c0      	nop			; (mov r8, r8)
 80025ec:	08006830 	.word	0x08006830

080025f0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	0018      	movs	r0, r3
 80025fc:	f7ff ff98 	bl	8002530 <SysTick_Config>
 8002600:	0003      	movs	r3, r0
}
 8002602:	0018      	movs	r0, r3
 8002604:	46bd      	mov	sp, r7
 8002606:	b002      	add	sp, #8
 8002608:	bd80      	pop	{r7, pc}
	...

0800260c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e149      	b.n	80028b2 <HAL_DMA_Init+0x2a6>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4aa6      	ldr	r2, [pc, #664]	; (80028bc <HAL_DMA_Init+0x2b0>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d022      	beq.n	800266e <HAL_DMA_Init+0x62>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4aa4      	ldr	r2, [pc, #656]	; (80028c0 <HAL_DMA_Init+0x2b4>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d01d      	beq.n	800266e <HAL_DMA_Init+0x62>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4aa3      	ldr	r2, [pc, #652]	; (80028c4 <HAL_DMA_Init+0x2b8>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d018      	beq.n	800266e <HAL_DMA_Init+0x62>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4aa1      	ldr	r2, [pc, #644]	; (80028c8 <HAL_DMA_Init+0x2bc>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d013      	beq.n	800266e <HAL_DMA_Init+0x62>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4aa0      	ldr	r2, [pc, #640]	; (80028cc <HAL_DMA_Init+0x2c0>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d00e      	beq.n	800266e <HAL_DMA_Init+0x62>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a9e      	ldr	r2, [pc, #632]	; (80028d0 <HAL_DMA_Init+0x2c4>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d009      	beq.n	800266e <HAL_DMA_Init+0x62>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a9d      	ldr	r2, [pc, #628]	; (80028d4 <HAL_DMA_Init+0x2c8>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d004      	beq.n	800266e <HAL_DMA_Init+0x62>
 8002664:	4b9c      	ldr	r3, [pc, #624]	; (80028d8 <HAL_DMA_Init+0x2cc>)
 8002666:	2196      	movs	r1, #150	; 0x96
 8002668:	0018      	movs	r0, r3
 800266a:	f7fe fdae 	bl	80011ca <assert_failed>
  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d03c      	beq.n	80026f0 <HAL_DMA_Init+0xe4>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d038      	beq.n	80026f0 <HAL_DMA_Init+0xe4>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b02      	cmp	r3, #2
 8002684:	d034      	beq.n	80026f0 <HAL_DMA_Init+0xe4>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b03      	cmp	r3, #3
 800268c:	d030      	beq.n	80026f0 <HAL_DMA_Init+0xe4>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b04      	cmp	r3, #4
 8002694:	d02c      	beq.n	80026f0 <HAL_DMA_Init+0xe4>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b05      	cmp	r3, #5
 800269c:	d028      	beq.n	80026f0 <HAL_DMA_Init+0xe4>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b06      	cmp	r3, #6
 80026a4:	d024      	beq.n	80026f0 <HAL_DMA_Init+0xe4>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b07      	cmp	r3, #7
 80026ac:	d020      	beq.n	80026f0 <HAL_DMA_Init+0xe4>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	2b08      	cmp	r3, #8
 80026b4:	d01c      	beq.n	80026f0 <HAL_DMA_Init+0xe4>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b09      	cmp	r3, #9
 80026bc:	d018      	beq.n	80026f0 <HAL_DMA_Init+0xe4>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b0a      	cmp	r3, #10
 80026c4:	d014      	beq.n	80026f0 <HAL_DMA_Init+0xe4>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2b0c      	cmp	r3, #12
 80026cc:	d010      	beq.n	80026f0 <HAL_DMA_Init+0xe4>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b0d      	cmp	r3, #13
 80026d4:	d00c      	beq.n	80026f0 <HAL_DMA_Init+0xe4>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b0e      	cmp	r3, #14
 80026dc:	d008      	beq.n	80026f0 <HAL_DMA_Init+0xe4>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b0f      	cmp	r3, #15
 80026e4:	d004      	beq.n	80026f0 <HAL_DMA_Init+0xe4>
 80026e6:	4b7c      	ldr	r3, [pc, #496]	; (80028d8 <HAL_DMA_Init+0x2cc>)
 80026e8:	2197      	movs	r1, #151	; 0x97
 80026ea:	0018      	movs	r0, r3
 80026ec:	f7fe fd6d 	bl	80011ca <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00e      	beq.n	8002716 <HAL_DMA_Init+0x10a>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	2b10      	cmp	r3, #16
 80026fe:	d00a      	beq.n	8002716 <HAL_DMA_Init+0x10a>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	2380      	movs	r3, #128	; 0x80
 8002706:	01db      	lsls	r3, r3, #7
 8002708:	429a      	cmp	r2, r3
 800270a:	d004      	beq.n	8002716 <HAL_DMA_Init+0x10a>
 800270c:	4b72      	ldr	r3, [pc, #456]	; (80028d8 <HAL_DMA_Init+0x2cc>)
 800270e:	2198      	movs	r1, #152	; 0x98
 8002710:	0018      	movs	r0, r3
 8002712:	f7fe fd5a 	bl	80011ca <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	2b40      	cmp	r3, #64	; 0x40
 800271c:	d008      	beq.n	8002730 <HAL_DMA_Init+0x124>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d004      	beq.n	8002730 <HAL_DMA_Init+0x124>
 8002726:	4b6c      	ldr	r3, [pc, #432]	; (80028d8 <HAL_DMA_Init+0x2cc>)
 8002728:	2199      	movs	r1, #153	; 0x99
 800272a:	0018      	movs	r0, r3
 800272c:	f7fe fd4d 	bl	80011ca <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	2b80      	cmp	r3, #128	; 0x80
 8002736:	d008      	beq.n	800274a <HAL_DMA_Init+0x13e>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d004      	beq.n	800274a <HAL_DMA_Init+0x13e>
 8002740:	4b65      	ldr	r3, [pc, #404]	; (80028d8 <HAL_DMA_Init+0x2cc>)
 8002742:	219a      	movs	r1, #154	; 0x9a
 8002744:	0018      	movs	r0, r3
 8002746:	f7fe fd40 	bl	80011ca <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d010      	beq.n	8002774 <HAL_DMA_Init+0x168>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	695a      	ldr	r2, [r3, #20]
 8002756:	2380      	movs	r3, #128	; 0x80
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	429a      	cmp	r2, r3
 800275c:	d00a      	beq.n	8002774 <HAL_DMA_Init+0x168>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	695a      	ldr	r2, [r3, #20]
 8002762:	2380      	movs	r3, #128	; 0x80
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	429a      	cmp	r2, r3
 8002768:	d004      	beq.n	8002774 <HAL_DMA_Init+0x168>
 800276a:	4b5b      	ldr	r3, [pc, #364]	; (80028d8 <HAL_DMA_Init+0x2cc>)
 800276c:	219b      	movs	r1, #155	; 0x9b
 800276e:	0018      	movs	r0, r3
 8002770:	f7fe fd2b 	bl	80011ca <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d010      	beq.n	800279e <HAL_DMA_Init+0x192>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	699a      	ldr	r2, [r3, #24]
 8002780:	2380      	movs	r3, #128	; 0x80
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	429a      	cmp	r2, r3
 8002786:	d00a      	beq.n	800279e <HAL_DMA_Init+0x192>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	699a      	ldr	r2, [r3, #24]
 800278c:	2380      	movs	r3, #128	; 0x80
 800278e:	011b      	lsls	r3, r3, #4
 8002790:	429a      	cmp	r2, r3
 8002792:	d004      	beq.n	800279e <HAL_DMA_Init+0x192>
 8002794:	4b50      	ldr	r3, [pc, #320]	; (80028d8 <HAL_DMA_Init+0x2cc>)
 8002796:	219c      	movs	r1, #156	; 0x9c
 8002798:	0018      	movs	r0, r3
 800279a:	f7fe fd16 	bl	80011ca <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d008      	beq.n	80027b8 <HAL_DMA_Init+0x1ac>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	2b20      	cmp	r3, #32
 80027ac:	d004      	beq.n	80027b8 <HAL_DMA_Init+0x1ac>
 80027ae:	4b4a      	ldr	r3, [pc, #296]	; (80028d8 <HAL_DMA_Init+0x2cc>)
 80027b0:	219d      	movs	r1, #157	; 0x9d
 80027b2:	0018      	movs	r0, r3
 80027b4:	f7fe fd09 	bl	80011ca <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d016      	beq.n	80027ee <HAL_DMA_Init+0x1e2>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a1a      	ldr	r2, [r3, #32]
 80027c4:	2380      	movs	r3, #128	; 0x80
 80027c6:	015b      	lsls	r3, r3, #5
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d010      	beq.n	80027ee <HAL_DMA_Init+0x1e2>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a1a      	ldr	r2, [r3, #32]
 80027d0:	2380      	movs	r3, #128	; 0x80
 80027d2:	019b      	lsls	r3, r3, #6
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d00a      	beq.n	80027ee <HAL_DMA_Init+0x1e2>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a1a      	ldr	r2, [r3, #32]
 80027dc:	23c0      	movs	r3, #192	; 0xc0
 80027de:	019b      	lsls	r3, r3, #6
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d004      	beq.n	80027ee <HAL_DMA_Init+0x1e2>
 80027e4:	4b3c      	ldr	r3, [pc, #240]	; (80028d8 <HAL_DMA_Init+0x2cc>)
 80027e6:	219e      	movs	r1, #158	; 0x9e
 80027e8:	0018      	movs	r0, r3
 80027ea:	f7fe fcee 	bl	80011ca <assert_failed>

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a3a      	ldr	r2, [pc, #232]	; (80028dc <HAL_DMA_Init+0x2d0>)
 80027f4:	4694      	mov	ip, r2
 80027f6:	4463      	add	r3, ip
 80027f8:	2114      	movs	r1, #20
 80027fa:	0018      	movs	r0, r3
 80027fc:	f7fd fc84 	bl	8000108 <__udivsi3>
 8002800:	0003      	movs	r3, r0
 8002802:	009a      	lsls	r2, r3, #2
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a35      	ldr	r2, [pc, #212]	; (80028e0 <HAL_DMA_Init+0x2d4>)
 800280c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2225      	movs	r2, #37	; 0x25
 8002812:	2102      	movs	r1, #2
 8002814:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	4a30      	ldr	r2, [pc, #192]	; (80028e4 <HAL_DMA_Init+0x2d8>)
 8002822:	4013      	ands	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800282e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800283a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002846:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	4313      	orrs	r3, r2
 8002852:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689a      	ldr	r2, [r3, #8]
 8002860:	2380      	movs	r3, #128	; 0x80
 8002862:	01db      	lsls	r3, r3, #7
 8002864:	429a      	cmp	r2, r3
 8002866:	d018      	beq.n	800289a <HAL_DMA_Init+0x28e>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002868:	4b1f      	ldr	r3, [pc, #124]	; (80028e8 <HAL_DMA_Init+0x2dc>)
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002870:	211c      	movs	r1, #28
 8002872:	400b      	ands	r3, r1
 8002874:	210f      	movs	r1, #15
 8002876:	4099      	lsls	r1, r3
 8002878:	000b      	movs	r3, r1
 800287a:	43d9      	mvns	r1, r3
 800287c:	4b1a      	ldr	r3, [pc, #104]	; (80028e8 <HAL_DMA_Init+0x2dc>)
 800287e:	400a      	ands	r2, r1
 8002880:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002882:	4b19      	ldr	r3, [pc, #100]	; (80028e8 <HAL_DMA_Init+0x2dc>)
 8002884:	6819      	ldr	r1, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288e:	201c      	movs	r0, #28
 8002890:	4003      	ands	r3, r0
 8002892:	409a      	lsls	r2, r3
 8002894:	4b14      	ldr	r3, [pc, #80]	; (80028e8 <HAL_DMA_Init+0x2dc>)
 8002896:	430a      	orrs	r2, r1
 8002898:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2225      	movs	r2, #37	; 0x25
 80028a4:	2101      	movs	r1, #1
 80028a6:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2224      	movs	r2, #36	; 0x24
 80028ac:	2100      	movs	r1, #0
 80028ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	0018      	movs	r0, r3
 80028b4:	46bd      	mov	sp, r7
 80028b6:	b004      	add	sp, #16
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	46c0      	nop			; (mov r8, r8)
 80028bc:	40020008 	.word	0x40020008
 80028c0:	4002001c 	.word	0x4002001c
 80028c4:	40020030 	.word	0x40020030
 80028c8:	40020044 	.word	0x40020044
 80028cc:	40020058 	.word	0x40020058
 80028d0:	4002006c 	.word	0x4002006c
 80028d4:	40020080 	.word	0x40020080
 80028d8:	0800686c 	.word	0x0800686c
 80028dc:	bffdfff8 	.word	0xbffdfff8
 80028e0:	40020000 	.word	0x40020000
 80028e4:	ffff800f 	.word	0xffff800f
 80028e8:	400200a8 	.word	0x400200a8

080028ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
 80028f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028fa:	2317      	movs	r3, #23
 80028fc:	18fb      	adds	r3, r7, r3
 80028fe:	2200      	movs	r2, #0
 8002900:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <HAL_DMA_Start_IT+0x24>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	4a32      	ldr	r2, [pc, #200]	; (80029d4 <HAL_DMA_Start_IT+0xe8>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d906      	bls.n	800291e <HAL_DMA_Start_IT+0x32>
 8002910:	23ab      	movs	r3, #171	; 0xab
 8002912:	005a      	lsls	r2, r3, #1
 8002914:	4b30      	ldr	r3, [pc, #192]	; (80029d8 <HAL_DMA_Start_IT+0xec>)
 8002916:	0011      	movs	r1, r2
 8002918:	0018      	movs	r0, r3
 800291a:	f7fe fc56 	bl	80011ca <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2224      	movs	r2, #36	; 0x24
 8002922:	5c9b      	ldrb	r3, [r3, r2]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d101      	bne.n	800292c <HAL_DMA_Start_IT+0x40>
 8002928:	2302      	movs	r3, #2
 800292a:	e04f      	b.n	80029cc <HAL_DMA_Start_IT+0xe0>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2224      	movs	r2, #36	; 0x24
 8002930:	2101      	movs	r1, #1
 8002932:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2225      	movs	r2, #37	; 0x25
 8002938:	5c9b      	ldrb	r3, [r3, r2]
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2b01      	cmp	r3, #1
 800293e:	d13a      	bne.n	80029b6 <HAL_DMA_Start_IT+0xca>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2225      	movs	r2, #37	; 0x25
 8002944:	2102      	movs	r1, #2
 8002946:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2101      	movs	r1, #1
 800295a:	438a      	bics	r2, r1
 800295c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	68b9      	ldr	r1, [r7, #8]
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f000 f8e7 	bl	8002b38 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	2b00      	cmp	r3, #0
 8002970:	d008      	beq.n	8002984 <HAL_DMA_Start_IT+0x98>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	210e      	movs	r1, #14
 800297e:	430a      	orrs	r2, r1
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	e00f      	b.n	80029a4 <HAL_DMA_Start_IT+0xb8>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2104      	movs	r1, #4
 8002990:	438a      	bics	r2, r1
 8002992:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	210a      	movs	r1, #10
 80029a0:	430a      	orrs	r2, r1
 80029a2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2101      	movs	r1, #1
 80029b0:	430a      	orrs	r2, r1
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	e007      	b.n	80029c6 <HAL_DMA_Start_IT+0xda>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2224      	movs	r2, #36	; 0x24
 80029ba:	2100      	movs	r1, #0
 80029bc:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80029be:	2317      	movs	r3, #23
 80029c0:	18fb      	adds	r3, r7, r3
 80029c2:	2202      	movs	r2, #2
 80029c4:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80029c6:	2317      	movs	r3, #23
 80029c8:	18fb      	adds	r3, r7, r3
 80029ca:	781b      	ldrb	r3, [r3, #0]
}
 80029cc:	0018      	movs	r0, r3
 80029ce:	46bd      	mov	sp, r7
 80029d0:	b006      	add	sp, #24
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	0000ffff 	.word	0x0000ffff
 80029d8:	0800686c 	.word	0x0800686c

080029dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f8:	221c      	movs	r2, #28
 80029fa:	4013      	ands	r3, r2
 80029fc:	2204      	movs	r2, #4
 80029fe:	409a      	lsls	r2, r3
 8002a00:	0013      	movs	r3, r2
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	4013      	ands	r3, r2
 8002a06:	d026      	beq.n	8002a56 <HAL_DMA_IRQHandler+0x7a>
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	2204      	movs	r2, #4
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	d022      	beq.n	8002a56 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2220      	movs	r2, #32
 8002a18:	4013      	ands	r3, r2
 8002a1a:	d107      	bne.n	8002a2c <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2104      	movs	r1, #4
 8002a28:	438a      	bics	r2, r1
 8002a2a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a30:	221c      	movs	r2, #28
 8002a32:	401a      	ands	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	2104      	movs	r1, #4
 8002a3a:	4091      	lsls	r1, r2
 8002a3c:	000a      	movs	r2, r1
 8002a3e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d100      	bne.n	8002a4a <HAL_DMA_IRQHandler+0x6e>
 8002a48:	e071      	b.n	8002b2e <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	0010      	movs	r0, r2
 8002a52:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8002a54:	e06b      	b.n	8002b2e <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5a:	221c      	movs	r2, #28
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	2202      	movs	r2, #2
 8002a60:	409a      	lsls	r2, r3
 8002a62:	0013      	movs	r3, r2
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	4013      	ands	r3, r2
 8002a68:	d02d      	beq.n	8002ac6 <HAL_DMA_IRQHandler+0xea>
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	4013      	ands	r3, r2
 8002a70:	d029      	beq.n	8002ac6 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	d10b      	bne.n	8002a96 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	210a      	movs	r1, #10
 8002a8a:	438a      	bics	r2, r1
 8002a8c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2225      	movs	r2, #37	; 0x25
 8002a92:	2101      	movs	r1, #1
 8002a94:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9a:	221c      	movs	r2, #28
 8002a9c:	401a      	ands	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	2102      	movs	r1, #2
 8002aa4:	4091      	lsls	r1, r2
 8002aa6:	000a      	movs	r2, r1
 8002aa8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2224      	movs	r2, #36	; 0x24
 8002aae:	2100      	movs	r1, #0
 8002ab0:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d039      	beq.n	8002b2e <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	0010      	movs	r0, r2
 8002ac2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002ac4:	e033      	b.n	8002b2e <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aca:	221c      	movs	r2, #28
 8002acc:	4013      	ands	r3, r2
 8002ace:	2208      	movs	r2, #8
 8002ad0:	409a      	lsls	r2, r3
 8002ad2:	0013      	movs	r3, r2
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	d02a      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x154>
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	2208      	movs	r2, #8
 8002ade:	4013      	ands	r3, r2
 8002ae0:	d026      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	210e      	movs	r1, #14
 8002aee:	438a      	bics	r2, r1
 8002af0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af6:	221c      	movs	r2, #28
 8002af8:	401a      	ands	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	2101      	movs	r1, #1
 8002b00:	4091      	lsls	r1, r2
 8002b02:	000a      	movs	r2, r1
 8002b04:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2225      	movs	r2, #37	; 0x25
 8002b10:	2101      	movs	r1, #1
 8002b12:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2224      	movs	r2, #36	; 0x24
 8002b18:	2100      	movs	r1, #0
 8002b1a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d005      	beq.n	8002b30 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	0010      	movs	r0, r2
 8002b2c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	46c0      	nop			; (mov r8, r8)
}
 8002b32:	46bd      	mov	sp, r7
 8002b34:	b004      	add	sp, #16
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
 8002b44:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4a:	221c      	movs	r2, #28
 8002b4c:	401a      	ands	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	2101      	movs	r1, #1
 8002b54:	4091      	lsls	r1, r2
 8002b56:	000a      	movs	r2, r1
 8002b58:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	2b10      	cmp	r3, #16
 8002b68:	d108      	bne.n	8002b7c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b7a:	e007      	b.n	8002b8c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68ba      	ldr	r2, [r7, #8]
 8002b82:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	60da      	str	r2, [r3, #12]
}
 8002b8c:	46c0      	nop			; (mov r8, r8)
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	b004      	add	sp, #16
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d036      	beq.n	8002c20 <HAL_GPIO_Init+0x8c>
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d032      	beq.n	8002c20 <HAL_GPIO_Init+0x8c>
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b11      	cmp	r3, #17
 8002bc0:	d02e      	beq.n	8002c20 <HAL_GPIO_Init+0x8c>
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d02a      	beq.n	8002c20 <HAL_GPIO_Init+0x8c>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b12      	cmp	r3, #18
 8002bd0:	d026      	beq.n	8002c20 <HAL_GPIO_Init+0x8c>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	4a48      	ldr	r2, [pc, #288]	; (8002cf8 <HAL_GPIO_Init+0x164>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d021      	beq.n	8002c20 <HAL_GPIO_Init+0x8c>
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	4a46      	ldr	r2, [pc, #280]	; (8002cfc <HAL_GPIO_Init+0x168>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d01c      	beq.n	8002c20 <HAL_GPIO_Init+0x8c>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	4a45      	ldr	r2, [pc, #276]	; (8002d00 <HAL_GPIO_Init+0x16c>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d017      	beq.n	8002c20 <HAL_GPIO_Init+0x8c>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	4a43      	ldr	r2, [pc, #268]	; (8002d04 <HAL_GPIO_Init+0x170>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d012      	beq.n	8002c20 <HAL_GPIO_Init+0x8c>
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	4a42      	ldr	r2, [pc, #264]	; (8002d08 <HAL_GPIO_Init+0x174>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d00d      	beq.n	8002c20 <HAL_GPIO_Init+0x8c>
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	4a40      	ldr	r2, [pc, #256]	; (8002d0c <HAL_GPIO_Init+0x178>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d008      	beq.n	8002c20 <HAL_GPIO_Init+0x8c>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b03      	cmp	r3, #3
 8002c14:	d004      	beq.n	8002c20 <HAL_GPIO_Init+0x8c>
 8002c16:	4b3e      	ldr	r3, [pc, #248]	; (8002d10 <HAL_GPIO_Init+0x17c>)
 8002c18:	21ae      	movs	r1, #174	; 0xae
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	f7fe fad5 	bl	80011ca <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00c      	beq.n	8002c42 <HAL_GPIO_Init+0xae>
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d008      	beq.n	8002c42 <HAL_GPIO_Init+0xae>
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d004      	beq.n	8002c42 <HAL_GPIO_Init+0xae>
 8002c38:	4b35      	ldr	r3, [pc, #212]	; (8002d10 <HAL_GPIO_Init+0x17c>)
 8002c3a:	21af      	movs	r1, #175	; 0xaf
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	f7fe fac4 	bl	80011ca <assert_failed>
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	23a0      	movs	r3, #160	; 0xa0
 8002c46:	05db      	lsls	r3, r3, #23
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d10c      	bne.n	8002c66 <HAL_GPIO_Init+0xd2>
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	041b      	lsls	r3, r3, #16
 8002c52:	0c1b      	lsrs	r3, r3, #16
 8002c54:	d007      	beq.n	8002c66 <HAL_GPIO_Init+0xd2>
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a2e      	ldr	r2, [pc, #184]	; (8002d14 <HAL_GPIO_Init+0x180>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	4a2d      	ldr	r2, [pc, #180]	; (8002d14 <HAL_GPIO_Init+0x180>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d100      	bne.n	8002c66 <HAL_GPIO_Init+0xd2>
 8002c64:	e1e8      	b.n	8003038 <HAL_GPIO_Init+0x4a4>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a2b      	ldr	r2, [pc, #172]	; (8002d18 <HAL_GPIO_Init+0x184>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d10c      	bne.n	8002c88 <HAL_GPIO_Init+0xf4>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	041b      	lsls	r3, r3, #16
 8002c74:	0c1b      	lsrs	r3, r3, #16
 8002c76:	d007      	beq.n	8002c88 <HAL_GPIO_Init+0xf4>
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a25      	ldr	r2, [pc, #148]	; (8002d14 <HAL_GPIO_Init+0x180>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	4a24      	ldr	r2, [pc, #144]	; (8002d14 <HAL_GPIO_Init+0x180>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d100      	bne.n	8002c88 <HAL_GPIO_Init+0xf4>
 8002c86:	e1d7      	b.n	8003038 <HAL_GPIO_Init+0x4a4>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a24      	ldr	r2, [pc, #144]	; (8002d1c <HAL_GPIO_Init+0x188>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d10c      	bne.n	8002caa <HAL_GPIO_Init+0x116>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	041b      	lsls	r3, r3, #16
 8002c96:	0c1b      	lsrs	r3, r3, #16
 8002c98:	d007      	beq.n	8002caa <HAL_GPIO_Init+0x116>
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a1d      	ldr	r2, [pc, #116]	; (8002d14 <HAL_GPIO_Init+0x180>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	4a1c      	ldr	r2, [pc, #112]	; (8002d14 <HAL_GPIO_Init+0x180>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d100      	bne.n	8002caa <HAL_GPIO_Init+0x116>
 8002ca8:	e1c6      	b.n	8003038 <HAL_GPIO_Init+0x4a4>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a1c      	ldr	r2, [pc, #112]	; (8002d20 <HAL_GPIO_Init+0x18c>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d10b      	bne.n	8002cca <HAL_GPIO_Init+0x136>
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2204      	movs	r2, #4
 8002cb8:	4013      	ands	r3, r2
 8002cba:	d006      	beq.n	8002cca <HAL_GPIO_Init+0x136>
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2204      	movs	r2, #4
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	2b04      	cmp	r3, #4
 8002cc6:	d100      	bne.n	8002cca <HAL_GPIO_Init+0x136>
 8002cc8:	e1b6      	b.n	8003038 <HAL_GPIO_Init+0x4a4>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a15      	ldr	r2, [pc, #84]	; (8002d24 <HAL_GPIO_Init+0x190>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d10b      	bne.n	8002cea <HAL_GPIO_Init+0x156>
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2203      	movs	r2, #3
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d006      	beq.n	8002cea <HAL_GPIO_Init+0x156>
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2203      	movs	r2, #3
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	2b03      	cmp	r3, #3
 8002ce6:	d100      	bne.n	8002cea <HAL_GPIO_Init+0x156>
 8002ce8:	e1a6      	b.n	8003038 <HAL_GPIO_Init+0x4a4>
 8002cea:	4b09      	ldr	r3, [pc, #36]	; (8002d10 <HAL_GPIO_Init+0x17c>)
 8002cec:	21b0      	movs	r1, #176	; 0xb0
 8002cee:	0018      	movs	r0, r3
 8002cf0:	f7fe fa6b 	bl	80011ca <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002cf4:	e1a0      	b.n	8003038 <HAL_GPIO_Init+0x4a4>
 8002cf6:	46c0      	nop			; (mov r8, r8)
 8002cf8:	10110000 	.word	0x10110000
 8002cfc:	10210000 	.word	0x10210000
 8002d00:	10310000 	.word	0x10310000
 8002d04:	10120000 	.word	0x10120000
 8002d08:	10220000 	.word	0x10220000
 8002d0c:	10320000 	.word	0x10320000
 8002d10:	080068a4 	.word	0x080068a4
 8002d14:	0000ffff 	.word	0x0000ffff
 8002d18:	50000400 	.word	0x50000400
 8002d1c:	50000800 	.word	0x50000800
 8002d20:	50000c00 	.word	0x50000c00
 8002d24:	50001c00 	.word	0x50001c00
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	4091      	lsls	r1, r2
 8002d32:	000a      	movs	r2, r1
 8002d34:	4013      	ands	r3, r2
 8002d36:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d100      	bne.n	8002d40 <HAL_GPIO_Init+0x1ac>
 8002d3e:	e178      	b.n	8003032 <HAL_GPIO_Init+0x49e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d003      	beq.n	8002d50 <HAL_GPIO_Init+0x1bc>
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2b12      	cmp	r3, #18
 8002d4e:	d146      	bne.n	8002dde <HAL_GPIO_Init+0x24a>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	23a0      	movs	r3, #160	; 0xa0
 8002d54:	05db      	lsls	r3, r3, #23
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d014      	beq.n	8002d84 <HAL_GPIO_Init+0x1f0>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4abc      	ldr	r2, [pc, #752]	; (8003050 <HAL_GPIO_Init+0x4bc>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d010      	beq.n	8002d84 <HAL_GPIO_Init+0x1f0>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4abb      	ldr	r2, [pc, #748]	; (8003054 <HAL_GPIO_Init+0x4c0>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d00c      	beq.n	8002d84 <HAL_GPIO_Init+0x1f0>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4aba      	ldr	r2, [pc, #744]	; (8003058 <HAL_GPIO_Init+0x4c4>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d008      	beq.n	8002d84 <HAL_GPIO_Init+0x1f0>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4ab9      	ldr	r2, [pc, #740]	; (800305c <HAL_GPIO_Init+0x4c8>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d004      	beq.n	8002d84 <HAL_GPIO_Init+0x1f0>
 8002d7a:	4bb9      	ldr	r3, [pc, #740]	; (8003060 <HAL_GPIO_Init+0x4cc>)
 8002d7c:	21bf      	movs	r1, #191	; 0xbf
 8002d7e:	0018      	movs	r0, r3
 8002d80:	f7fe fa23 	bl	80011ca <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	2b07      	cmp	r3, #7
 8002d8a:	d904      	bls.n	8002d96 <HAL_GPIO_Init+0x202>
 8002d8c:	4bb4      	ldr	r3, [pc, #720]	; (8003060 <HAL_GPIO_Init+0x4cc>)
 8002d8e:	21c0      	movs	r1, #192	; 0xc0
 8002d90:	0018      	movs	r0, r3
 8002d92:	f7fe fa1a 	bl	80011ca <assert_failed>

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	08da      	lsrs	r2, r3, #3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	3208      	adds	r2, #8
 8002d9e:	0092      	lsls	r2, r2, #2
 8002da0:	58d3      	ldr	r3, [r2, r3]
 8002da2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	2207      	movs	r2, #7
 8002da8:	4013      	ands	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	220f      	movs	r2, #15
 8002dae:	409a      	lsls	r2, r3
 8002db0:	0013      	movs	r3, r2
 8002db2:	43da      	mvns	r2, r3
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	4013      	ands	r3, r2
 8002db8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	691a      	ldr	r2, [r3, #16]
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	2107      	movs	r1, #7
 8002dc2:	400b      	ands	r3, r1
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	409a      	lsls	r2, r3
 8002dc8:	0013      	movs	r3, r2
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	08da      	lsrs	r2, r3, #3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3208      	adds	r2, #8
 8002dd8:	0092      	lsls	r2, r2, #2
 8002dda:	6939      	ldr	r1, [r7, #16]
 8002ddc:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d00b      	beq.n	8002dfe <HAL_GPIO_Init+0x26a>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d007      	beq.n	8002dfe <HAL_GPIO_Init+0x26a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002df2:	2b11      	cmp	r3, #17
 8002df4:	d003      	beq.n	8002dfe <HAL_GPIO_Init+0x26a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	2b12      	cmp	r3, #18
 8002dfc:	d145      	bne.n	8002e8a <HAL_GPIO_Init+0x2f6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d010      	beq.n	8002e28 <HAL_GPIO_Init+0x294>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d00c      	beq.n	8002e28 <HAL_GPIO_Init+0x294>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d008      	beq.n	8002e28 <HAL_GPIO_Init+0x294>
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	2b03      	cmp	r3, #3
 8002e1c:	d004      	beq.n	8002e28 <HAL_GPIO_Init+0x294>
 8002e1e:	4b90      	ldr	r3, [pc, #576]	; (8003060 <HAL_GPIO_Init+0x4cc>)
 8002e20:	21ce      	movs	r1, #206	; 0xce
 8002e22:	0018      	movs	r0, r3
 8002e24:	f7fe f9d1 	bl	80011ca <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	2203      	movs	r2, #3
 8002e34:	409a      	lsls	r2, r3
 8002e36:	0013      	movs	r3, r2
 8002e38:	43da      	mvns	r2, r3
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	68da      	ldr	r2, [r3, #12]
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	409a      	lsls	r2, r3
 8002e4a:	0013      	movs	r3, r2
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e5e:	2201      	movs	r2, #1
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	409a      	lsls	r2, r3
 8002e64:	0013      	movs	r3, r2
 8002e66:	43da      	mvns	r2, r3
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	091b      	lsrs	r3, r3, #4
 8002e74:	2201      	movs	r2, #1
 8002e76:	401a      	ands	r2, r3
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	409a      	lsls	r2, r3
 8002e7c:	0013      	movs	r3, r2
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	2203      	movs	r2, #3
 8002e96:	409a      	lsls	r2, r3
 8002e98:	0013      	movs	r3, r2
 8002e9a:	43da      	mvns	r2, r3
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2203      	movs	r2, #3
 8002ea8:	401a      	ands	r2, r3
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	409a      	lsls	r2, r3
 8002eb0:	0013      	movs	r3, r2
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	2203      	movs	r2, #3
 8002eca:	409a      	lsls	r2, r3
 8002ecc:	0013      	movs	r3, r2
 8002ece:	43da      	mvns	r2, r3
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	689a      	ldr	r2, [r3, #8]
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	409a      	lsls	r2, r3
 8002ee0:	0013      	movs	r3, r2
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685a      	ldr	r2, [r3, #4]
 8002ef2:	2380      	movs	r3, #128	; 0x80
 8002ef4:	055b      	lsls	r3, r3, #21
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	d100      	bne.n	8002efc <HAL_GPIO_Init+0x368>
 8002efa:	e09a      	b.n	8003032 <HAL_GPIO_Init+0x49e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002efc:	4b59      	ldr	r3, [pc, #356]	; (8003064 <HAL_GPIO_Init+0x4d0>)
 8002efe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f00:	4b58      	ldr	r3, [pc, #352]	; (8003064 <HAL_GPIO_Init+0x4d0>)
 8002f02:	2101      	movs	r1, #1
 8002f04:	430a      	orrs	r2, r1
 8002f06:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8002f08:	4a57      	ldr	r2, [pc, #348]	; (8003068 <HAL_GPIO_Init+0x4d4>)
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	089b      	lsrs	r3, r3, #2
 8002f0e:	3302      	adds	r3, #2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	589b      	ldr	r3, [r3, r2]
 8002f14:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	2203      	movs	r2, #3
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	220f      	movs	r2, #15
 8002f20:	409a      	lsls	r2, r3
 8002f22:	0013      	movs	r3, r2
 8002f24:	43da      	mvns	r2, r3
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	23a0      	movs	r3, #160	; 0xa0
 8002f30:	05db      	lsls	r3, r3, #23
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d019      	beq.n	8002f6a <HAL_GPIO_Init+0x3d6>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a45      	ldr	r2, [pc, #276]	; (8003050 <HAL_GPIO_Init+0x4bc>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d013      	beq.n	8002f66 <HAL_GPIO_Init+0x3d2>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a44      	ldr	r2, [pc, #272]	; (8003054 <HAL_GPIO_Init+0x4c0>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d00d      	beq.n	8002f62 <HAL_GPIO_Init+0x3ce>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a43      	ldr	r2, [pc, #268]	; (8003058 <HAL_GPIO_Init+0x4c4>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d007      	beq.n	8002f5e <HAL_GPIO_Init+0x3ca>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a42      	ldr	r2, [pc, #264]	; (800305c <HAL_GPIO_Init+0x4c8>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d101      	bne.n	8002f5a <HAL_GPIO_Init+0x3c6>
 8002f56:	2305      	movs	r3, #5
 8002f58:	e008      	b.n	8002f6c <HAL_GPIO_Init+0x3d8>
 8002f5a:	2306      	movs	r3, #6
 8002f5c:	e006      	b.n	8002f6c <HAL_GPIO_Init+0x3d8>
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e004      	b.n	8002f6c <HAL_GPIO_Init+0x3d8>
 8002f62:	2302      	movs	r3, #2
 8002f64:	e002      	b.n	8002f6c <HAL_GPIO_Init+0x3d8>
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <HAL_GPIO_Init+0x3d8>
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	2103      	movs	r1, #3
 8002f70:	400a      	ands	r2, r1
 8002f72:	0092      	lsls	r2, r2, #2
 8002f74:	4093      	lsls	r3, r2
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f7c:	493a      	ldr	r1, [pc, #232]	; (8003068 <HAL_GPIO_Init+0x4d4>)
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	089b      	lsrs	r3, r3, #2
 8002f82:	3302      	adds	r3, #2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f8a:	4b38      	ldr	r3, [pc, #224]	; (800306c <HAL_GPIO_Init+0x4d8>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	43da      	mvns	r2, r3
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	4013      	ands	r3, r2
 8002f98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	2380      	movs	r3, #128	; 0x80
 8002fa0:	025b      	lsls	r3, r3, #9
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	d003      	beq.n	8002fae <HAL_GPIO_Init+0x41a>
        {
          temp |= iocurrent;
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002fae:	4b2f      	ldr	r3, [pc, #188]	; (800306c <HAL_GPIO_Init+0x4d8>)
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002fb4:	4b2d      	ldr	r3, [pc, #180]	; (800306c <HAL_GPIO_Init+0x4d8>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	43da      	mvns	r2, r3
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	2380      	movs	r3, #128	; 0x80
 8002fca:	029b      	lsls	r3, r3, #10
 8002fcc:	4013      	ands	r3, r2
 8002fce:	d003      	beq.n	8002fd8 <HAL_GPIO_Init+0x444>
        {
          temp |= iocurrent;
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002fd8:	4b24      	ldr	r3, [pc, #144]	; (800306c <HAL_GPIO_Init+0x4d8>)
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fde:	4b23      	ldr	r3, [pc, #140]	; (800306c <HAL_GPIO_Init+0x4d8>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	43da      	mvns	r2, r3
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	4013      	ands	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685a      	ldr	r2, [r3, #4]
 8002ff2:	2380      	movs	r3, #128	; 0x80
 8002ff4:	035b      	lsls	r3, r3, #13
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	d003      	beq.n	8003002 <HAL_GPIO_Init+0x46e>
        {
          temp |= iocurrent;
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003002:	4b1a      	ldr	r3, [pc, #104]	; (800306c <HAL_GPIO_Init+0x4d8>)
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003008:	4b18      	ldr	r3, [pc, #96]	; (800306c <HAL_GPIO_Init+0x4d8>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	43da      	mvns	r2, r3
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	4013      	ands	r3, r2
 8003016:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	2380      	movs	r3, #128	; 0x80
 800301e:	039b      	lsls	r3, r3, #14
 8003020:	4013      	ands	r3, r2
 8003022:	d003      	beq.n	800302c <HAL_GPIO_Init+0x498>
        {
          temp |= iocurrent;
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	4313      	orrs	r3, r2
 800302a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800302c:	4b0f      	ldr	r3, [pc, #60]	; (800306c <HAL_GPIO_Init+0x4d8>)
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	3301      	adds	r3, #1
 8003036:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	40da      	lsrs	r2, r3
 8003040:	1e13      	subs	r3, r2, #0
 8003042:	d000      	beq.n	8003046 <HAL_GPIO_Init+0x4b2>
 8003044:	e670      	b.n	8002d28 <HAL_GPIO_Init+0x194>
  }
}
 8003046:	46c0      	nop			; (mov r8, r8)
 8003048:	46bd      	mov	sp, r7
 800304a:	b006      	add	sp, #24
 800304c:	bd80      	pop	{r7, pc}
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	50000400 	.word	0x50000400
 8003054:	50000800 	.word	0x50000800
 8003058:	50000c00 	.word	0x50000c00
 800305c:	50001c00 	.word	0x50001c00
 8003060:	080068a4 	.word	0x080068a4
 8003064:	40021000 	.word	0x40021000
 8003068:	40010000 	.word	0x40010000
 800306c:	40010400 	.word	0x40010400

08003070 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	0008      	movs	r0, r1
 800307a:	0011      	movs	r1, r2
 800307c:	1cbb      	adds	r3, r7, #2
 800307e:	1c02      	adds	r2, r0, #0
 8003080:	801a      	strh	r2, [r3, #0]
 8003082:	1c7b      	adds	r3, r7, #1
 8003084:	1c0a      	adds	r2, r1, #0
 8003086:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	23a0      	movs	r3, #160	; 0xa0
 800308c:	05db      	lsls	r3, r3, #23
 800308e:	429a      	cmp	r2, r3
 8003090:	d103      	bne.n	800309a <HAL_GPIO_WritePin+0x2a>
 8003092:	1cbb      	adds	r3, r7, #2
 8003094:	881b      	ldrh	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d136      	bne.n	8003108 <HAL_GPIO_WritePin+0x98>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a2b      	ldr	r2, [pc, #172]	; (800314c <HAL_GPIO_WritePin+0xdc>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d103      	bne.n	80030aa <HAL_GPIO_WritePin+0x3a>
 80030a2:	1cbb      	adds	r3, r7, #2
 80030a4:	881b      	ldrh	r3, [r3, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d12e      	bne.n	8003108 <HAL_GPIO_WritePin+0x98>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a28      	ldr	r2, [pc, #160]	; (8003150 <HAL_GPIO_WritePin+0xe0>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d103      	bne.n	80030ba <HAL_GPIO_WritePin+0x4a>
 80030b2:	1cbb      	adds	r3, r7, #2
 80030b4:	881b      	ldrh	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d126      	bne.n	8003108 <HAL_GPIO_WritePin+0x98>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a25      	ldr	r2, [pc, #148]	; (8003154 <HAL_GPIO_WritePin+0xe4>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d10b      	bne.n	80030da <HAL_GPIO_WritePin+0x6a>
 80030c2:	1cbb      	adds	r3, r7, #2
 80030c4:	881b      	ldrh	r3, [r3, #0]
 80030c6:	2204      	movs	r2, #4
 80030c8:	4013      	ands	r3, r2
 80030ca:	d006      	beq.n	80030da <HAL_GPIO_WritePin+0x6a>
 80030cc:	1cbb      	adds	r3, r7, #2
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	2204      	movs	r2, #4
 80030d2:	4313      	orrs	r3, r2
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	2b04      	cmp	r3, #4
 80030d8:	d016      	beq.n	8003108 <HAL_GPIO_WritePin+0x98>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a1e      	ldr	r2, [pc, #120]	; (8003158 <HAL_GPIO_WritePin+0xe8>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d10b      	bne.n	80030fa <HAL_GPIO_WritePin+0x8a>
 80030e2:	1cbb      	adds	r3, r7, #2
 80030e4:	881b      	ldrh	r3, [r3, #0]
 80030e6:	2203      	movs	r2, #3
 80030e8:	4013      	ands	r3, r2
 80030ea:	d006      	beq.n	80030fa <HAL_GPIO_WritePin+0x8a>
 80030ec:	1cbb      	adds	r3, r7, #2
 80030ee:	881b      	ldrh	r3, [r3, #0]
 80030f0:	2203      	movs	r2, #3
 80030f2:	4313      	orrs	r3, r2
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	2b03      	cmp	r3, #3
 80030f8:	d006      	beq.n	8003108 <HAL_GPIO_WritePin+0x98>
 80030fa:	23ce      	movs	r3, #206	; 0xce
 80030fc:	005a      	lsls	r2, r3, #1
 80030fe:	4b17      	ldr	r3, [pc, #92]	; (800315c <HAL_GPIO_WritePin+0xec>)
 8003100:	0011      	movs	r1, r2
 8003102:	0018      	movs	r0, r3
 8003104:	f7fe f861 	bl	80011ca <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003108:	1c7b      	adds	r3, r7, #1
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00b      	beq.n	8003128 <HAL_GPIO_WritePin+0xb8>
 8003110:	1c7b      	adds	r3, r7, #1
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d007      	beq.n	8003128 <HAL_GPIO_WritePin+0xb8>
 8003118:	239e      	movs	r3, #158	; 0x9e
 800311a:	33ff      	adds	r3, #255	; 0xff
 800311c:	001a      	movs	r2, r3
 800311e:	4b0f      	ldr	r3, [pc, #60]	; (800315c <HAL_GPIO_WritePin+0xec>)
 8003120:	0011      	movs	r1, r2
 8003122:	0018      	movs	r0, r3
 8003124:	f7fe f851 	bl	80011ca <assert_failed>
  
  if(PinState != GPIO_PIN_RESET)
 8003128:	1c7b      	adds	r3, r7, #1
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d004      	beq.n	800313a <HAL_GPIO_WritePin+0xca>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003130:	1cbb      	adds	r3, r7, #2
 8003132:	881a      	ldrh	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003138:	e003      	b.n	8003142 <HAL_GPIO_WritePin+0xd2>
    GPIOx->BRR = GPIO_Pin ;
 800313a:	1cbb      	adds	r3, r7, #2
 800313c:	881a      	ldrh	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003142:	46c0      	nop			; (mov r8, r8)
 8003144:	46bd      	mov	sp, r7
 8003146:	b002      	add	sp, #8
 8003148:	bd80      	pop	{r7, pc}
 800314a:	46c0      	nop			; (mov r8, r8)
 800314c:	50000400 	.word	0x50000400
 8003150:	50000800 	.word	0x50000800
 8003154:	50000c00 	.word	0x50000c00
 8003158:	50001c00 	.word	0x50001c00
 800315c:	080068a4 	.word	0x080068a4

08003160 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	000a      	movs	r2, r1
 800316a:	1cbb      	adds	r3, r7, #2
 800316c:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	23a0      	movs	r3, #160	; 0xa0
 8003172:	05db      	lsls	r3, r3, #23
 8003174:	429a      	cmp	r2, r3
 8003176:	d103      	bne.n	8003180 <HAL_GPIO_TogglePin+0x20>
 8003178:	1cbb      	adds	r3, r7, #2
 800317a:	881b      	ldrh	r3, [r3, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d136      	bne.n	80031ee <HAL_GPIO_TogglePin+0x8e>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a20      	ldr	r2, [pc, #128]	; (8003204 <HAL_GPIO_TogglePin+0xa4>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d103      	bne.n	8003190 <HAL_GPIO_TogglePin+0x30>
 8003188:	1cbb      	adds	r3, r7, #2
 800318a:	881b      	ldrh	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d12e      	bne.n	80031ee <HAL_GPIO_TogglePin+0x8e>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a1d      	ldr	r2, [pc, #116]	; (8003208 <HAL_GPIO_TogglePin+0xa8>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d103      	bne.n	80031a0 <HAL_GPIO_TogglePin+0x40>
 8003198:	1cbb      	adds	r3, r7, #2
 800319a:	881b      	ldrh	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d126      	bne.n	80031ee <HAL_GPIO_TogglePin+0x8e>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a1a      	ldr	r2, [pc, #104]	; (800320c <HAL_GPIO_TogglePin+0xac>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d10b      	bne.n	80031c0 <HAL_GPIO_TogglePin+0x60>
 80031a8:	1cbb      	adds	r3, r7, #2
 80031aa:	881b      	ldrh	r3, [r3, #0]
 80031ac:	2204      	movs	r2, #4
 80031ae:	4013      	ands	r3, r2
 80031b0:	d006      	beq.n	80031c0 <HAL_GPIO_TogglePin+0x60>
 80031b2:	1cbb      	adds	r3, r7, #2
 80031b4:	881b      	ldrh	r3, [r3, #0]
 80031b6:	2204      	movs	r2, #4
 80031b8:	4313      	orrs	r3, r2
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	2b04      	cmp	r3, #4
 80031be:	d016      	beq.n	80031ee <HAL_GPIO_TogglePin+0x8e>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a13      	ldr	r2, [pc, #76]	; (8003210 <HAL_GPIO_TogglePin+0xb0>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d10b      	bne.n	80031e0 <HAL_GPIO_TogglePin+0x80>
 80031c8:	1cbb      	adds	r3, r7, #2
 80031ca:	881b      	ldrh	r3, [r3, #0]
 80031cc:	2203      	movs	r2, #3
 80031ce:	4013      	ands	r3, r2
 80031d0:	d006      	beq.n	80031e0 <HAL_GPIO_TogglePin+0x80>
 80031d2:	1cbb      	adds	r3, r7, #2
 80031d4:	881b      	ldrh	r3, [r3, #0]
 80031d6:	2203      	movs	r2, #3
 80031d8:	4313      	orrs	r3, r2
 80031da:	b29b      	uxth	r3, r3
 80031dc:	2b03      	cmp	r3, #3
 80031de:	d006      	beq.n	80031ee <HAL_GPIO_TogglePin+0x8e>
 80031e0:	23da      	movs	r3, #218	; 0xda
 80031e2:	005a      	lsls	r2, r3, #1
 80031e4:	4b0b      	ldr	r3, [pc, #44]	; (8003214 <HAL_GPIO_TogglePin+0xb4>)
 80031e6:	0011      	movs	r1, r2
 80031e8:	0018      	movs	r0, r3
 80031ea:	f7fd ffee 	bl	80011ca <assert_failed>

  GPIOx->ODR ^= GPIO_Pin;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	695a      	ldr	r2, [r3, #20]
 80031f2:	1cbb      	adds	r3, r7, #2
 80031f4:	881b      	ldrh	r3, [r3, #0]
 80031f6:	405a      	eors	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	615a      	str	r2, [r3, #20]
}
 80031fc:	46c0      	nop			; (mov r8, r8)
 80031fe:	46bd      	mov	sp, r7
 8003200:	b002      	add	sp, #8
 8003202:	bd80      	pop	{r7, pc}
 8003204:	50000400 	.word	0x50000400
 8003208:	50000800 	.word	0x50000800
 800320c:	50000c00 	.word	0x50000c00
 8003210:	50001c00 	.word	0x50001c00
 8003214:	080068a4 	.word	0x080068a4

08003218 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	0002      	movs	r2, r0
 8003220:	1dbb      	adds	r3, r7, #6
 8003222:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8003224:	4b09      	ldr	r3, [pc, #36]	; (800324c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	1dba      	adds	r2, r7, #6
 800322a:	8812      	ldrh	r2, [r2, #0]
 800322c:	4013      	ands	r3, r2
 800322e:	d008      	beq.n	8003242 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003230:	4b06      	ldr	r3, [pc, #24]	; (800324c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003232:	1dba      	adds	r2, r7, #6
 8003234:	8812      	ldrh	r2, [r2, #0]
 8003236:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003238:	1dbb      	adds	r3, r7, #6
 800323a:	881b      	ldrh	r3, [r3, #0]
 800323c:	0018      	movs	r0, r3
 800323e:	f7fd f9e5 	bl	800060c <HAL_GPIO_EXTI_Callback>
  }
}
 8003242:	46c0      	nop			; (mov r8, r8)
 8003244:	46bd      	mov	sp, r7
 8003246:	b002      	add	sp, #8
 8003248:	bd80      	pop	{r7, pc}
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	40010400 	.word	0x40010400

08003250 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003250:	b5b0      	push	{r4, r5, r7, lr}
 8003252:	b08a      	sub	sp, #40	; 0x28
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d102      	bne.n	8003264 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	f000 fd61 	bl	8003d26 <HAL_RCC_OscConfig+0xad6>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d024      	beq.n	80032b6 <HAL_RCC_OscConfig+0x66>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2201      	movs	r2, #1
 8003272:	4013      	ands	r3, r2
 8003274:	d11f      	bne.n	80032b6 <HAL_RCC_OscConfig+0x66>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2202      	movs	r2, #2
 800327c:	4013      	ands	r3, r2
 800327e:	d11a      	bne.n	80032b6 <HAL_RCC_OscConfig+0x66>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2220      	movs	r2, #32
 8003286:	4013      	ands	r3, r2
 8003288:	d115      	bne.n	80032b6 <HAL_RCC_OscConfig+0x66>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2208      	movs	r2, #8
 8003290:	4013      	ands	r3, r2
 8003292:	d110      	bne.n	80032b6 <HAL_RCC_OscConfig+0x66>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2204      	movs	r2, #4
 800329a:	4013      	ands	r3, r2
 800329c:	d10b      	bne.n	80032b6 <HAL_RCC_OscConfig+0x66>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2210      	movs	r2, #16
 80032a4:	4013      	ands	r3, r2
 80032a6:	d106      	bne.n	80032b6 <HAL_RCC_OscConfig+0x66>
 80032a8:	23b0      	movs	r3, #176	; 0xb0
 80032aa:	005a      	lsls	r2, r3, #1
 80032ac:	4bbc      	ldr	r3, [pc, #752]	; (80035a0 <HAL_RCC_OscConfig+0x350>)
 80032ae:	0011      	movs	r1, r2
 80032b0:	0018      	movs	r0, r3
 80032b2:	f7fd ff8a 	bl	80011ca <assert_failed>

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032b6:	4bbb      	ldr	r3, [pc, #748]	; (80035a4 <HAL_RCC_OscConfig+0x354>)
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	220c      	movs	r2, #12
 80032bc:	4013      	ands	r3, r2
 80032be:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032c0:	4bb8      	ldr	r3, [pc, #736]	; (80035a4 <HAL_RCC_OscConfig+0x354>)
 80032c2:	68da      	ldr	r2, [r3, #12]
 80032c4:	2380      	movs	r3, #128	; 0x80
 80032c6:	025b      	lsls	r3, r3, #9
 80032c8:	4013      	ands	r3, r2
 80032ca:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2201      	movs	r2, #1
 80032d2:	4013      	ands	r3, r2
 80032d4:	d100      	bne.n	80032d8 <HAL_RCC_OscConfig+0x88>
 80032d6:	e097      	b.n	8003408 <HAL_RCC_OscConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d013      	beq.n	8003308 <HAL_RCC_OscConfig+0xb8>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	2380      	movs	r3, #128	; 0x80
 80032e6:	025b      	lsls	r3, r3, #9
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d00d      	beq.n	8003308 <HAL_RCC_OscConfig+0xb8>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	23a0      	movs	r3, #160	; 0xa0
 80032f2:	02db      	lsls	r3, r3, #11
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d007      	beq.n	8003308 <HAL_RCC_OscConfig+0xb8>
 80032f8:	236a      	movs	r3, #106	; 0x6a
 80032fa:	33ff      	adds	r3, #255	; 0xff
 80032fc:	001a      	movs	r2, r3
 80032fe:	4ba8      	ldr	r3, [pc, #672]	; (80035a0 <HAL_RCC_OscConfig+0x350>)
 8003300:	0011      	movs	r1, r2
 8003302:	0018      	movs	r0, r3
 8003304:	f7fd ff61 	bl	80011ca <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	2b08      	cmp	r3, #8
 800330c:	d007      	beq.n	800331e <HAL_RCC_OscConfig+0xce>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800330e:	6a3b      	ldr	r3, [r7, #32]
 8003310:	2b0c      	cmp	r3, #12
 8003312:	d112      	bne.n	800333a <HAL_RCC_OscConfig+0xea>
 8003314:	69fa      	ldr	r2, [r7, #28]
 8003316:	2380      	movs	r3, #128	; 0x80
 8003318:	025b      	lsls	r3, r3, #9
 800331a:	429a      	cmp	r2, r3
 800331c:	d10d      	bne.n	800333a <HAL_RCC_OscConfig+0xea>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800331e:	4ba1      	ldr	r3, [pc, #644]	; (80035a4 <HAL_RCC_OscConfig+0x354>)
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	2380      	movs	r3, #128	; 0x80
 8003324:	029b      	lsls	r3, r3, #10
 8003326:	4013      	ands	r3, r2
 8003328:	d100      	bne.n	800332c <HAL_RCC_OscConfig+0xdc>
 800332a:	e06c      	b.n	8003406 <HAL_RCC_OscConfig+0x1b6>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d168      	bne.n	8003406 <HAL_RCC_OscConfig+0x1b6>
      {
        return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	f000 fcf6 	bl	8003d26 <HAL_RCC_OscConfig+0xad6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	2380      	movs	r3, #128	; 0x80
 8003340:	025b      	lsls	r3, r3, #9
 8003342:	429a      	cmp	r2, r3
 8003344:	d107      	bne.n	8003356 <HAL_RCC_OscConfig+0x106>
 8003346:	4b97      	ldr	r3, [pc, #604]	; (80035a4 <HAL_RCC_OscConfig+0x354>)
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	4b96      	ldr	r3, [pc, #600]	; (80035a4 <HAL_RCC_OscConfig+0x354>)
 800334c:	2180      	movs	r1, #128	; 0x80
 800334e:	0249      	lsls	r1, r1, #9
 8003350:	430a      	orrs	r2, r1
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	e027      	b.n	80033a6 <HAL_RCC_OscConfig+0x156>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	23a0      	movs	r3, #160	; 0xa0
 800335c:	02db      	lsls	r3, r3, #11
 800335e:	429a      	cmp	r2, r3
 8003360:	d10e      	bne.n	8003380 <HAL_RCC_OscConfig+0x130>
 8003362:	4b90      	ldr	r3, [pc, #576]	; (80035a4 <HAL_RCC_OscConfig+0x354>)
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	4b8f      	ldr	r3, [pc, #572]	; (80035a4 <HAL_RCC_OscConfig+0x354>)
 8003368:	2180      	movs	r1, #128	; 0x80
 800336a:	02c9      	lsls	r1, r1, #11
 800336c:	430a      	orrs	r2, r1
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	4b8c      	ldr	r3, [pc, #560]	; (80035a4 <HAL_RCC_OscConfig+0x354>)
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	4b8b      	ldr	r3, [pc, #556]	; (80035a4 <HAL_RCC_OscConfig+0x354>)
 8003376:	2180      	movs	r1, #128	; 0x80
 8003378:	0249      	lsls	r1, r1, #9
 800337a:	430a      	orrs	r2, r1
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	e012      	b.n	80033a6 <HAL_RCC_OscConfig+0x156>
 8003380:	4b88      	ldr	r3, [pc, #544]	; (80035a4 <HAL_RCC_OscConfig+0x354>)
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	4b87      	ldr	r3, [pc, #540]	; (80035a4 <HAL_RCC_OscConfig+0x354>)
 8003386:	4988      	ldr	r1, [pc, #544]	; (80035a8 <HAL_RCC_OscConfig+0x358>)
 8003388:	400a      	ands	r2, r1
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	4b85      	ldr	r3, [pc, #532]	; (80035a4 <HAL_RCC_OscConfig+0x354>)
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	2380      	movs	r3, #128	; 0x80
 8003392:	025b      	lsls	r3, r3, #9
 8003394:	4013      	ands	r3, r2
 8003396:	60fb      	str	r3, [r7, #12]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4b82      	ldr	r3, [pc, #520]	; (80035a4 <HAL_RCC_OscConfig+0x354>)
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	4b81      	ldr	r3, [pc, #516]	; (80035a4 <HAL_RCC_OscConfig+0x354>)
 80033a0:	4982      	ldr	r1, [pc, #520]	; (80035ac <HAL_RCC_OscConfig+0x35c>)
 80033a2:	400a      	ands	r2, r1
 80033a4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d015      	beq.n	80033da <HAL_RCC_OscConfig+0x18a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ae:	f7fe f9a1 	bl	80016f4 <HAL_GetTick>
 80033b2:	0003      	movs	r3, r0
 80033b4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033b6:	e009      	b.n	80033cc <HAL_RCC_OscConfig+0x17c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033b8:	f7fe f99c 	bl	80016f4 <HAL_GetTick>
 80033bc:	0002      	movs	r2, r0
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b64      	cmp	r3, #100	; 0x64
 80033c4:	d902      	bls.n	80033cc <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	f000 fcad 	bl	8003d26 <HAL_RCC_OscConfig+0xad6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033cc:	4b75      	ldr	r3, [pc, #468]	; (80035a4 <HAL_RCC_OscConfig+0x354>)
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	2380      	movs	r3, #128	; 0x80
 80033d2:	029b      	lsls	r3, r3, #10
 80033d4:	4013      	ands	r3, r2
 80033d6:	d0ef      	beq.n	80033b8 <HAL_RCC_OscConfig+0x168>
 80033d8:	e016      	b.n	8003408 <HAL_RCC_OscConfig+0x1b8>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033da:	f7fe f98b 	bl	80016f4 <HAL_GetTick>
 80033de:	0003      	movs	r3, r0
 80033e0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80033e2:	e009      	b.n	80033f8 <HAL_RCC_OscConfig+0x1a8>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033e4:	f7fe f986 	bl	80016f4 <HAL_GetTick>
 80033e8:	0002      	movs	r2, r0
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b64      	cmp	r3, #100	; 0x64
 80033f0:	d902      	bls.n	80033f8 <HAL_RCC_OscConfig+0x1a8>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	f000 fc97 	bl	8003d26 <HAL_RCC_OscConfig+0xad6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80033f8:	4b6a      	ldr	r3, [pc, #424]	; (80035a4 <HAL_RCC_OscConfig+0x354>)
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	2380      	movs	r3, #128	; 0x80
 80033fe:	029b      	lsls	r3, r3, #10
 8003400:	4013      	ands	r3, r2
 8003402:	d1ef      	bne.n	80033e4 <HAL_RCC_OscConfig+0x194>
 8003404:	e000      	b.n	8003408 <HAL_RCC_OscConfig+0x1b8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003406:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2202      	movs	r2, #2
 800340e:	4013      	ands	r3, r2
 8003410:	d100      	bne.n	8003414 <HAL_RCC_OscConfig+0x1c4>
 8003412:	e0ad      	b.n	8003570 <HAL_RCC_OscConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00e      	beq.n	800343a <HAL_RCC_OscConfig+0x1ea>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d00a      	beq.n	800343a <HAL_RCC_OscConfig+0x1ea>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	2b09      	cmp	r3, #9
 800342a:	d006      	beq.n	800343a <HAL_RCC_OscConfig+0x1ea>
 800342c:	23ce      	movs	r3, #206	; 0xce
 800342e:	005a      	lsls	r2, r3, #1
 8003430:	4b5b      	ldr	r3, [pc, #364]	; (80035a0 <HAL_RCC_OscConfig+0x350>)
 8003432:	0011      	movs	r1, r2
 8003434:	0018      	movs	r0, r3
 8003436:	f7fd fec8 	bl	80011ca <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	2b1f      	cmp	r3, #31
 8003440:	d907      	bls.n	8003452 <HAL_RCC_OscConfig+0x202>
 8003442:	239e      	movs	r3, #158	; 0x9e
 8003444:	33ff      	adds	r3, #255	; 0xff
 8003446:	001a      	movs	r2, r3
 8003448:	4b55      	ldr	r3, [pc, #340]	; (80035a0 <HAL_RCC_OscConfig+0x350>)
 800344a:	0011      	movs	r1, r2
 800344c:	0018      	movs	r0, r3
 800344e:	f7fd febc 	bl	80011ca <assert_failed>

    hsi_state = RCC_OscInitStruct->HSIState;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003458:	6a3b      	ldr	r3, [r7, #32]
 800345a:	2b04      	cmp	r3, #4
 800345c:	d005      	beq.n	800346a <HAL_RCC_OscConfig+0x21a>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800345e:	6a3b      	ldr	r3, [r7, #32]
 8003460:	2b0c      	cmp	r3, #12
 8003462:	d13f      	bne.n	80034e4 <HAL_RCC_OscConfig+0x294>
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d13c      	bne.n	80034e4 <HAL_RCC_OscConfig+0x294>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800346a:	4b4e      	ldr	r3, [pc, #312]	; (80035a4 <HAL_RCC_OscConfig+0x354>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2204      	movs	r2, #4
 8003470:	4013      	ands	r3, r2
 8003472:	d005      	beq.n	8003480 <HAL_RCC_OscConfig+0x230>
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d102      	bne.n	8003480 <HAL_RCC_OscConfig+0x230>
      {
        return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	f000 fc53 	bl	8003d26 <HAL_RCC_OscConfig+0xad6>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003480:	4b48      	ldr	r3, [pc, #288]	; (80035a4 <HAL_RCC_OscConfig+0x354>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	4a4a      	ldr	r2, [pc, #296]	; (80035b0 <HAL_RCC_OscConfig+0x360>)
 8003486:	4013      	ands	r3, r2
 8003488:	0019      	movs	r1, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	021a      	lsls	r2, r3, #8
 8003490:	4b44      	ldr	r3, [pc, #272]	; (80035a4 <HAL_RCC_OscConfig+0x354>)
 8003492:	430a      	orrs	r2, r1
 8003494:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003496:	4b43      	ldr	r3, [pc, #268]	; (80035a4 <HAL_RCC_OscConfig+0x354>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2209      	movs	r2, #9
 800349c:	4393      	bics	r3, r2
 800349e:	0019      	movs	r1, r3
 80034a0:	4b40      	ldr	r3, [pc, #256]	; (80035a4 <HAL_RCC_OscConfig+0x354>)
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034a8:	f000 fe2e 	bl	8004108 <HAL_RCC_GetSysClockFreq>
 80034ac:	0001      	movs	r1, r0
 80034ae:	4b3d      	ldr	r3, [pc, #244]	; (80035a4 <HAL_RCC_OscConfig+0x354>)
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	091b      	lsrs	r3, r3, #4
 80034b4:	220f      	movs	r2, #15
 80034b6:	4013      	ands	r3, r2
 80034b8:	4a3e      	ldr	r2, [pc, #248]	; (80035b4 <HAL_RCC_OscConfig+0x364>)
 80034ba:	5cd3      	ldrb	r3, [r2, r3]
 80034bc:	000a      	movs	r2, r1
 80034be:	40da      	lsrs	r2, r3
 80034c0:	4b3d      	ldr	r3, [pc, #244]	; (80035b8 <HAL_RCC_OscConfig+0x368>)
 80034c2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 80034c4:	2513      	movs	r5, #19
 80034c6:	197c      	adds	r4, r7, r5
 80034c8:	2000      	movs	r0, #0
 80034ca:	f7fe f8dd 	bl	8001688 <HAL_InitTick>
 80034ce:	0003      	movs	r3, r0
 80034d0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80034d2:	197b      	adds	r3, r7, r5
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d04a      	beq.n	8003570 <HAL_RCC_OscConfig+0x320>
      {
        return status;
 80034da:	2313      	movs	r3, #19
 80034dc:	18fb      	adds	r3, r7, r3
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	f000 fc21 	bl	8003d26 <HAL_RCC_OscConfig+0xad6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d028      	beq.n	800353c <HAL_RCC_OscConfig+0x2ec>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80034ea:	4b2e      	ldr	r3, [pc, #184]	; (80035a4 <HAL_RCC_OscConfig+0x354>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2209      	movs	r2, #9
 80034f0:	4393      	bics	r3, r2
 80034f2:	0019      	movs	r1, r3
 80034f4:	4b2b      	ldr	r3, [pc, #172]	; (80035a4 <HAL_RCC_OscConfig+0x354>)
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034fc:	f7fe f8fa 	bl	80016f4 <HAL_GetTick>
 8003500:	0003      	movs	r3, r0
 8003502:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003504:	e009      	b.n	800351a <HAL_RCC_OscConfig+0x2ca>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003506:	f7fe f8f5 	bl	80016f4 <HAL_GetTick>
 800350a:	0002      	movs	r2, r0
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d902      	bls.n	800351a <HAL_RCC_OscConfig+0x2ca>
          {
            return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	f000 fc06 	bl	8003d26 <HAL_RCC_OscConfig+0xad6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800351a:	4b22      	ldr	r3, [pc, #136]	; (80035a4 <HAL_RCC_OscConfig+0x354>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2204      	movs	r2, #4
 8003520:	4013      	ands	r3, r2
 8003522:	d0f0      	beq.n	8003506 <HAL_RCC_OscConfig+0x2b6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003524:	4b1f      	ldr	r3, [pc, #124]	; (80035a4 <HAL_RCC_OscConfig+0x354>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	4a21      	ldr	r2, [pc, #132]	; (80035b0 <HAL_RCC_OscConfig+0x360>)
 800352a:	4013      	ands	r3, r2
 800352c:	0019      	movs	r1, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	021a      	lsls	r2, r3, #8
 8003534:	4b1b      	ldr	r3, [pc, #108]	; (80035a4 <HAL_RCC_OscConfig+0x354>)
 8003536:	430a      	orrs	r2, r1
 8003538:	605a      	str	r2, [r3, #4]
 800353a:	e019      	b.n	8003570 <HAL_RCC_OscConfig+0x320>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800353c:	4b19      	ldr	r3, [pc, #100]	; (80035a4 <HAL_RCC_OscConfig+0x354>)
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	4b18      	ldr	r3, [pc, #96]	; (80035a4 <HAL_RCC_OscConfig+0x354>)
 8003542:	2101      	movs	r1, #1
 8003544:	438a      	bics	r2, r1
 8003546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003548:	f7fe f8d4 	bl	80016f4 <HAL_GetTick>
 800354c:	0003      	movs	r3, r0
 800354e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003550:	e009      	b.n	8003566 <HAL_RCC_OscConfig+0x316>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003552:	f7fe f8cf 	bl	80016f4 <HAL_GetTick>
 8003556:	0002      	movs	r2, r0
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d902      	bls.n	8003566 <HAL_RCC_OscConfig+0x316>
          {
            return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	f000 fbe0 	bl	8003d26 <HAL_RCC_OscConfig+0xad6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003566:	4b0f      	ldr	r3, [pc, #60]	; (80035a4 <HAL_RCC_OscConfig+0x354>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2204      	movs	r2, #4
 800356c:	4013      	ands	r3, r2
 800356e:	d1f0      	bne.n	8003552 <HAL_RCC_OscConfig+0x302>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2210      	movs	r2, #16
 8003576:	4013      	ands	r3, r2
 8003578:	d100      	bne.n	800357c <HAL_RCC_OscConfig+0x32c>
 800357a:	e125      	b.n	80037c8 <HAL_RCC_OscConfig+0x578>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800357c:	6a3b      	ldr	r3, [r7, #32]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d000      	beq.n	8003584 <HAL_RCC_OscConfig+0x334>
 8003582:	e08a      	b.n	800369a <HAL_RCC_OscConfig+0x44a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003584:	4b07      	ldr	r3, [pc, #28]	; (80035a4 <HAL_RCC_OscConfig+0x354>)
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	2380      	movs	r3, #128	; 0x80
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4013      	ands	r3, r2
 800358e:	d015      	beq.n	80035bc <HAL_RCC_OscConfig+0x36c>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d111      	bne.n	80035bc <HAL_RCC_OscConfig+0x36c>
      {
        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	f000 fbc4 	bl	8003d26 <HAL_RCC_OscConfig+0xad6>
 800359e:	46c0      	nop			; (mov r8, r8)
 80035a0:	080068e0 	.word	0x080068e0
 80035a4:	40021000 	.word	0x40021000
 80035a8:	fffeffff 	.word	0xfffeffff
 80035ac:	fffbffff 	.word	0xfffbffff
 80035b0:	ffffe0ff 	.word	0xffffe0ff
 80035b4:	08006a04 	.word	0x08006a04
 80035b8:	20000030 	.word	0x20000030
      }
      /* Otherwise, just the calibration and MSI range change are allowed */
      else
      {
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	2bff      	cmp	r3, #255	; 0xff
 80035c2:	d906      	bls.n	80035d2 <HAL_RCC_OscConfig+0x382>
 80035c4:	2380      	movs	r3, #128	; 0x80
 80035c6:	009a      	lsls	r2, r3, #2
 80035c8:	4bca      	ldr	r3, [pc, #808]	; (80038f4 <HAL_RCC_OscConfig+0x6a4>)
 80035ca:	0011      	movs	r1, r2
 80035cc:	0018      	movs	r0, r3
 80035ce:	f7fd fdfc 	bl	80011ca <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d029      	beq.n	800362e <HAL_RCC_OscConfig+0x3de>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035de:	2380      	movs	r3, #128	; 0x80
 80035e0:	019b      	lsls	r3, r3, #6
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d023      	beq.n	800362e <HAL_RCC_OscConfig+0x3de>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035ea:	2380      	movs	r3, #128	; 0x80
 80035ec:	01db      	lsls	r3, r3, #7
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d01d      	beq.n	800362e <HAL_RCC_OscConfig+0x3de>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035f6:	23c0      	movs	r3, #192	; 0xc0
 80035f8:	01db      	lsls	r3, r3, #7
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d017      	beq.n	800362e <HAL_RCC_OscConfig+0x3de>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003602:	2380      	movs	r3, #128	; 0x80
 8003604:	021b      	lsls	r3, r3, #8
 8003606:	429a      	cmp	r2, r3
 8003608:	d011      	beq.n	800362e <HAL_RCC_OscConfig+0x3de>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800360e:	23a0      	movs	r3, #160	; 0xa0
 8003610:	021b      	lsls	r3, r3, #8
 8003612:	429a      	cmp	r2, r3
 8003614:	d00b      	beq.n	800362e <HAL_RCC_OscConfig+0x3de>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800361a:	23c0      	movs	r3, #192	; 0xc0
 800361c:	021b      	lsls	r3, r3, #8
 800361e:	429a      	cmp	r2, r3
 8003620:	d005      	beq.n	800362e <HAL_RCC_OscConfig+0x3de>
 8003622:	4ab5      	ldr	r2, [pc, #724]	; (80038f8 <HAL_RCC_OscConfig+0x6a8>)
 8003624:	4bb3      	ldr	r3, [pc, #716]	; (80038f4 <HAL_RCC_OscConfig+0x6a4>)
 8003626:	0011      	movs	r1, r2
 8003628:	0018      	movs	r0, r3
 800362a:	f7fd fdce 	bl	80011ca <assert_failed>

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800362e:	4bb3      	ldr	r3, [pc, #716]	; (80038fc <HAL_RCC_OscConfig+0x6ac>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	4ab3      	ldr	r2, [pc, #716]	; (8003900 <HAL_RCC_OscConfig+0x6b0>)
 8003634:	4013      	ands	r3, r2
 8003636:	0019      	movs	r1, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800363c:	4baf      	ldr	r3, [pc, #700]	; (80038fc <HAL_RCC_OscConfig+0x6ac>)
 800363e:	430a      	orrs	r2, r1
 8003640:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003642:	4bae      	ldr	r3, [pc, #696]	; (80038fc <HAL_RCC_OscConfig+0x6ac>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	021b      	lsls	r3, r3, #8
 8003648:	0a19      	lsrs	r1, r3, #8
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	061a      	lsls	r2, r3, #24
 8003650:	4baa      	ldr	r3, [pc, #680]	; (80038fc <HAL_RCC_OscConfig+0x6ac>)
 8003652:	430a      	orrs	r2, r1
 8003654:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365a:	0b5b      	lsrs	r3, r3, #13
 800365c:	3301      	adds	r3, #1
 800365e:	2280      	movs	r2, #128	; 0x80
 8003660:	0212      	lsls	r2, r2, #8
 8003662:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003664:	4ba5      	ldr	r3, [pc, #660]	; (80038fc <HAL_RCC_OscConfig+0x6ac>)
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	091b      	lsrs	r3, r3, #4
 800366a:	210f      	movs	r1, #15
 800366c:	400b      	ands	r3, r1
 800366e:	49a5      	ldr	r1, [pc, #660]	; (8003904 <HAL_RCC_OscConfig+0x6b4>)
 8003670:	5ccb      	ldrb	r3, [r1, r3]
 8003672:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003674:	4ba4      	ldr	r3, [pc, #656]	; (8003908 <HAL_RCC_OscConfig+0x6b8>)
 8003676:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8003678:	2513      	movs	r5, #19
 800367a:	197c      	adds	r4, r7, r5
 800367c:	2000      	movs	r0, #0
 800367e:	f7fe f803 	bl	8001688 <HAL_InitTick>
 8003682:	0003      	movs	r3, r0
 8003684:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003686:	197b      	adds	r3, r7, r5
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d100      	bne.n	8003690 <HAL_RCC_OscConfig+0x440>
 800368e:	e09b      	b.n	80037c8 <HAL_RCC_OscConfig+0x578>
        {
          return status;
 8003690:	2313      	movs	r3, #19
 8003692:	18fb      	adds	r3, r7, r3
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	f000 fb46 	bl	8003d26 <HAL_RCC_OscConfig+0xad6>
      }
    }
    else
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00a      	beq.n	80036b8 <HAL_RCC_OscConfig+0x468>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d006      	beq.n	80036b8 <HAL_RCC_OscConfig+0x468>
 80036aa:	2386      	movs	r3, #134	; 0x86
 80036ac:	009a      	lsls	r2, r3, #2
 80036ae:	4b91      	ldr	r3, [pc, #580]	; (80038f4 <HAL_RCC_OscConfig+0x6a4>)
 80036b0:	0011      	movs	r1, r2
 80036b2:	0018      	movs	r0, r3
 80036b4:	f7fd fd89 	bl	80011ca <assert_failed>

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	69db      	ldr	r3, [r3, #28]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d100      	bne.n	80036c2 <HAL_RCC_OscConfig+0x472>
 80036c0:	e068      	b.n	8003794 <HAL_RCC_OscConfig+0x544>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80036c2:	4b8e      	ldr	r3, [pc, #568]	; (80038fc <HAL_RCC_OscConfig+0x6ac>)
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	4b8d      	ldr	r3, [pc, #564]	; (80038fc <HAL_RCC_OscConfig+0x6ac>)
 80036c8:	2180      	movs	r1, #128	; 0x80
 80036ca:	0049      	lsls	r1, r1, #1
 80036cc:	430a      	orrs	r2, r1
 80036ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d0:	f7fe f810 	bl	80016f4 <HAL_GetTick>
 80036d4:	0003      	movs	r3, r0
 80036d6:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x49c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036da:	f7fe f80b 	bl	80016f4 <HAL_GetTick>
 80036de:	0002      	movs	r2, r0
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x49c>
          {
            return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e31c      	b.n	8003d26 <HAL_RCC_OscConfig+0xad6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80036ec:	4b83      	ldr	r3, [pc, #524]	; (80038fc <HAL_RCC_OscConfig+0x6ac>)
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	2380      	movs	r3, #128	; 0x80
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4013      	ands	r3, r2
 80036f6:	d0f0      	beq.n	80036da <HAL_RCC_OscConfig+0x48a>
          }
        }
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	2bff      	cmp	r3, #255	; 0xff
 80036fe:	d906      	bls.n	800370e <HAL_RCC_OscConfig+0x4be>
 8003700:	238b      	movs	r3, #139	; 0x8b
 8003702:	009a      	lsls	r2, r3, #2
 8003704:	4b7b      	ldr	r3, [pc, #492]	; (80038f4 <HAL_RCC_OscConfig+0x6a4>)
 8003706:	0011      	movs	r1, r2
 8003708:	0018      	movs	r0, r3
 800370a:	f7fd fd5e 	bl	80011ca <assert_failed>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003712:	2b00      	cmp	r3, #0
 8003714:	d029      	beq.n	800376a <HAL_RCC_OscConfig+0x51a>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800371a:	2380      	movs	r3, #128	; 0x80
 800371c:	019b      	lsls	r3, r3, #6
 800371e:	429a      	cmp	r2, r3
 8003720:	d023      	beq.n	800376a <HAL_RCC_OscConfig+0x51a>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003726:	2380      	movs	r3, #128	; 0x80
 8003728:	01db      	lsls	r3, r3, #7
 800372a:	429a      	cmp	r2, r3
 800372c:	d01d      	beq.n	800376a <HAL_RCC_OscConfig+0x51a>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003732:	23c0      	movs	r3, #192	; 0xc0
 8003734:	01db      	lsls	r3, r3, #7
 8003736:	429a      	cmp	r2, r3
 8003738:	d017      	beq.n	800376a <HAL_RCC_OscConfig+0x51a>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800373e:	2380      	movs	r3, #128	; 0x80
 8003740:	021b      	lsls	r3, r3, #8
 8003742:	429a      	cmp	r2, r3
 8003744:	d011      	beq.n	800376a <HAL_RCC_OscConfig+0x51a>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800374a:	23a0      	movs	r3, #160	; 0xa0
 800374c:	021b      	lsls	r3, r3, #8
 800374e:	429a      	cmp	r2, r3
 8003750:	d00b      	beq.n	800376a <HAL_RCC_OscConfig+0x51a>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003756:	23c0      	movs	r3, #192	; 0xc0
 8003758:	021b      	lsls	r3, r3, #8
 800375a:	429a      	cmp	r2, r3
 800375c:	d005      	beq.n	800376a <HAL_RCC_OscConfig+0x51a>
 800375e:	4a6b      	ldr	r2, [pc, #428]	; (800390c <HAL_RCC_OscConfig+0x6bc>)
 8003760:	4b64      	ldr	r3, [pc, #400]	; (80038f4 <HAL_RCC_OscConfig+0x6a4>)
 8003762:	0011      	movs	r1, r2
 8003764:	0018      	movs	r0, r3
 8003766:	f7fd fd30 	bl	80011ca <assert_failed>

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800376a:	4b64      	ldr	r3, [pc, #400]	; (80038fc <HAL_RCC_OscConfig+0x6ac>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	4a64      	ldr	r2, [pc, #400]	; (8003900 <HAL_RCC_OscConfig+0x6b0>)
 8003770:	4013      	ands	r3, r2
 8003772:	0019      	movs	r1, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003778:	4b60      	ldr	r3, [pc, #384]	; (80038fc <HAL_RCC_OscConfig+0x6ac>)
 800377a:	430a      	orrs	r2, r1
 800377c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800377e:	4b5f      	ldr	r3, [pc, #380]	; (80038fc <HAL_RCC_OscConfig+0x6ac>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	021b      	lsls	r3, r3, #8
 8003784:	0a19      	lsrs	r1, r3, #8
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	061a      	lsls	r2, r3, #24
 800378c:	4b5b      	ldr	r3, [pc, #364]	; (80038fc <HAL_RCC_OscConfig+0x6ac>)
 800378e:	430a      	orrs	r2, r1
 8003790:	605a      	str	r2, [r3, #4]
 8003792:	e019      	b.n	80037c8 <HAL_RCC_OscConfig+0x578>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003794:	4b59      	ldr	r3, [pc, #356]	; (80038fc <HAL_RCC_OscConfig+0x6ac>)
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	4b58      	ldr	r3, [pc, #352]	; (80038fc <HAL_RCC_OscConfig+0x6ac>)
 800379a:	495d      	ldr	r1, [pc, #372]	; (8003910 <HAL_RCC_OscConfig+0x6c0>)
 800379c:	400a      	ands	r2, r1
 800379e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a0:	f7fd ffa8 	bl	80016f4 <HAL_GetTick>
 80037a4:	0003      	movs	r3, r0
 80037a6:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80037a8:	e008      	b.n	80037bc <HAL_RCC_OscConfig+0x56c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037aa:	f7fd ffa3 	bl	80016f4 <HAL_GetTick>
 80037ae:	0002      	movs	r2, r0
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x56c>
          {
            return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e2b4      	b.n	8003d26 <HAL_RCC_OscConfig+0xad6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80037bc:	4b4f      	ldr	r3, [pc, #316]	; (80038fc <HAL_RCC_OscConfig+0x6ac>)
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	2380      	movs	r3, #128	; 0x80
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	4013      	ands	r3, r2
 80037c6:	d1f0      	bne.n	80037aa <HAL_RCC_OscConfig+0x55a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2208      	movs	r2, #8
 80037ce:	4013      	ands	r3, r2
 80037d0:	d044      	beq.n	800385c <HAL_RCC_OscConfig+0x60c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d009      	beq.n	80037ee <HAL_RCC_OscConfig+0x59e>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d005      	beq.n	80037ee <HAL_RCC_OscConfig+0x59e>
 80037e2:	4a4c      	ldr	r2, [pc, #304]	; (8003914 <HAL_RCC_OscConfig+0x6c4>)
 80037e4:	4b43      	ldr	r3, [pc, #268]	; (80038f4 <HAL_RCC_OscConfig+0x6a4>)
 80037e6:	0011      	movs	r1, r2
 80037e8:	0018      	movs	r0, r3
 80037ea:	f7fd fcee 	bl	80011ca <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d019      	beq.n	800382a <HAL_RCC_OscConfig+0x5da>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037f6:	4b41      	ldr	r3, [pc, #260]	; (80038fc <HAL_RCC_OscConfig+0x6ac>)
 80037f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037fa:	4b40      	ldr	r3, [pc, #256]	; (80038fc <HAL_RCC_OscConfig+0x6ac>)
 80037fc:	2101      	movs	r1, #1
 80037fe:	430a      	orrs	r2, r1
 8003800:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003802:	f7fd ff77 	bl	80016f4 <HAL_GetTick>
 8003806:	0003      	movs	r3, r0
 8003808:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0x5ce>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800380c:	f7fd ff72 	bl	80016f4 <HAL_GetTick>
 8003810:	0002      	movs	r2, r0
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e283      	b.n	8003d26 <HAL_RCC_OscConfig+0xad6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800381e:	4b37      	ldr	r3, [pc, #220]	; (80038fc <HAL_RCC_OscConfig+0x6ac>)
 8003820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003822:	2202      	movs	r2, #2
 8003824:	4013      	ands	r3, r2
 8003826:	d0f1      	beq.n	800380c <HAL_RCC_OscConfig+0x5bc>
 8003828:	e018      	b.n	800385c <HAL_RCC_OscConfig+0x60c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800382a:	4b34      	ldr	r3, [pc, #208]	; (80038fc <HAL_RCC_OscConfig+0x6ac>)
 800382c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800382e:	4b33      	ldr	r3, [pc, #204]	; (80038fc <HAL_RCC_OscConfig+0x6ac>)
 8003830:	2101      	movs	r1, #1
 8003832:	438a      	bics	r2, r1
 8003834:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003836:	f7fd ff5d 	bl	80016f4 <HAL_GetTick>
 800383a:	0003      	movs	r3, r0
 800383c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x602>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003840:	f7fd ff58 	bl	80016f4 <HAL_GetTick>
 8003844:	0002      	movs	r2, r0
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x602>
        {
          return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e269      	b.n	8003d26 <HAL_RCC_OscConfig+0xad6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003852:	4b2a      	ldr	r3, [pc, #168]	; (80038fc <HAL_RCC_OscConfig+0x6ac>)
 8003854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003856:	2202      	movs	r2, #2
 8003858:	4013      	ands	r3, r2
 800385a:	d1f1      	bne.n	8003840 <HAL_RCC_OscConfig+0x5f0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2204      	movs	r2, #4
 8003862:	4013      	ands	r3, r2
 8003864:	d100      	bne.n	8003868 <HAL_RCC_OscConfig+0x618>
 8003866:	e0db      	b.n	8003a20 <HAL_RCC_OscConfig+0x7d0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003868:	2327      	movs	r3, #39	; 0x27
 800386a:	18fb      	adds	r3, r7, r3
 800386c:	2200      	movs	r2, #0
 800386e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d011      	beq.n	800389c <HAL_RCC_OscConfig+0x64c>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	2380      	movs	r3, #128	; 0x80
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	429a      	cmp	r2, r3
 8003882:	d00b      	beq.n	800389c <HAL_RCC_OscConfig+0x64c>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	23a0      	movs	r3, #160	; 0xa0
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	429a      	cmp	r2, r3
 800388e:	d005      	beq.n	800389c <HAL_RCC_OscConfig+0x64c>
 8003890:	4a21      	ldr	r2, [pc, #132]	; (8003918 <HAL_RCC_OscConfig+0x6c8>)
 8003892:	4b18      	ldr	r3, [pc, #96]	; (80038f4 <HAL_RCC_OscConfig+0x6a4>)
 8003894:	0011      	movs	r1, r2
 8003896:	0018      	movs	r0, r3
 8003898:	f7fd fc97 	bl	80011ca <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800389c:	4b17      	ldr	r3, [pc, #92]	; (80038fc <HAL_RCC_OscConfig+0x6ac>)
 800389e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038a0:	2380      	movs	r3, #128	; 0x80
 80038a2:	055b      	lsls	r3, r3, #21
 80038a4:	4013      	ands	r3, r2
 80038a6:	d10a      	bne.n	80038be <HAL_RCC_OscConfig+0x66e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038a8:	4b14      	ldr	r3, [pc, #80]	; (80038fc <HAL_RCC_OscConfig+0x6ac>)
 80038aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038ac:	4b13      	ldr	r3, [pc, #76]	; (80038fc <HAL_RCC_OscConfig+0x6ac>)
 80038ae:	2180      	movs	r1, #128	; 0x80
 80038b0:	0549      	lsls	r1, r1, #21
 80038b2:	430a      	orrs	r2, r1
 80038b4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80038b6:	2327      	movs	r3, #39	; 0x27
 80038b8:	18fb      	adds	r3, r7, r3
 80038ba:	2201      	movs	r2, #1
 80038bc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038be:	4b17      	ldr	r3, [pc, #92]	; (800391c <HAL_RCC_OscConfig+0x6cc>)
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	2380      	movs	r3, #128	; 0x80
 80038c4:	005b      	lsls	r3, r3, #1
 80038c6:	4013      	ands	r3, r2
 80038c8:	d130      	bne.n	800392c <HAL_RCC_OscConfig+0x6dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038ca:	4b14      	ldr	r3, [pc, #80]	; (800391c <HAL_RCC_OscConfig+0x6cc>)
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	4b13      	ldr	r3, [pc, #76]	; (800391c <HAL_RCC_OscConfig+0x6cc>)
 80038d0:	2180      	movs	r1, #128	; 0x80
 80038d2:	0049      	lsls	r1, r1, #1
 80038d4:	430a      	orrs	r2, r1
 80038d6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038d8:	f7fd ff0c 	bl	80016f4 <HAL_GetTick>
 80038dc:	0003      	movs	r3, r0
 80038de:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e0:	e01e      	b.n	8003920 <HAL_RCC_OscConfig+0x6d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038e2:	f7fd ff07 	bl	80016f4 <HAL_GetTick>
 80038e6:	0002      	movs	r2, r0
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b64      	cmp	r3, #100	; 0x64
 80038ee:	d917      	bls.n	8003920 <HAL_RCC_OscConfig+0x6d0>
        {
          return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e218      	b.n	8003d26 <HAL_RCC_OscConfig+0xad6>
 80038f4:	080068e0 	.word	0x080068e0
 80038f8:	00000201 	.word	0x00000201
 80038fc:	40021000 	.word	0x40021000
 8003900:	ffff1fff 	.word	0xffff1fff
 8003904:	08006a04 	.word	0x08006a04
 8003908:	20000030 	.word	0x20000030
 800390c:	0000022d 	.word	0x0000022d
 8003910:	fffffeff 	.word	0xfffffeff
 8003914:	0000024b 	.word	0x0000024b
 8003918:	00000277 	.word	0x00000277
 800391c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003920:	4bca      	ldr	r3, [pc, #808]	; (8003c4c <HAL_RCC_OscConfig+0x9fc>)
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	2380      	movs	r3, #128	; 0x80
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	4013      	ands	r3, r2
 800392a:	d0da      	beq.n	80038e2 <HAL_RCC_OscConfig+0x692>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689a      	ldr	r2, [r3, #8]
 8003930:	2380      	movs	r3, #128	; 0x80
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	429a      	cmp	r2, r3
 8003936:	d107      	bne.n	8003948 <HAL_RCC_OscConfig+0x6f8>
 8003938:	4bc5      	ldr	r3, [pc, #788]	; (8003c50 <HAL_RCC_OscConfig+0xa00>)
 800393a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800393c:	4bc4      	ldr	r3, [pc, #784]	; (8003c50 <HAL_RCC_OscConfig+0xa00>)
 800393e:	2180      	movs	r1, #128	; 0x80
 8003940:	0049      	lsls	r1, r1, #1
 8003942:	430a      	orrs	r2, r1
 8003944:	651a      	str	r2, [r3, #80]	; 0x50
 8003946:	e031      	b.n	80039ac <HAL_RCC_OscConfig+0x75c>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10c      	bne.n	800396a <HAL_RCC_OscConfig+0x71a>
 8003950:	4bbf      	ldr	r3, [pc, #764]	; (8003c50 <HAL_RCC_OscConfig+0xa00>)
 8003952:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003954:	4bbe      	ldr	r3, [pc, #760]	; (8003c50 <HAL_RCC_OscConfig+0xa00>)
 8003956:	49bf      	ldr	r1, [pc, #764]	; (8003c54 <HAL_RCC_OscConfig+0xa04>)
 8003958:	400a      	ands	r2, r1
 800395a:	651a      	str	r2, [r3, #80]	; 0x50
 800395c:	4bbc      	ldr	r3, [pc, #752]	; (8003c50 <HAL_RCC_OscConfig+0xa00>)
 800395e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003960:	4bbb      	ldr	r3, [pc, #748]	; (8003c50 <HAL_RCC_OscConfig+0xa00>)
 8003962:	49bd      	ldr	r1, [pc, #756]	; (8003c58 <HAL_RCC_OscConfig+0xa08>)
 8003964:	400a      	ands	r2, r1
 8003966:	651a      	str	r2, [r3, #80]	; 0x50
 8003968:	e020      	b.n	80039ac <HAL_RCC_OscConfig+0x75c>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	689a      	ldr	r2, [r3, #8]
 800396e:	23a0      	movs	r3, #160	; 0xa0
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	429a      	cmp	r2, r3
 8003974:	d10e      	bne.n	8003994 <HAL_RCC_OscConfig+0x744>
 8003976:	4bb6      	ldr	r3, [pc, #728]	; (8003c50 <HAL_RCC_OscConfig+0xa00>)
 8003978:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800397a:	4bb5      	ldr	r3, [pc, #724]	; (8003c50 <HAL_RCC_OscConfig+0xa00>)
 800397c:	2180      	movs	r1, #128	; 0x80
 800397e:	00c9      	lsls	r1, r1, #3
 8003980:	430a      	orrs	r2, r1
 8003982:	651a      	str	r2, [r3, #80]	; 0x50
 8003984:	4bb2      	ldr	r3, [pc, #712]	; (8003c50 <HAL_RCC_OscConfig+0xa00>)
 8003986:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003988:	4bb1      	ldr	r3, [pc, #708]	; (8003c50 <HAL_RCC_OscConfig+0xa00>)
 800398a:	2180      	movs	r1, #128	; 0x80
 800398c:	0049      	lsls	r1, r1, #1
 800398e:	430a      	orrs	r2, r1
 8003990:	651a      	str	r2, [r3, #80]	; 0x50
 8003992:	e00b      	b.n	80039ac <HAL_RCC_OscConfig+0x75c>
 8003994:	4bae      	ldr	r3, [pc, #696]	; (8003c50 <HAL_RCC_OscConfig+0xa00>)
 8003996:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003998:	4bad      	ldr	r3, [pc, #692]	; (8003c50 <HAL_RCC_OscConfig+0xa00>)
 800399a:	49ae      	ldr	r1, [pc, #696]	; (8003c54 <HAL_RCC_OscConfig+0xa04>)
 800399c:	400a      	ands	r2, r1
 800399e:	651a      	str	r2, [r3, #80]	; 0x50
 80039a0:	4bab      	ldr	r3, [pc, #684]	; (8003c50 <HAL_RCC_OscConfig+0xa00>)
 80039a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039a4:	4baa      	ldr	r3, [pc, #680]	; (8003c50 <HAL_RCC_OscConfig+0xa00>)
 80039a6:	49ac      	ldr	r1, [pc, #688]	; (8003c58 <HAL_RCC_OscConfig+0xa08>)
 80039a8:	400a      	ands	r2, r1
 80039aa:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d015      	beq.n	80039e0 <HAL_RCC_OscConfig+0x790>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039b4:	f7fd fe9e 	bl	80016f4 <HAL_GetTick>
 80039b8:	0003      	movs	r3, r0
 80039ba:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039bc:	e009      	b.n	80039d2 <HAL_RCC_OscConfig+0x782>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039be:	f7fd fe99 	bl	80016f4 <HAL_GetTick>
 80039c2:	0002      	movs	r2, r0
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	4aa4      	ldr	r2, [pc, #656]	; (8003c5c <HAL_RCC_OscConfig+0xa0c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0x782>
        {
          return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e1a9      	b.n	8003d26 <HAL_RCC_OscConfig+0xad6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039d2:	4b9f      	ldr	r3, [pc, #636]	; (8003c50 <HAL_RCC_OscConfig+0xa00>)
 80039d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039d6:	2380      	movs	r3, #128	; 0x80
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4013      	ands	r3, r2
 80039dc:	d0ef      	beq.n	80039be <HAL_RCC_OscConfig+0x76e>
 80039de:	e014      	b.n	8003a0a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039e0:	f7fd fe88 	bl	80016f4 <HAL_GetTick>
 80039e4:	0003      	movs	r3, r0
 80039e6:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80039e8:	e009      	b.n	80039fe <HAL_RCC_OscConfig+0x7ae>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039ea:	f7fd fe83 	bl	80016f4 <HAL_GetTick>
 80039ee:	0002      	movs	r2, r0
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	4a99      	ldr	r2, [pc, #612]	; (8003c5c <HAL_RCC_OscConfig+0xa0c>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0x7ae>
        {
          return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e193      	b.n	8003d26 <HAL_RCC_OscConfig+0xad6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80039fe:	4b94      	ldr	r3, [pc, #592]	; (8003c50 <HAL_RCC_OscConfig+0xa00>)
 8003a00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a02:	2380      	movs	r3, #128	; 0x80
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4013      	ands	r3, r2
 8003a08:	d1ef      	bne.n	80039ea <HAL_RCC_OscConfig+0x79a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a0a:	2327      	movs	r3, #39	; 0x27
 8003a0c:	18fb      	adds	r3, r7, r3
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d105      	bne.n	8003a20 <HAL_RCC_OscConfig+0x7d0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a14:	4b8e      	ldr	r3, [pc, #568]	; (8003c50 <HAL_RCC_OscConfig+0xa00>)
 8003a16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a18:	4b8d      	ldr	r3, [pc, #564]	; (8003c50 <HAL_RCC_OscConfig+0xa00>)
 8003a1a:	4991      	ldr	r1, [pc, #580]	; (8003c60 <HAL_RCC_OscConfig+0xa10>)
 8003a1c:	400a      	ands	r2, r1
 8003a1e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2220      	movs	r2, #32
 8003a26:	4013      	ands	r3, r2
 8003a28:	d057      	beq.n	8003ada <HAL_RCC_OscConfig+0x88a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d009      	beq.n	8003a46 <HAL_RCC_OscConfig+0x7f6>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d005      	beq.n	8003a46 <HAL_RCC_OscConfig+0x7f6>
 8003a3a:	4a8a      	ldr	r2, [pc, #552]	; (8003c64 <HAL_RCC_OscConfig+0xa14>)
 8003a3c:	4b8a      	ldr	r3, [pc, #552]	; (8003c68 <HAL_RCC_OscConfig+0xa18>)
 8003a3e:	0011      	movs	r1, r2
 8003a40:	0018      	movs	r0, r3
 8003a42:	f7fd fbc2 	bl	80011ca <assert_failed>

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d026      	beq.n	8003a9c <HAL_RCC_OscConfig+0x84c>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003a4e:	4b80      	ldr	r3, [pc, #512]	; (8003c50 <HAL_RCC_OscConfig+0xa00>)
 8003a50:	689a      	ldr	r2, [r3, #8]
 8003a52:	4b7f      	ldr	r3, [pc, #508]	; (8003c50 <HAL_RCC_OscConfig+0xa00>)
 8003a54:	2101      	movs	r1, #1
 8003a56:	430a      	orrs	r2, r1
 8003a58:	609a      	str	r2, [r3, #8]
 8003a5a:	4b7d      	ldr	r3, [pc, #500]	; (8003c50 <HAL_RCC_OscConfig+0xa00>)
 8003a5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a5e:	4b7c      	ldr	r3, [pc, #496]	; (8003c50 <HAL_RCC_OscConfig+0xa00>)
 8003a60:	2101      	movs	r1, #1
 8003a62:	430a      	orrs	r2, r1
 8003a64:	635a      	str	r2, [r3, #52]	; 0x34
 8003a66:	4b81      	ldr	r3, [pc, #516]	; (8003c6c <HAL_RCC_OscConfig+0xa1c>)
 8003a68:	6a1a      	ldr	r2, [r3, #32]
 8003a6a:	4b80      	ldr	r3, [pc, #512]	; (8003c6c <HAL_RCC_OscConfig+0xa1c>)
 8003a6c:	2180      	movs	r1, #128	; 0x80
 8003a6e:	0189      	lsls	r1, r1, #6
 8003a70:	430a      	orrs	r2, r1
 8003a72:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a74:	f7fd fe3e 	bl	80016f4 <HAL_GetTick>
 8003a78:	0003      	movs	r3, r0
 8003a7a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a7c:	e008      	b.n	8003a90 <HAL_RCC_OscConfig+0x840>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a7e:	f7fd fe39 	bl	80016f4 <HAL_GetTick>
 8003a82:	0002      	movs	r2, r0
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCC_OscConfig+0x840>
          {
            return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e14a      	b.n	8003d26 <HAL_RCC_OscConfig+0xad6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a90:	4b6f      	ldr	r3, [pc, #444]	; (8003c50 <HAL_RCC_OscConfig+0xa00>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	2202      	movs	r2, #2
 8003a96:	4013      	ands	r3, r2
 8003a98:	d0f1      	beq.n	8003a7e <HAL_RCC_OscConfig+0x82e>
 8003a9a:	e01e      	b.n	8003ada <HAL_RCC_OscConfig+0x88a>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003a9c:	4b6c      	ldr	r3, [pc, #432]	; (8003c50 <HAL_RCC_OscConfig+0xa00>)
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	4b6b      	ldr	r3, [pc, #428]	; (8003c50 <HAL_RCC_OscConfig+0xa00>)
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	438a      	bics	r2, r1
 8003aa6:	609a      	str	r2, [r3, #8]
 8003aa8:	4b70      	ldr	r3, [pc, #448]	; (8003c6c <HAL_RCC_OscConfig+0xa1c>)
 8003aaa:	6a1a      	ldr	r2, [r3, #32]
 8003aac:	4b6f      	ldr	r3, [pc, #444]	; (8003c6c <HAL_RCC_OscConfig+0xa1c>)
 8003aae:	4970      	ldr	r1, [pc, #448]	; (8003c70 <HAL_RCC_OscConfig+0xa20>)
 8003ab0:	400a      	ands	r2, r1
 8003ab2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab4:	f7fd fe1e 	bl	80016f4 <HAL_GetTick>
 8003ab8:	0003      	movs	r3, r0
 8003aba:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003abc:	e008      	b.n	8003ad0 <HAL_RCC_OscConfig+0x880>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003abe:	f7fd fe19 	bl	80016f4 <HAL_GetTick>
 8003ac2:	0002      	movs	r2, r0
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCC_OscConfig+0x880>
          {
            return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e12a      	b.n	8003d26 <HAL_RCC_OscConfig+0xad6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003ad0:	4b5f      	ldr	r3, [pc, #380]	; (8003c50 <HAL_RCC_OscConfig+0xa00>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	2202      	movs	r2, #2
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	d1f1      	bne.n	8003abe <HAL_RCC_OscConfig+0x86e>
  }
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00e      	beq.n	8003b00 <HAL_RCC_OscConfig+0x8b0>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d00a      	beq.n	8003b00 <HAL_RCC_OscConfig+0x8b0>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d006      	beq.n	8003b00 <HAL_RCC_OscConfig+0x8b0>
 8003af2:	23ba      	movs	r3, #186	; 0xba
 8003af4:	009a      	lsls	r2, r3, #2
 8003af6:	4b5c      	ldr	r3, [pc, #368]	; (8003c68 <HAL_RCC_OscConfig+0xa18>)
 8003af8:	0011      	movs	r1, r2
 8003afa:	0018      	movs	r0, r3
 8003afc:	f7fd fb65 	bl	80011ca <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d100      	bne.n	8003b0a <HAL_RCC_OscConfig+0x8ba>
 8003b08:	e10c      	b.n	8003d24 <HAL_RCC_OscConfig+0xad4>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	2b0c      	cmp	r3, #12
 8003b0e:	d100      	bne.n	8003b12 <HAL_RCC_OscConfig+0x8c2>
 8003b10:	e0e5      	b.n	8003cde <HAL_RCC_OscConfig+0xa8e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d000      	beq.n	8003b1c <HAL_RCC_OscConfig+0x8cc>
 8003b1a:	e0c5      	b.n	8003ca8 <HAL_RCC_OscConfig+0xa58>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00b      	beq.n	8003b3c <HAL_RCC_OscConfig+0x8ec>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b28:	2380      	movs	r3, #128	; 0x80
 8003b2a:	025b      	lsls	r3, r3, #9
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d005      	beq.n	8003b3c <HAL_RCC_OscConfig+0x8ec>
 8003b30:	4a50      	ldr	r2, [pc, #320]	; (8003c74 <HAL_RCC_OscConfig+0xa24>)
 8003b32:	4b4d      	ldr	r3, [pc, #308]	; (8003c68 <HAL_RCC_OscConfig+0xa18>)
 8003b34:	0011      	movs	r1, r2
 8003b36:	0018      	movs	r0, r3
 8003b38:	f7fd fb47 	bl	80011ca <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d035      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x960>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b48:	2380      	movs	r3, #128	; 0x80
 8003b4a:	02db      	lsls	r3, r3, #11
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d02f      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x960>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b54:	2380      	movs	r3, #128	; 0x80
 8003b56:	031b      	lsls	r3, r3, #12
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d029      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x960>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b60:	23c0      	movs	r3, #192	; 0xc0
 8003b62:	031b      	lsls	r3, r3, #12
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d023      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x960>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b6c:	2380      	movs	r3, #128	; 0x80
 8003b6e:	035b      	lsls	r3, r3, #13
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d01d      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x960>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b78:	23a0      	movs	r3, #160	; 0xa0
 8003b7a:	035b      	lsls	r3, r3, #13
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d017      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x960>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b84:	23c0      	movs	r3, #192	; 0xc0
 8003b86:	035b      	lsls	r3, r3, #13
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d011      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x960>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b90:	23e0      	movs	r3, #224	; 0xe0
 8003b92:	035b      	lsls	r3, r3, #13
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d00b      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x960>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b9c:	2380      	movs	r3, #128	; 0x80
 8003b9e:	039b      	lsls	r3, r3, #14
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d005      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x960>
 8003ba4:	4a34      	ldr	r2, [pc, #208]	; (8003c78 <HAL_RCC_OscConfig+0xa28>)
 8003ba6:	4b30      	ldr	r3, [pc, #192]	; (8003c68 <HAL_RCC_OscConfig+0xa18>)
 8003ba8:	0011      	movs	r1, r2
 8003baa:	0018      	movs	r0, r3
 8003bac:	f7fd fb0d 	bl	80011ca <assert_failed>
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bb4:	2380      	movs	r3, #128	; 0x80
 8003bb6:	03db      	lsls	r3, r3, #15
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d011      	beq.n	8003be0 <HAL_RCC_OscConfig+0x990>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bc0:	2380      	movs	r3, #128	; 0x80
 8003bc2:	041b      	lsls	r3, r3, #16
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d00b      	beq.n	8003be0 <HAL_RCC_OscConfig+0x990>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bcc:	23c0      	movs	r3, #192	; 0xc0
 8003bce:	041b      	lsls	r3, r3, #16
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d005      	beq.n	8003be0 <HAL_RCC_OscConfig+0x990>
 8003bd4:	4a29      	ldr	r2, [pc, #164]	; (8003c7c <HAL_RCC_OscConfig+0xa2c>)
 8003bd6:	4b24      	ldr	r3, [pc, #144]	; (8003c68 <HAL_RCC_OscConfig+0xa18>)
 8003bd8:	0011      	movs	r1, r2
 8003bda:	0018      	movs	r0, r3
 8003bdc:	f7fd faf5 	bl	80011ca <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003be0:	4b1b      	ldr	r3, [pc, #108]	; (8003c50 <HAL_RCC_OscConfig+0xa00>)
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	4b1a      	ldr	r3, [pc, #104]	; (8003c50 <HAL_RCC_OscConfig+0xa00>)
 8003be6:	4926      	ldr	r1, [pc, #152]	; (8003c80 <HAL_RCC_OscConfig+0xa30>)
 8003be8:	400a      	ands	r2, r1
 8003bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bec:	f7fd fd82 	bl	80016f4 <HAL_GetTick>
 8003bf0:	0003      	movs	r3, r0
 8003bf2:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003bf4:	e008      	b.n	8003c08 <HAL_RCC_OscConfig+0x9b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bf6:	f7fd fd7d 	bl	80016f4 <HAL_GetTick>
 8003bfa:	0002      	movs	r2, r0
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d901      	bls.n	8003c08 <HAL_RCC_OscConfig+0x9b8>
          {
            return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e08e      	b.n	8003d26 <HAL_RCC_OscConfig+0xad6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003c08:	4b11      	ldr	r3, [pc, #68]	; (8003c50 <HAL_RCC_OscConfig+0xa00>)
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	2380      	movs	r3, #128	; 0x80
 8003c0e:	049b      	lsls	r3, r3, #18
 8003c10:	4013      	ands	r3, r2
 8003c12:	d1f0      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x9a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c14:	4b0e      	ldr	r3, [pc, #56]	; (8003c50 <HAL_RCC_OscConfig+0xa00>)
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	4a1a      	ldr	r2, [pc, #104]	; (8003c84 <HAL_RCC_OscConfig+0xa34>)
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	0019      	movs	r1, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c2c:	431a      	orrs	r2, r3
 8003c2e:	4b08      	ldr	r3, [pc, #32]	; (8003c50 <HAL_RCC_OscConfig+0xa00>)
 8003c30:	430a      	orrs	r2, r1
 8003c32:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c34:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <HAL_RCC_OscConfig+0xa00>)
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	4b05      	ldr	r3, [pc, #20]	; (8003c50 <HAL_RCC_OscConfig+0xa00>)
 8003c3a:	2180      	movs	r1, #128	; 0x80
 8003c3c:	0449      	lsls	r1, r1, #17
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c42:	f7fd fd57 	bl	80016f4 <HAL_GetTick>
 8003c46:	0003      	movs	r3, r0
 8003c48:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003c4a:	e026      	b.n	8003c9a <HAL_RCC_OscConfig+0xa4a>
 8003c4c:	40007000 	.word	0x40007000
 8003c50:	40021000 	.word	0x40021000
 8003c54:	fffffeff 	.word	0xfffffeff
 8003c58:	fffffbff 	.word	0xfffffbff
 8003c5c:	00001388 	.word	0x00001388
 8003c60:	efffffff 	.word	0xefffffff
 8003c64:	000002be 	.word	0x000002be
 8003c68:	080068e0 	.word	0x080068e0
 8003c6c:	40010000 	.word	0x40010000
 8003c70:	ffffdfff 	.word	0xffffdfff
 8003c74:	000002f1 	.word	0x000002f1
 8003c78:	000002f2 	.word	0x000002f2
 8003c7c:	000002f3 	.word	0x000002f3
 8003c80:	feffffff 	.word	0xfeffffff
 8003c84:	ff02ffff 	.word	0xff02ffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c88:	f7fd fd34 	bl	80016f4 <HAL_GetTick>
 8003c8c:	0002      	movs	r2, r0
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0xa4a>
          {
            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e045      	b.n	8003d26 <HAL_RCC_OscConfig+0xad6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003c9a:	4b25      	ldr	r3, [pc, #148]	; (8003d30 <HAL_RCC_OscConfig+0xae0>)
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	2380      	movs	r3, #128	; 0x80
 8003ca0:	049b      	lsls	r3, r3, #18
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	d0f0      	beq.n	8003c88 <HAL_RCC_OscConfig+0xa38>
 8003ca6:	e03d      	b.n	8003d24 <HAL_RCC_OscConfig+0xad4>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ca8:	4b21      	ldr	r3, [pc, #132]	; (8003d30 <HAL_RCC_OscConfig+0xae0>)
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	4b20      	ldr	r3, [pc, #128]	; (8003d30 <HAL_RCC_OscConfig+0xae0>)
 8003cae:	4921      	ldr	r1, [pc, #132]	; (8003d34 <HAL_RCC_OscConfig+0xae4>)
 8003cb0:	400a      	ands	r2, r1
 8003cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb4:	f7fd fd1e 	bl	80016f4 <HAL_GetTick>
 8003cb8:	0003      	movs	r3, r0
 8003cba:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0xa80>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cbe:	f7fd fd19 	bl	80016f4 <HAL_GetTick>
 8003cc2:	0002      	movs	r2, r0
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0xa80>
          {
            return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e02a      	b.n	8003d26 <HAL_RCC_OscConfig+0xad6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003cd0:	4b17      	ldr	r3, [pc, #92]	; (8003d30 <HAL_RCC_OscConfig+0xae0>)
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	2380      	movs	r3, #128	; 0x80
 8003cd6:	049b      	lsls	r3, r3, #18
 8003cd8:	4013      	ands	r3, r2
 8003cda:	d1f0      	bne.n	8003cbe <HAL_RCC_OscConfig+0xa6e>
 8003cdc:	e022      	b.n	8003d24 <HAL_RCC_OscConfig+0xad4>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d101      	bne.n	8003cea <HAL_RCC_OscConfig+0xa9a>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e01d      	b.n	8003d26 <HAL_RCC_OscConfig+0xad6>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003cea:	4b11      	ldr	r3, [pc, #68]	; (8003d30 <HAL_RCC_OscConfig+0xae0>)
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf0:	69fa      	ldr	r2, [r7, #28]
 8003cf2:	2380      	movs	r3, #128	; 0x80
 8003cf4:	025b      	lsls	r3, r3, #9
 8003cf6:	401a      	ands	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d10f      	bne.n	8003d20 <HAL_RCC_OscConfig+0xad0>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003d00:	69fa      	ldr	r2, [r7, #28]
 8003d02:	23f0      	movs	r3, #240	; 0xf0
 8003d04:	039b      	lsls	r3, r3, #14
 8003d06:	401a      	ands	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d107      	bne.n	8003d20 <HAL_RCC_OscConfig+0xad0>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003d10:	69fa      	ldr	r2, [r7, #28]
 8003d12:	23c0      	movs	r3, #192	; 0xc0
 8003d14:	041b      	lsls	r3, r3, #16
 8003d16:	401a      	ands	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d001      	beq.n	8003d24 <HAL_RCC_OscConfig+0xad4>
        {
          return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e000      	b.n	8003d26 <HAL_RCC_OscConfig+0xad6>
        }
      }
    }
  }

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	0018      	movs	r0, r3
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	b00a      	add	sp, #40	; 0x28
 8003d2c:	bdb0      	pop	{r4, r5, r7, pc}
 8003d2e:	46c0      	nop			; (mov r8, r8)
 8003d30:	40021000 	.word	0x40021000
 8003d34:	feffffff 	.word	0xfeffffff

08003d38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d38:	b5b0      	push	{r4, r5, r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e1c8      	b.n	80040de <HAL_RCC_ClockConfig+0x3a6>
  }

  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2201      	movs	r2, #1
 8003d52:	4013      	ands	r3, r2
 8003d54:	d114      	bne.n	8003d80 <HAL_RCC_ClockConfig+0x48>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	d10f      	bne.n	8003d80 <HAL_RCC_ClockConfig+0x48>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2204      	movs	r2, #4
 8003d66:	4013      	ands	r3, r2
 8003d68:	d10a      	bne.n	8003d80 <HAL_RCC_ClockConfig+0x48>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2208      	movs	r2, #8
 8003d70:	4013      	ands	r3, r2
 8003d72:	d105      	bne.n	8003d80 <HAL_RCC_ClockConfig+0x48>
 8003d74:	4a91      	ldr	r2, [pc, #580]	; (8003fbc <HAL_RCC_ClockConfig+0x284>)
 8003d76:	4b92      	ldr	r3, [pc, #584]	; (8003fc0 <HAL_RCC_ClockConfig+0x288>)
 8003d78:	0011      	movs	r1, r2
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	f7fd fa25 	bl	80011ca <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d008      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x60>
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d005      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x60>
 8003d8c:	4a8d      	ldr	r2, [pc, #564]	; (8003fc4 <HAL_RCC_ClockConfig+0x28c>)
 8003d8e:	4b8c      	ldr	r3, [pc, #560]	; (8003fc0 <HAL_RCC_ClockConfig+0x288>)
 8003d90:	0011      	movs	r1, r2
 8003d92:	0018      	movs	r0, r3
 8003d94:	f7fd fa19 	bl	80011ca <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d98:	4b8b      	ldr	r3, [pc, #556]	; (8003fc8 <HAL_RCC_ClockConfig+0x290>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	4013      	ands	r3, r2
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d911      	bls.n	8003dca <HAL_RCC_ClockConfig+0x92>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003da6:	4b88      	ldr	r3, [pc, #544]	; (8003fc8 <HAL_RCC_ClockConfig+0x290>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2201      	movs	r2, #1
 8003dac:	4393      	bics	r3, r2
 8003dae:	0019      	movs	r1, r3
 8003db0:	4b85      	ldr	r3, [pc, #532]	; (8003fc8 <HAL_RCC_ClockConfig+0x290>)
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003db8:	4b83      	ldr	r3, [pc, #524]	; (8003fc8 <HAL_RCC_ClockConfig+0x290>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d001      	beq.n	8003dca <HAL_RCC_ClockConfig+0x92>
    {
      return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e189      	b.n	80040de <HAL_RCC_ClockConfig+0x3a6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2202      	movs	r2, #2
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	d033      	beq.n	8003e3c <HAL_RCC_ClockConfig+0x104>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d025      	beq.n	8003e28 <HAL_RCC_ClockConfig+0xf0>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	2b80      	cmp	r3, #128	; 0x80
 8003de2:	d021      	beq.n	8003e28 <HAL_RCC_ClockConfig+0xf0>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	2b90      	cmp	r3, #144	; 0x90
 8003dea:	d01d      	beq.n	8003e28 <HAL_RCC_ClockConfig+0xf0>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	2ba0      	cmp	r3, #160	; 0xa0
 8003df2:	d019      	beq.n	8003e28 <HAL_RCC_ClockConfig+0xf0>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	2bb0      	cmp	r3, #176	; 0xb0
 8003dfa:	d015      	beq.n	8003e28 <HAL_RCC_ClockConfig+0xf0>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	2bc0      	cmp	r3, #192	; 0xc0
 8003e02:	d011      	beq.n	8003e28 <HAL_RCC_ClockConfig+0xf0>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	2bd0      	cmp	r3, #208	; 0xd0
 8003e0a:	d00d      	beq.n	8003e28 <HAL_RCC_ClockConfig+0xf0>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	2be0      	cmp	r3, #224	; 0xe0
 8003e12:	d009      	beq.n	8003e28 <HAL_RCC_ClockConfig+0xf0>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	2bf0      	cmp	r3, #240	; 0xf0
 8003e1a:	d005      	beq.n	8003e28 <HAL_RCC_ClockConfig+0xf0>
 8003e1c:	4a6b      	ldr	r2, [pc, #428]	; (8003fcc <HAL_RCC_ClockConfig+0x294>)
 8003e1e:	4b68      	ldr	r3, [pc, #416]	; (8003fc0 <HAL_RCC_ClockConfig+0x288>)
 8003e20:	0011      	movs	r1, r2
 8003e22:	0018      	movs	r0, r3
 8003e24:	f7fd f9d1 	bl	80011ca <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e28:	4b69      	ldr	r3, [pc, #420]	; (8003fd0 <HAL_RCC_ClockConfig+0x298>)
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	22f0      	movs	r2, #240	; 0xf0
 8003e2e:	4393      	bics	r3, r2
 8003e30:	0019      	movs	r1, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	689a      	ldr	r2, [r3, #8]
 8003e36:	4b66      	ldr	r3, [pc, #408]	; (8003fd0 <HAL_RCC_ClockConfig+0x298>)
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2201      	movs	r2, #1
 8003e42:	4013      	ands	r3, r2
 8003e44:	d100      	bne.n	8003e48 <HAL_RCC_ClockConfig+0x110>
 8003e46:	e09f      	b.n	8003f88 <HAL_RCC_ClockConfig+0x250>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d011      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x13c>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d00d      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x13c>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d009      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x13c>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	2b03      	cmp	r3, #3
 8003e66:	d005      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x13c>
 8003e68:	4a5a      	ldr	r2, [pc, #360]	; (8003fd4 <HAL_RCC_ClockConfig+0x29c>)
 8003e6a:	4b55      	ldr	r3, [pc, #340]	; (8003fc0 <HAL_RCC_ClockConfig+0x288>)
 8003e6c:	0011      	movs	r1, r2
 8003e6e:	0018      	movs	r0, r3
 8003e70:	f7fd f9ab 	bl	80011ca <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d107      	bne.n	8003e8c <HAL_RCC_ClockConfig+0x154>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e7c:	4b54      	ldr	r3, [pc, #336]	; (8003fd0 <HAL_RCC_ClockConfig+0x298>)
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	2380      	movs	r3, #128	; 0x80
 8003e82:	029b      	lsls	r3, r3, #10
 8003e84:	4013      	ands	r3, r2
 8003e86:	d120      	bne.n	8003eca <HAL_RCC_ClockConfig+0x192>
      {
        return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e128      	b.n	80040de <HAL_RCC_ClockConfig+0x3a6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	2b03      	cmp	r3, #3
 8003e92:	d107      	bne.n	8003ea4 <HAL_RCC_ClockConfig+0x16c>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e94:	4b4e      	ldr	r3, [pc, #312]	; (8003fd0 <HAL_RCC_ClockConfig+0x298>)
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	2380      	movs	r3, #128	; 0x80
 8003e9a:	049b      	lsls	r3, r3, #18
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	d114      	bne.n	8003eca <HAL_RCC_ClockConfig+0x192>
      {
        return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e11c      	b.n	80040de <HAL_RCC_ClockConfig+0x3a6>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d106      	bne.n	8003eba <HAL_RCC_ClockConfig+0x182>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003eac:	4b48      	ldr	r3, [pc, #288]	; (8003fd0 <HAL_RCC_ClockConfig+0x298>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2204      	movs	r2, #4
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	d109      	bne.n	8003eca <HAL_RCC_ClockConfig+0x192>
      {
        return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e111      	b.n	80040de <HAL_RCC_ClockConfig+0x3a6>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003eba:	4b45      	ldr	r3, [pc, #276]	; (8003fd0 <HAL_RCC_ClockConfig+0x298>)
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	2380      	movs	r3, #128	; 0x80
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	d101      	bne.n	8003eca <HAL_RCC_ClockConfig+0x192>
      {
        return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e109      	b.n	80040de <HAL_RCC_ClockConfig+0x3a6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eca:	4b41      	ldr	r3, [pc, #260]	; (8003fd0 <HAL_RCC_ClockConfig+0x298>)
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	2203      	movs	r2, #3
 8003ed0:	4393      	bics	r3, r2
 8003ed2:	0019      	movs	r1, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685a      	ldr	r2, [r3, #4]
 8003ed8:	4b3d      	ldr	r3, [pc, #244]	; (8003fd0 <HAL_RCC_ClockConfig+0x298>)
 8003eda:	430a      	orrs	r2, r1
 8003edc:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ede:	f7fd fc09 	bl	80016f4 <HAL_GetTick>
 8003ee2:	0003      	movs	r3, r0
 8003ee4:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d111      	bne.n	8003f12 <HAL_RCC_ClockConfig+0x1da>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003eee:	e009      	b.n	8003f04 <HAL_RCC_ClockConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ef0:	f7fd fc00 	bl	80016f4 <HAL_GetTick>
 8003ef4:	0002      	movs	r2, r0
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	4a37      	ldr	r2, [pc, #220]	; (8003fd8 <HAL_RCC_ClockConfig+0x2a0>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d901      	bls.n	8003f04 <HAL_RCC_ClockConfig+0x1cc>
        {
          return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e0ec      	b.n	80040de <HAL_RCC_ClockConfig+0x3a6>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f04:	4b32      	ldr	r3, [pc, #200]	; (8003fd0 <HAL_RCC_ClockConfig+0x298>)
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	220c      	movs	r2, #12
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	2b08      	cmp	r3, #8
 8003f0e:	d1ef      	bne.n	8003ef0 <HAL_RCC_ClockConfig+0x1b8>
 8003f10:	e03a      	b.n	8003f88 <HAL_RCC_ClockConfig+0x250>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	2b03      	cmp	r3, #3
 8003f18:	d111      	bne.n	8003f3e <HAL_RCC_ClockConfig+0x206>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f1a:	e009      	b.n	8003f30 <HAL_RCC_ClockConfig+0x1f8>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f1c:	f7fd fbea 	bl	80016f4 <HAL_GetTick>
 8003f20:	0002      	movs	r2, r0
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	4a2c      	ldr	r2, [pc, #176]	; (8003fd8 <HAL_RCC_ClockConfig+0x2a0>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_ClockConfig+0x1f8>
        {
          return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e0d6      	b.n	80040de <HAL_RCC_ClockConfig+0x3a6>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f30:	4b27      	ldr	r3, [pc, #156]	; (8003fd0 <HAL_RCC_ClockConfig+0x298>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	220c      	movs	r2, #12
 8003f36:	4013      	ands	r3, r2
 8003f38:	2b0c      	cmp	r3, #12
 8003f3a:	d1ef      	bne.n	8003f1c <HAL_RCC_ClockConfig+0x1e4>
 8003f3c:	e024      	b.n	8003f88 <HAL_RCC_ClockConfig+0x250>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d11b      	bne.n	8003f7e <HAL_RCC_ClockConfig+0x246>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f46:	e009      	b.n	8003f5c <HAL_RCC_ClockConfig+0x224>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f48:	f7fd fbd4 	bl	80016f4 <HAL_GetTick>
 8003f4c:	0002      	movs	r2, r0
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	4a21      	ldr	r2, [pc, #132]	; (8003fd8 <HAL_RCC_ClockConfig+0x2a0>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d901      	bls.n	8003f5c <HAL_RCC_ClockConfig+0x224>
        {
          return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e0c0      	b.n	80040de <HAL_RCC_ClockConfig+0x3a6>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f5c:	4b1c      	ldr	r3, [pc, #112]	; (8003fd0 <HAL_RCC_ClockConfig+0x298>)
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	220c      	movs	r2, #12
 8003f62:	4013      	ands	r3, r2
 8003f64:	2b04      	cmp	r3, #4
 8003f66:	d1ef      	bne.n	8003f48 <HAL_RCC_ClockConfig+0x210>
 8003f68:	e00e      	b.n	8003f88 <HAL_RCC_ClockConfig+0x250>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f6a:	f7fd fbc3 	bl	80016f4 <HAL_GetTick>
 8003f6e:	0002      	movs	r2, r0
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	4a18      	ldr	r2, [pc, #96]	; (8003fd8 <HAL_RCC_ClockConfig+0x2a0>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_ClockConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e0af      	b.n	80040de <HAL_RCC_ClockConfig+0x3a6>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003f7e:	4b14      	ldr	r3, [pc, #80]	; (8003fd0 <HAL_RCC_ClockConfig+0x298>)
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	220c      	movs	r2, #12
 8003f84:	4013      	ands	r3, r2
 8003f86:	d1f0      	bne.n	8003f6a <HAL_RCC_ClockConfig+0x232>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f88:	4b0f      	ldr	r3, [pc, #60]	; (8003fc8 <HAL_RCC_ClockConfig+0x290>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	4013      	ands	r3, r2
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d222      	bcs.n	8003fdc <HAL_RCC_ClockConfig+0x2a4>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f96:	4b0c      	ldr	r3, [pc, #48]	; (8003fc8 <HAL_RCC_ClockConfig+0x290>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	4393      	bics	r3, r2
 8003f9e:	0019      	movs	r1, r3
 8003fa0:	4b09      	ldr	r3, [pc, #36]	; (8003fc8 <HAL_RCC_ClockConfig+0x290>)
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fa8:	4b07      	ldr	r3, [pc, #28]	; (8003fc8 <HAL_RCC_ClockConfig+0x290>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2201      	movs	r2, #1
 8003fae:	4013      	ands	r3, r2
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d012      	beq.n	8003fdc <HAL_RCC_ClockConfig+0x2a4>
    {
      return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e091      	b.n	80040de <HAL_RCC_ClockConfig+0x3a6>
 8003fba:	46c0      	nop			; (mov r8, r8)
 8003fbc:	00000366 	.word	0x00000366
 8003fc0:	080068e0 	.word	0x080068e0
 8003fc4:	00000367 	.word	0x00000367
 8003fc8:	40022000 	.word	0x40022000
 8003fcc:	0000037e 	.word	0x0000037e
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	00000385 	.word	0x00000385
 8003fd8:	00001388 	.word	0x00001388
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2204      	movs	r2, #4
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	d02b      	beq.n	800403e <HAL_RCC_ClockConfig+0x306>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d01d      	beq.n	800402a <HAL_RCC_ClockConfig+0x2f2>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68da      	ldr	r2, [r3, #12]
 8003ff2:	2380      	movs	r3, #128	; 0x80
 8003ff4:	00db      	lsls	r3, r3, #3
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d017      	beq.n	800402a <HAL_RCC_ClockConfig+0x2f2>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68da      	ldr	r2, [r3, #12]
 8003ffe:	23a0      	movs	r3, #160	; 0xa0
 8004000:	00db      	lsls	r3, r3, #3
 8004002:	429a      	cmp	r2, r3
 8004004:	d011      	beq.n	800402a <HAL_RCC_ClockConfig+0x2f2>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68da      	ldr	r2, [r3, #12]
 800400a:	23c0      	movs	r3, #192	; 0xc0
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	429a      	cmp	r2, r3
 8004010:	d00b      	beq.n	800402a <HAL_RCC_ClockConfig+0x2f2>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68da      	ldr	r2, [r3, #12]
 8004016:	23e0      	movs	r3, #224	; 0xe0
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	429a      	cmp	r2, r3
 800401c:	d005      	beq.n	800402a <HAL_RCC_ClockConfig+0x2f2>
 800401e:	4a32      	ldr	r2, [pc, #200]	; (80040e8 <HAL_RCC_ClockConfig+0x3b0>)
 8004020:	4b32      	ldr	r3, [pc, #200]	; (80040ec <HAL_RCC_ClockConfig+0x3b4>)
 8004022:	0011      	movs	r1, r2
 8004024:	0018      	movs	r0, r3
 8004026:	f7fd f8d0 	bl	80011ca <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800402a:	4b31      	ldr	r3, [pc, #196]	; (80040f0 <HAL_RCC_ClockConfig+0x3b8>)
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	4a31      	ldr	r2, [pc, #196]	; (80040f4 <HAL_RCC_ClockConfig+0x3bc>)
 8004030:	4013      	ands	r3, r2
 8004032:	0019      	movs	r1, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	68da      	ldr	r2, [r3, #12]
 8004038:	4b2d      	ldr	r3, [pc, #180]	; (80040f0 <HAL_RCC_ClockConfig+0x3b8>)
 800403a:	430a      	orrs	r2, r1
 800403c:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2208      	movs	r2, #8
 8004044:	4013      	ands	r3, r2
 8004046:	d02c      	beq.n	80040a2 <HAL_RCC_ClockConfig+0x36a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d01d      	beq.n	800408c <HAL_RCC_ClockConfig+0x354>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	2380      	movs	r3, #128	; 0x80
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	429a      	cmp	r2, r3
 800405a:	d017      	beq.n	800408c <HAL_RCC_ClockConfig+0x354>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	691a      	ldr	r2, [r3, #16]
 8004060:	23a0      	movs	r3, #160	; 0xa0
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	429a      	cmp	r2, r3
 8004066:	d011      	beq.n	800408c <HAL_RCC_ClockConfig+0x354>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	691a      	ldr	r2, [r3, #16]
 800406c:	23c0      	movs	r3, #192	; 0xc0
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	429a      	cmp	r2, r3
 8004072:	d00b      	beq.n	800408c <HAL_RCC_ClockConfig+0x354>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	691a      	ldr	r2, [r3, #16]
 8004078:	23e0      	movs	r3, #224	; 0xe0
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	429a      	cmp	r2, r3
 800407e:	d005      	beq.n	800408c <HAL_RCC_ClockConfig+0x354>
 8004080:	4a1d      	ldr	r2, [pc, #116]	; (80040f8 <HAL_RCC_ClockConfig+0x3c0>)
 8004082:	4b1a      	ldr	r3, [pc, #104]	; (80040ec <HAL_RCC_ClockConfig+0x3b4>)
 8004084:	0011      	movs	r1, r2
 8004086:	0018      	movs	r0, r3
 8004088:	f7fd f89f 	bl	80011ca <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800408c:	4b18      	ldr	r3, [pc, #96]	; (80040f0 <HAL_RCC_ClockConfig+0x3b8>)
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	4a1a      	ldr	r2, [pc, #104]	; (80040fc <HAL_RCC_ClockConfig+0x3c4>)
 8004092:	4013      	ands	r3, r2
 8004094:	0019      	movs	r1, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	00da      	lsls	r2, r3, #3
 800409c:	4b14      	ldr	r3, [pc, #80]	; (80040f0 <HAL_RCC_ClockConfig+0x3b8>)
 800409e:	430a      	orrs	r2, r1
 80040a0:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040a2:	f000 f831 	bl	8004108 <HAL_RCC_GetSysClockFreq>
 80040a6:	0001      	movs	r1, r0
 80040a8:	4b11      	ldr	r3, [pc, #68]	; (80040f0 <HAL_RCC_ClockConfig+0x3b8>)
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	091b      	lsrs	r3, r3, #4
 80040ae:	220f      	movs	r2, #15
 80040b0:	4013      	ands	r3, r2
 80040b2:	4a13      	ldr	r2, [pc, #76]	; (8004100 <HAL_RCC_ClockConfig+0x3c8>)
 80040b4:	5cd3      	ldrb	r3, [r2, r3]
 80040b6:	000a      	movs	r2, r1
 80040b8:	40da      	lsrs	r2, r3
 80040ba:	4b12      	ldr	r3, [pc, #72]	; (8004104 <HAL_RCC_ClockConfig+0x3cc>)
 80040bc:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80040be:	250b      	movs	r5, #11
 80040c0:	197c      	adds	r4, r7, r5
 80040c2:	2000      	movs	r0, #0
 80040c4:	f7fd fae0 	bl	8001688 <HAL_InitTick>
 80040c8:	0003      	movs	r3, r0
 80040ca:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80040cc:	197b      	adds	r3, r7, r5
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d003      	beq.n	80040dc <HAL_RCC_ClockConfig+0x3a4>
  {
    return status;
 80040d4:	230b      	movs	r3, #11
 80040d6:	18fb      	adds	r3, r7, r3
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	e000      	b.n	80040de <HAL_RCC_ClockConfig+0x3a6>
  }

  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	0018      	movs	r0, r3
 80040e0:	46bd      	mov	sp, r7
 80040e2:	b004      	add	sp, #16
 80040e4:	bdb0      	pop	{r4, r5, r7, pc}
 80040e6:	46c0      	nop			; (mov r8, r8)
 80040e8:	000003ea 	.word	0x000003ea
 80040ec:	080068e0 	.word	0x080068e0
 80040f0:	40021000 	.word	0x40021000
 80040f4:	fffff8ff 	.word	0xfffff8ff
 80040f8:	000003f1 	.word	0x000003f1
 80040fc:	ffffc7ff 	.word	0xffffc7ff
 8004100:	08006a04 	.word	0x08006a04
 8004104:	20000030 	.word	0x20000030

08004108 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800410e:	4b3b      	ldr	r3, [pc, #236]	; (80041fc <HAL_RCC_GetSysClockFreq+0xf4>)
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	220c      	movs	r2, #12
 8004118:	4013      	ands	r3, r2
 800411a:	2b08      	cmp	r3, #8
 800411c:	d00e      	beq.n	800413c <HAL_RCC_GetSysClockFreq+0x34>
 800411e:	2b0c      	cmp	r3, #12
 8004120:	d00f      	beq.n	8004142 <HAL_RCC_GetSysClockFreq+0x3a>
 8004122:	2b04      	cmp	r3, #4
 8004124:	d157      	bne.n	80041d6 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004126:	4b35      	ldr	r3, [pc, #212]	; (80041fc <HAL_RCC_GetSysClockFreq+0xf4>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2210      	movs	r2, #16
 800412c:	4013      	ands	r3, r2
 800412e:	d002      	beq.n	8004136 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004130:	4b33      	ldr	r3, [pc, #204]	; (8004200 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004132:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004134:	e05d      	b.n	80041f2 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8004136:	4b33      	ldr	r3, [pc, #204]	; (8004204 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004138:	613b      	str	r3, [r7, #16]
      break;
 800413a:	e05a      	b.n	80041f2 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800413c:	4b32      	ldr	r3, [pc, #200]	; (8004208 <HAL_RCC_GetSysClockFreq+0x100>)
 800413e:	613b      	str	r3, [r7, #16]
      break;
 8004140:	e057      	b.n	80041f2 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	0c9b      	lsrs	r3, r3, #18
 8004146:	220f      	movs	r2, #15
 8004148:	4013      	ands	r3, r2
 800414a:	4a30      	ldr	r2, [pc, #192]	; (800420c <HAL_RCC_GetSysClockFreq+0x104>)
 800414c:	5cd3      	ldrb	r3, [r2, r3]
 800414e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	0d9b      	lsrs	r3, r3, #22
 8004154:	2203      	movs	r2, #3
 8004156:	4013      	ands	r3, r2
 8004158:	3301      	adds	r3, #1
 800415a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800415c:	4b27      	ldr	r3, [pc, #156]	; (80041fc <HAL_RCC_GetSysClockFreq+0xf4>)
 800415e:	68da      	ldr	r2, [r3, #12]
 8004160:	2380      	movs	r3, #128	; 0x80
 8004162:	025b      	lsls	r3, r3, #9
 8004164:	4013      	ands	r3, r2
 8004166:	d00f      	beq.n	8004188 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8004168:	68b9      	ldr	r1, [r7, #8]
 800416a:	000a      	movs	r2, r1
 800416c:	0152      	lsls	r2, r2, #5
 800416e:	1a52      	subs	r2, r2, r1
 8004170:	0193      	lsls	r3, r2, #6
 8004172:	1a9b      	subs	r3, r3, r2
 8004174:	00db      	lsls	r3, r3, #3
 8004176:	185b      	adds	r3, r3, r1
 8004178:	025b      	lsls	r3, r3, #9
 800417a:	6879      	ldr	r1, [r7, #4]
 800417c:	0018      	movs	r0, r3
 800417e:	f7fb ffc3 	bl	8000108 <__udivsi3>
 8004182:	0003      	movs	r3, r0
 8004184:	617b      	str	r3, [r7, #20]
 8004186:	e023      	b.n	80041d0 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004188:	4b1c      	ldr	r3, [pc, #112]	; (80041fc <HAL_RCC_GetSysClockFreq+0xf4>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2210      	movs	r2, #16
 800418e:	4013      	ands	r3, r2
 8004190:	d00f      	beq.n	80041b2 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8004192:	68b9      	ldr	r1, [r7, #8]
 8004194:	000a      	movs	r2, r1
 8004196:	0152      	lsls	r2, r2, #5
 8004198:	1a52      	subs	r2, r2, r1
 800419a:	0193      	lsls	r3, r2, #6
 800419c:	1a9b      	subs	r3, r3, r2
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	185b      	adds	r3, r3, r1
 80041a2:	021b      	lsls	r3, r3, #8
 80041a4:	6879      	ldr	r1, [r7, #4]
 80041a6:	0018      	movs	r0, r3
 80041a8:	f7fb ffae 	bl	8000108 <__udivsi3>
 80041ac:	0003      	movs	r3, r0
 80041ae:	617b      	str	r3, [r7, #20]
 80041b0:	e00e      	b.n	80041d0 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 80041b2:	68b9      	ldr	r1, [r7, #8]
 80041b4:	000a      	movs	r2, r1
 80041b6:	0152      	lsls	r2, r2, #5
 80041b8:	1a52      	subs	r2, r2, r1
 80041ba:	0193      	lsls	r3, r2, #6
 80041bc:	1a9b      	subs	r3, r3, r2
 80041be:	00db      	lsls	r3, r3, #3
 80041c0:	185b      	adds	r3, r3, r1
 80041c2:	029b      	lsls	r3, r3, #10
 80041c4:	6879      	ldr	r1, [r7, #4]
 80041c6:	0018      	movs	r0, r3
 80041c8:	f7fb ff9e 	bl	8000108 <__udivsi3>
 80041cc:	0003      	movs	r3, r0
 80041ce:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	613b      	str	r3, [r7, #16]
      break;
 80041d4:	e00d      	b.n	80041f2 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80041d6:	4b09      	ldr	r3, [pc, #36]	; (80041fc <HAL_RCC_GetSysClockFreq+0xf4>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	0b5b      	lsrs	r3, r3, #13
 80041dc:	2207      	movs	r2, #7
 80041de:	4013      	ands	r3, r2
 80041e0:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	3301      	adds	r3, #1
 80041e6:	2280      	movs	r2, #128	; 0x80
 80041e8:	0212      	lsls	r2, r2, #8
 80041ea:	409a      	lsls	r2, r3
 80041ec:	0013      	movs	r3, r2
 80041ee:	613b      	str	r3, [r7, #16]
      break;
 80041f0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80041f2:	693b      	ldr	r3, [r7, #16]
}
 80041f4:	0018      	movs	r0, r3
 80041f6:	46bd      	mov	sp, r7
 80041f8:	b006      	add	sp, #24
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	40021000 	.word	0x40021000
 8004200:	003d0900 	.word	0x003d0900
 8004204:	00f42400 	.word	0x00f42400
 8004208:	007a1200 	.word	0x007a1200
 800420c:	08006a1c 	.word	0x08006a1c

08004210 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004214:	4b02      	ldr	r3, [pc, #8]	; (8004220 <HAL_RCC_GetHCLKFreq+0x10>)
 8004216:	681b      	ldr	r3, [r3, #0]
}
 8004218:	0018      	movs	r0, r3
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	46c0      	nop			; (mov r8, r8)
 8004220:	20000030 	.word	0x20000030

08004224 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004228:	f7ff fff2 	bl	8004210 <HAL_RCC_GetHCLKFreq>
 800422c:	0001      	movs	r1, r0
 800422e:	4b06      	ldr	r3, [pc, #24]	; (8004248 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	0a1b      	lsrs	r3, r3, #8
 8004234:	2207      	movs	r2, #7
 8004236:	4013      	ands	r3, r2
 8004238:	4a04      	ldr	r2, [pc, #16]	; (800424c <HAL_RCC_GetPCLK1Freq+0x28>)
 800423a:	5cd3      	ldrb	r3, [r2, r3]
 800423c:	40d9      	lsrs	r1, r3
 800423e:	000b      	movs	r3, r1
}
 8004240:	0018      	movs	r0, r3
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	46c0      	nop			; (mov r8, r8)
 8004248:	40021000 	.word	0x40021000
 800424c:	08006a14 	.word	0x08006a14

08004250 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004254:	f7ff ffdc 	bl	8004210 <HAL_RCC_GetHCLKFreq>
 8004258:	0001      	movs	r1, r0
 800425a:	4b06      	ldr	r3, [pc, #24]	; (8004274 <HAL_RCC_GetPCLK2Freq+0x24>)
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	0adb      	lsrs	r3, r3, #11
 8004260:	2207      	movs	r2, #7
 8004262:	4013      	ands	r3, r2
 8004264:	4a04      	ldr	r2, [pc, #16]	; (8004278 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004266:	5cd3      	ldrb	r3, [r2, r3]
 8004268:	40d9      	lsrs	r1, r3
 800426a:	000b      	movs	r3, r1
}
 800426c:	0018      	movs	r0, r3
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	46c0      	nop			; (mov r8, r8)
 8004274:	40021000 	.word	0x40021000
 8004278:	08006a14 	.word	0x08006a14

0800427c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b086      	sub	sp, #24
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2bff      	cmp	r3, #255	; 0xff
 800428a:	d904      	bls.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x1a>
 800428c:	4b69      	ldr	r3, [pc, #420]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800428e:	2167      	movs	r1, #103	; 0x67
 8004290:	0018      	movs	r0, r3
 8004292:	f7fc ff9a 	bl	80011ca <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2220      	movs	r2, #32
 800429c:	4013      	ands	r3, r2
 800429e:	d100      	bne.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80042a0:	e105      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x232>
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
#endif /* LCD */
     )
  {
    /* check for RTC Parameters used to output RTCCLK */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2220      	movs	r2, #32
 80042a8:	4013      	ands	r3, r2
 80042aa:	d02c      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d028      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	2380      	movs	r3, #128	; 0x80
 80042ba:	025b      	lsls	r3, r3, #9
 80042bc:	429a      	cmp	r2, r3
 80042be:	d022      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	2380      	movs	r3, #128	; 0x80
 80042c6:	029b      	lsls	r3, r3, #10
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d01c      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	23c0      	movs	r3, #192	; 0xc0
 80042d2:	029b      	lsls	r3, r3, #10
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d016      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	2398      	movs	r3, #152	; 0x98
 80042de:	035b      	lsls	r3, r3, #13
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d010      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	238c      	movs	r3, #140	; 0x8c
 80042ea:	039b      	lsls	r3, r3, #14
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d00a      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	23cc      	movs	r3, #204	; 0xcc
 80042f6:	039b      	lsls	r3, r3, #14
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d004      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 80042fc:	4b4d      	ldr	r3, [pc, #308]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042fe:	2173      	movs	r1, #115	; 0x73
 8004300:	0018      	movs	r0, r3
 8004302:	f7fc ff62 	bl	80011ca <assert_failed>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8004306:	2317      	movs	r3, #23
 8004308:	18fb      	adds	r3, r7, r3
 800430a:	2200      	movs	r2, #0
 800430c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800430e:	4b4a      	ldr	r3, [pc, #296]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004310:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004312:	2380      	movs	r3, #128	; 0x80
 8004314:	055b      	lsls	r3, r3, #21
 8004316:	4013      	ands	r3, r2
 8004318:	d10a      	bne.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800431a:	4b47      	ldr	r3, [pc, #284]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800431c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800431e:	4b46      	ldr	r3, [pc, #280]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004320:	2180      	movs	r1, #128	; 0x80
 8004322:	0549      	lsls	r1, r1, #21
 8004324:	430a      	orrs	r2, r1
 8004326:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004328:	2317      	movs	r3, #23
 800432a:	18fb      	adds	r3, r7, r3
 800432c:	2201      	movs	r2, #1
 800432e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004330:	4b42      	ldr	r3, [pc, #264]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	2380      	movs	r3, #128	; 0x80
 8004336:	005b      	lsls	r3, r3, #1
 8004338:	4013      	ands	r3, r2
 800433a:	d11a      	bne.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800433c:	4b3f      	ldr	r3, [pc, #252]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	4b3e      	ldr	r3, [pc, #248]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004342:	2180      	movs	r1, #128	; 0x80
 8004344:	0049      	lsls	r1, r1, #1
 8004346:	430a      	orrs	r2, r1
 8004348:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800434a:	f7fd f9d3 	bl	80016f4 <HAL_GetTick>
 800434e:	0003      	movs	r3, r0
 8004350:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004352:	e008      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004354:	f7fd f9ce 	bl	80016f4 <HAL_GetTick>
 8004358:	0002      	movs	r2, r0
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b64      	cmp	r3, #100	; 0x64
 8004360:	d901      	bls.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xea>
        {
          return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e188      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004366:	4b35      	ldr	r3, [pc, #212]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	2380      	movs	r3, #128	; 0x80
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	4013      	ands	r3, r2
 8004370:	d0f0      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004372:	4b31      	ldr	r3, [pc, #196]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	23c0      	movs	r3, #192	; 0xc0
 8004378:	039b      	lsls	r3, r3, #14
 800437a:	4013      	ands	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	23c0      	movs	r3, #192	; 0xc0
 8004384:	039b      	lsls	r3, r3, #14
 8004386:	4013      	ands	r3, r2
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	429a      	cmp	r2, r3
 800438c:	d013      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685a      	ldr	r2, [r3, #4]
 8004392:	23c0      	movs	r3, #192	; 0xc0
 8004394:	029b      	lsls	r3, r3, #10
 8004396:	401a      	ands	r2, r3
 8004398:	23c0      	movs	r3, #192	; 0xc0
 800439a:	029b      	lsls	r3, r3, #10
 800439c:	429a      	cmp	r2, r3
 800439e:	d10a      	bne.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80043a0:	4b25      	ldr	r3, [pc, #148]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	2380      	movs	r3, #128	; 0x80
 80043a6:	029b      	lsls	r3, r3, #10
 80043a8:	401a      	ands	r2, r3
 80043aa:	2380      	movs	r3, #128	; 0x80
 80043ac:	029b      	lsls	r3, r3, #10
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d101      	bne.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e160      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80043b6:	4b20      	ldr	r3, [pc, #128]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80043ba:	23c0      	movs	r3, #192	; 0xc0
 80043bc:	029b      	lsls	r3, r3, #10
 80043be:	4013      	ands	r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d047      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	23c0      	movs	r3, #192	; 0xc0
 80043ce:	029b      	lsls	r3, r3, #10
 80043d0:	4013      	ands	r3, r2
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d03f      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2220      	movs	r2, #32
 80043de:	4013      	ands	r3, r2
 80043e0:	d03a      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80043e2:	4b15      	ldr	r3, [pc, #84]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e6:	4a16      	ldr	r2, [pc, #88]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80043e8:	4013      	ands	r3, r2
 80043ea:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043ec:	4b12      	ldr	r3, [pc, #72]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80043f0:	4b11      	ldr	r3, [pc, #68]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043f2:	2180      	movs	r1, #128	; 0x80
 80043f4:	0309      	lsls	r1, r1, #12
 80043f6:	430a      	orrs	r2, r1
 80043f8:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043fa:	4b0f      	ldr	r3, [pc, #60]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80043fe:	4b0e      	ldr	r3, [pc, #56]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004400:	4910      	ldr	r1, [pc, #64]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004402:	400a      	ands	r2, r1
 8004404:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004406:	4b0c      	ldr	r3, [pc, #48]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	2380      	movs	r3, #128	; 0x80
 8004410:	005b      	lsls	r3, r3, #1
 8004412:	4013      	ands	r3, r2
 8004414:	d020      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004416:	f7fd f96d 	bl	80016f4 <HAL_GetTick>
 800441a:	0003      	movs	r3, r0
 800441c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800441e:	e015      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004420:	f7fd f968 	bl	80016f4 <HAL_GetTick>
 8004424:	0002      	movs	r2, r0
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	4a07      	ldr	r2, [pc, #28]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d90d      	bls.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e121      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004434:	08006918 	.word	0x08006918
 8004438:	40021000 	.word	0x40021000
 800443c:	40007000 	.word	0x40007000
 8004440:	fffcffff 	.word	0xfffcffff
 8004444:	fff7ffff 	.word	0xfff7ffff
 8004448:	00001388 	.word	0x00001388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800444c:	4b8c      	ldr	r3, [pc, #560]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 800444e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004450:	2380      	movs	r3, #128	; 0x80
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4013      	ands	r3, r2
 8004456:	d0e3      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685a      	ldr	r2, [r3, #4]
 800445c:	23c0      	movs	r3, #192	; 0xc0
 800445e:	029b      	lsls	r3, r3, #10
 8004460:	401a      	ands	r2, r3
 8004462:	23c0      	movs	r3, #192	; 0xc0
 8004464:	029b      	lsls	r3, r3, #10
 8004466:	429a      	cmp	r2, r3
 8004468:	d10c      	bne.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800446a:	4b85      	ldr	r3, [pc, #532]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a85      	ldr	r2, [pc, #532]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x408>)
 8004470:	4013      	ands	r3, r2
 8004472:	0019      	movs	r1, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685a      	ldr	r2, [r3, #4]
 8004478:	23c0      	movs	r3, #192	; 0xc0
 800447a:	039b      	lsls	r3, r3, #14
 800447c:	401a      	ands	r2, r3
 800447e:	4b80      	ldr	r3, [pc, #512]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 8004480:	430a      	orrs	r2, r1
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	4b7e      	ldr	r3, [pc, #504]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 8004486:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685a      	ldr	r2, [r3, #4]
 800448c:	23c0      	movs	r3, #192	; 0xc0
 800448e:	029b      	lsls	r3, r3, #10
 8004490:	401a      	ands	r2, r3
 8004492:	4b7b      	ldr	r3, [pc, #492]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 8004494:	430a      	orrs	r2, r1
 8004496:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004498:	2317      	movs	r3, #23
 800449a:	18fb      	adds	r3, r7, r3
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d105      	bne.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044a2:	4b77      	ldr	r3, [pc, #476]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 80044a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044a6:	4b76      	ldr	r3, [pc, #472]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 80044a8:	4977      	ldr	r1, [pc, #476]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x40c>)
 80044aa:	400a      	ands	r2, r1
 80044ac:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2201      	movs	r2, #1
 80044b4:	4013      	ands	r3, r2
 80044b6:	d01e      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d010      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x266>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d00c      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x266>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	2b03      	cmp	r3, #3
 80044ce:	d008      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x266>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d004      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x266>
 80044d8:	4b6c      	ldr	r3, [pc, #432]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x410>)
 80044da:	21de      	movs	r1, #222	; 0xde
 80044dc:	0018      	movs	r0, r3
 80044de:	f7fc fe74 	bl	80011ca <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044e2:	4b67      	ldr	r3, [pc, #412]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 80044e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e6:	2203      	movs	r2, #3
 80044e8:	4393      	bics	r3, r2
 80044ea:	0019      	movs	r1, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	4b63      	ldr	r3, [pc, #396]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 80044f2:	430a      	orrs	r2, r1
 80044f4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2202      	movs	r2, #2
 80044fc:	4013      	ands	r3, r2
 80044fe:	d01e      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d010      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	2b04      	cmp	r3, #4
 800450e:	d00c      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	2b0c      	cmp	r3, #12
 8004516:	d008      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	2b08      	cmp	r3, #8
 800451e:	d004      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 8004520:	4b5a      	ldr	r3, [pc, #360]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x410>)
 8004522:	21e9      	movs	r1, #233	; 0xe9
 8004524:	0018      	movs	r0, r3
 8004526:	f7fc fe50 	bl	80011ca <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800452a:	4b55      	ldr	r3, [pc, #340]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 800452c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800452e:	220c      	movs	r2, #12
 8004530:	4393      	bics	r3, r2
 8004532:	0019      	movs	r1, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68da      	ldr	r2, [r3, #12]
 8004538:	4b51      	ldr	r3, [pc, #324]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 800453a:	430a      	orrs	r2, r1
 800453c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2204      	movs	r2, #4
 8004544:	4013      	ands	r3, r2
 8004546:	d024      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d016      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x302>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	691a      	ldr	r2, [r3, #16]
 8004554:	2380      	movs	r3, #128	; 0x80
 8004556:	00db      	lsls	r3, r3, #3
 8004558:	429a      	cmp	r2, r3
 800455a:	d010      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x302>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	691a      	ldr	r2, [r3, #16]
 8004560:	23c0      	movs	r3, #192	; 0xc0
 8004562:	011b      	lsls	r3, r3, #4
 8004564:	429a      	cmp	r2, r3
 8004566:	d00a      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x302>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	691a      	ldr	r2, [r3, #16]
 800456c:	2380      	movs	r3, #128	; 0x80
 800456e:	011b      	lsls	r3, r3, #4
 8004570:	429a      	cmp	r2, r3
 8004572:	d004      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x302>
 8004574:	4b45      	ldr	r3, [pc, #276]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x410>)
 8004576:	21f3      	movs	r1, #243	; 0xf3
 8004578:	0018      	movs	r0, r3
 800457a:	f7fc fe26 	bl	80011ca <assert_failed>

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800457e:	4b40      	ldr	r3, [pc, #256]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 8004580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004582:	4a43      	ldr	r2, [pc, #268]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x414>)
 8004584:	4013      	ands	r3, r2
 8004586:	0019      	movs	r1, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	691a      	ldr	r2, [r3, #16]
 800458c:	4b3c      	ldr	r3, [pc, #240]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 800458e:	430a      	orrs	r2, r1
 8004590:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2208      	movs	r2, #8
 8004598:	4013      	ands	r3, r2
 800459a:	d01e      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x35e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d010      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	695a      	ldr	r2, [r3, #20]
 80045a8:	2380      	movs	r3, #128	; 0x80
 80045aa:	015b      	lsls	r3, r3, #5
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d00a      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	695a      	ldr	r2, [r3, #20]
 80045b4:	2380      	movs	r3, #128	; 0x80
 80045b6:	019b      	lsls	r3, r3, #6
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d004      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80045bc:	4b33      	ldr	r3, [pc, #204]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x410>)
 80045be:	21fd      	movs	r1, #253	; 0xfd
 80045c0:	0018      	movs	r0, r3
 80045c2:	f7fc fe02 	bl	80011ca <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045c6:	4b2e      	ldr	r3, [pc, #184]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 80045c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ca:	4a32      	ldr	r2, [pc, #200]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x418>)
 80045cc:	4013      	ands	r3, r2
 80045ce:	0019      	movs	r1, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	695a      	ldr	r2, [r3, #20]
 80045d4:	4b2a      	ldr	r3, [pc, #168]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 80045d6:	430a      	orrs	r2, r1
 80045d8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2240      	movs	r2, #64	; 0x40
 80045e0:	4013      	ands	r3, r2
 80045e2:	d01b      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x3a0>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	69da      	ldr	r2, [r3, #28]
 80045e8:	2380      	movs	r3, #128	; 0x80
 80045ea:	04db      	lsls	r3, r3, #19
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d00b      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	69db      	ldr	r3, [r3, #28]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d007      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 80045f8:	2314      	movs	r3, #20
 80045fa:	33ff      	adds	r3, #255	; 0xff
 80045fc:	001a      	movs	r2, r3
 80045fe:	4b23      	ldr	r3, [pc, #140]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x410>)
 8004600:	0011      	movs	r1, r2
 8004602:	0018      	movs	r0, r3
 8004604:	f7fc fde1 	bl	80011ca <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004608:	4b1d      	ldr	r3, [pc, #116]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 800460a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800460c:	4a22      	ldr	r2, [pc, #136]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800460e:	4013      	ands	r3, r2
 8004610:	0019      	movs	r1, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	69da      	ldr	r2, [r3, #28]
 8004616:	4b1a      	ldr	r3, [pc, #104]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 8004618:	430a      	orrs	r2, r1
 800461a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2280      	movs	r2, #128	; 0x80
 8004622:	4013      	ands	r3, r2
 8004624:	d027      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d019      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	699a      	ldr	r2, [r3, #24]
 8004632:	2380      	movs	r3, #128	; 0x80
 8004634:	02db      	lsls	r3, r3, #11
 8004636:	429a      	cmp	r2, r3
 8004638:	d013      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	699a      	ldr	r2, [r3, #24]
 800463e:	2380      	movs	r3, #128	; 0x80
 8004640:	031b      	lsls	r3, r3, #12
 8004642:	429a      	cmp	r2, r3
 8004644:	d00d      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	699a      	ldr	r2, [r3, #24]
 800464a:	23c0      	movs	r3, #192	; 0xc0
 800464c:	031b      	lsls	r3, r3, #12
 800464e:	429a      	cmp	r2, r3
 8004650:	d007      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004652:	231c      	movs	r3, #28
 8004654:	33ff      	adds	r3, #255	; 0xff
 8004656:	001a      	movs	r2, r3
 8004658:	4b0c      	ldr	r3, [pc, #48]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x410>)
 800465a:	0011      	movs	r1, r2
 800465c:	0018      	movs	r0, r3
 800465e:	f7fc fdb4 	bl	80011ca <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004662:	4b07      	ldr	r3, [pc, #28]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 8004664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004666:	4a0d      	ldr	r2, [pc, #52]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8004668:	4013      	ands	r3, r2
 800466a:	0019      	movs	r1, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	699a      	ldr	r2, [r3, #24]
 8004670:	4b03      	ldr	r3, [pc, #12]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 8004672:	430a      	orrs	r2, r1
 8004674:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004676:	2300      	movs	r3, #0
}
 8004678:	0018      	movs	r0, r3
 800467a:	46bd      	mov	sp, r7
 800467c:	b006      	add	sp, #24
 800467e:	bd80      	pop	{r7, pc}
 8004680:	40021000 	.word	0x40021000
 8004684:	ffcfffff 	.word	0xffcfffff
 8004688:	efffffff 	.word	0xefffffff
 800468c:	08006918 	.word	0x08006918
 8004690:	fffff3ff 	.word	0xfffff3ff
 8004694:	ffffcfff 	.word	0xffffcfff
 8004698:	fbffffff 	.word	0xfbffffff
 800469c:	fff3ffff 	.word	0xfff3ffff

080046a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e096      	b.n	80047e0 <HAL_TIM_Base_Init+0x140>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	2380      	movs	r3, #128	; 0x80
 80046b8:	05db      	lsls	r3, r3, #23
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d016      	beq.n	80046ec <HAL_TIM_Base_Init+0x4c>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a49      	ldr	r2, [pc, #292]	; (80047e8 <HAL_TIM_Base_Init+0x148>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d011      	beq.n	80046ec <HAL_TIM_Base_Init+0x4c>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a47      	ldr	r2, [pc, #284]	; (80047ec <HAL_TIM_Base_Init+0x14c>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d00c      	beq.n	80046ec <HAL_TIM_Base_Init+0x4c>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a46      	ldr	r2, [pc, #280]	; (80047f0 <HAL_TIM_Base_Init+0x150>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d007      	beq.n	80046ec <HAL_TIM_Base_Init+0x4c>
 80046dc:	230c      	movs	r3, #12
 80046de:	33ff      	adds	r3, #255	; 0xff
 80046e0:	001a      	movs	r2, r3
 80046e2:	4b44      	ldr	r3, [pc, #272]	; (80047f4 <HAL_TIM_Base_Init+0x154>)
 80046e4:	0011      	movs	r1, r2
 80046e6:	0018      	movs	r0, r3
 80046e8:	f7fc fd6f 	bl	80011ca <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d016      	beq.n	8004722 <HAL_TIM_Base_Init+0x82>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	2b10      	cmp	r3, #16
 80046fa:	d012      	beq.n	8004722 <HAL_TIM_Base_Init+0x82>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	2b20      	cmp	r3, #32
 8004702:	d00e      	beq.n	8004722 <HAL_TIM_Base_Init+0x82>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	2b40      	cmp	r3, #64	; 0x40
 800470a:	d00a      	beq.n	8004722 <HAL_TIM_Base_Init+0x82>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	2b60      	cmp	r3, #96	; 0x60
 8004712:	d006      	beq.n	8004722 <HAL_TIM_Base_Init+0x82>
 8004714:	2386      	movs	r3, #134	; 0x86
 8004716:	005a      	lsls	r2, r3, #1
 8004718:	4b36      	ldr	r3, [pc, #216]	; (80047f4 <HAL_TIM_Base_Init+0x154>)
 800471a:	0011      	movs	r1, r2
 800471c:	0018      	movs	r0, r3
 800471e:	f7fc fd54 	bl	80011ca <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d013      	beq.n	8004752 <HAL_TIM_Base_Init+0xb2>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	691a      	ldr	r2, [r3, #16]
 800472e:	2380      	movs	r3, #128	; 0x80
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	429a      	cmp	r2, r3
 8004734:	d00d      	beq.n	8004752 <HAL_TIM_Base_Init+0xb2>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	691a      	ldr	r2, [r3, #16]
 800473a:	2380      	movs	r3, #128	; 0x80
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	429a      	cmp	r2, r3
 8004740:	d007      	beq.n	8004752 <HAL_TIM_Base_Init+0xb2>
 8004742:	230e      	movs	r3, #14
 8004744:	33ff      	adds	r3, #255	; 0xff
 8004746:	001a      	movs	r2, r3
 8004748:	4b2a      	ldr	r3, [pc, #168]	; (80047f4 <HAL_TIM_Base_Init+0x154>)
 800474a:	0011      	movs	r1, r2
 800474c:	0018      	movs	r0, r3
 800474e:	f7fc fd3c 	bl	80011ca <assert_failed>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	4a28      	ldr	r2, [pc, #160]	; (80047f8 <HAL_TIM_Base_Init+0x158>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d906      	bls.n	800476a <HAL_TIM_Base_Init+0xca>
 800475c:	2387      	movs	r3, #135	; 0x87
 800475e:	005a      	lsls	r2, r3, #1
 8004760:	4b24      	ldr	r3, [pc, #144]	; (80047f4 <HAL_TIM_Base_Init+0x154>)
 8004762:	0011      	movs	r1, r2
 8004764:	0018      	movs	r0, r3
 8004766:	f7fc fd30 	bl	80011ca <assert_failed>
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	4a22      	ldr	r2, [pc, #136]	; (80047f8 <HAL_TIM_Base_Init+0x158>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d907      	bls.n	8004784 <HAL_TIM_Base_Init+0xe4>
 8004774:	2310      	movs	r3, #16
 8004776:	33ff      	adds	r3, #255	; 0xff
 8004778:	001a      	movs	r2, r3
 800477a:	4b1e      	ldr	r3, [pc, #120]	; (80047f4 <HAL_TIM_Base_Init+0x154>)
 800477c:	0011      	movs	r1, r2
 800477e:	0018      	movs	r0, r3
 8004780:	f7fc fd23 	bl	80011ca <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00a      	beq.n	80047a2 <HAL_TIM_Base_Init+0x102>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	2b80      	cmp	r3, #128	; 0x80
 8004792:	d006      	beq.n	80047a2 <HAL_TIM_Base_Init+0x102>
 8004794:	2388      	movs	r3, #136	; 0x88
 8004796:	005a      	lsls	r2, r3, #1
 8004798:	4b16      	ldr	r3, [pc, #88]	; (80047f4 <HAL_TIM_Base_Init+0x154>)
 800479a:	0011      	movs	r1, r2
 800479c:	0018      	movs	r0, r3
 800479e:	f7fc fd14 	bl	80011ca <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2239      	movs	r2, #57	; 0x39
 80047a6:	5c9b      	ldrb	r3, [r3, r2]
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d107      	bne.n	80047be <HAL_TIM_Base_Init+0x11e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2238      	movs	r2, #56	; 0x38
 80047b2:	2100      	movs	r1, #0
 80047b4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	0018      	movs	r0, r3
 80047ba:	f7fc fdad 	bl	8001318 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2239      	movs	r2, #57	; 0x39
 80047c2:	2102      	movs	r1, #2
 80047c4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	3304      	adds	r3, #4
 80047ce:	0019      	movs	r1, r3
 80047d0:	0010      	movs	r0, r2
 80047d2:	f000 fe73 	bl	80054bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2239      	movs	r2, #57	; 0x39
 80047da:	2101      	movs	r1, #1
 80047dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	0018      	movs	r0, r3
 80047e2:	46bd      	mov	sp, r7
 80047e4:	b002      	add	sp, #8
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	40001000 	.word	0x40001000
 80047ec:	40010800 	.word	0x40010800
 80047f0:	40011400 	.word	0x40011400
 80047f4:	08006954 	.word	0x08006954
 80047f8:	0000ffff 	.word	0x0000ffff

080047fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	2380      	movs	r3, #128	; 0x80
 800480a:	05db      	lsls	r3, r3, #23
 800480c:	429a      	cmp	r2, r3
 800480e:	d015      	beq.n	800483c <HAL_TIM_Base_Start_IT+0x40>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a18      	ldr	r2, [pc, #96]	; (8004878 <HAL_TIM_Base_Start_IT+0x7c>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d010      	beq.n	800483c <HAL_TIM_Base_Start_IT+0x40>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a17      	ldr	r2, [pc, #92]	; (800487c <HAL_TIM_Base_Start_IT+0x80>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d00b      	beq.n	800483c <HAL_TIM_Base_Start_IT+0x40>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a15      	ldr	r2, [pc, #84]	; (8004880 <HAL_TIM_Base_Start_IT+0x84>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d006      	beq.n	800483c <HAL_TIM_Base_Start_IT+0x40>
 800482e:	23da      	movs	r3, #218	; 0xda
 8004830:	005a      	lsls	r2, r3, #1
 8004832:	4b14      	ldr	r3, [pc, #80]	; (8004884 <HAL_TIM_Base_Start_IT+0x88>)
 8004834:	0011      	movs	r1, r2
 8004836:	0018      	movs	r0, r3
 8004838:	f7fc fcc7 	bl	80011ca <assert_failed>

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68da      	ldr	r2, [r3, #12]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2101      	movs	r1, #1
 8004848:	430a      	orrs	r2, r1
 800484a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	2207      	movs	r2, #7
 8004854:	4013      	ands	r3, r2
 8004856:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2b06      	cmp	r3, #6
 800485c:	d007      	beq.n	800486e <HAL_TIM_Base_Start_IT+0x72>
  {
    __HAL_TIM_ENABLE(htim);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2101      	movs	r1, #1
 800486a:	430a      	orrs	r2, r1
 800486c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	0018      	movs	r0, r3
 8004872:	46bd      	mov	sp, r7
 8004874:	b004      	add	sp, #16
 8004876:	bd80      	pop	{r7, pc}
 8004878:	40001000 	.word	0x40001000
 800487c:	40010800 	.word	0x40010800
 8004880:	40011400 	.word	0x40011400
 8004884:	08006954 	.word	0x08006954

08004888 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e08e      	b.n	80049b8 <HAL_TIM_PWM_Init+0x130>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	2380      	movs	r3, #128	; 0x80
 80048a0:	05db      	lsls	r3, r3, #23
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d014      	beq.n	80048d0 <HAL_TIM_PWM_Init+0x48>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a45      	ldr	r2, [pc, #276]	; (80049c0 <HAL_TIM_PWM_Init+0x138>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d00f      	beq.n	80048d0 <HAL_TIM_PWM_Init+0x48>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a43      	ldr	r2, [pc, #268]	; (80049c4 <HAL_TIM_PWM_Init+0x13c>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d00a      	beq.n	80048d0 <HAL_TIM_PWM_Init+0x48>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a42      	ldr	r2, [pc, #264]	; (80049c8 <HAL_TIM_PWM_Init+0x140>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d005      	beq.n	80048d0 <HAL_TIM_PWM_Init+0x48>
 80048c4:	4a41      	ldr	r2, [pc, #260]	; (80049cc <HAL_TIM_PWM_Init+0x144>)
 80048c6:	4b42      	ldr	r3, [pc, #264]	; (80049d0 <HAL_TIM_PWM_Init+0x148>)
 80048c8:	0011      	movs	r1, r2
 80048ca:	0018      	movs	r0, r3
 80048cc:	f7fc fc7d 	bl	80011ca <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d015      	beq.n	8004904 <HAL_TIM_PWM_Init+0x7c>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	2b10      	cmp	r3, #16
 80048de:	d011      	beq.n	8004904 <HAL_TIM_PWM_Init+0x7c>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	2b20      	cmp	r3, #32
 80048e6:	d00d      	beq.n	8004904 <HAL_TIM_PWM_Init+0x7c>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	2b40      	cmp	r3, #64	; 0x40
 80048ee:	d009      	beq.n	8004904 <HAL_TIM_PWM_Init+0x7c>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	2b60      	cmp	r3, #96	; 0x60
 80048f6:	d005      	beq.n	8004904 <HAL_TIM_PWM_Init+0x7c>
 80048f8:	4a36      	ldr	r2, [pc, #216]	; (80049d4 <HAL_TIM_PWM_Init+0x14c>)
 80048fa:	4b35      	ldr	r3, [pc, #212]	; (80049d0 <HAL_TIM_PWM_Init+0x148>)
 80048fc:	0011      	movs	r1, r2
 80048fe:	0018      	movs	r0, r3
 8004900:	f7fc fc63 	bl	80011ca <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d011      	beq.n	8004930 <HAL_TIM_PWM_Init+0xa8>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	691a      	ldr	r2, [r3, #16]
 8004910:	2380      	movs	r3, #128	; 0x80
 8004912:	005b      	lsls	r3, r3, #1
 8004914:	429a      	cmp	r2, r3
 8004916:	d00b      	beq.n	8004930 <HAL_TIM_PWM_Init+0xa8>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	691a      	ldr	r2, [r3, #16]
 800491c:	2380      	movs	r3, #128	; 0x80
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	429a      	cmp	r2, r3
 8004922:	d005      	beq.n	8004930 <HAL_TIM_PWM_Init+0xa8>
 8004924:	4a2c      	ldr	r2, [pc, #176]	; (80049d8 <HAL_TIM_PWM_Init+0x150>)
 8004926:	4b2a      	ldr	r3, [pc, #168]	; (80049d0 <HAL_TIM_PWM_Init+0x148>)
 8004928:	0011      	movs	r1, r2
 800492a:	0018      	movs	r0, r3
 800492c:	f7fc fc4d 	bl	80011ca <assert_failed>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	4a29      	ldr	r2, [pc, #164]	; (80049dc <HAL_TIM_PWM_Init+0x154>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d905      	bls.n	8004946 <HAL_TIM_PWM_Init+0xbe>
 800493a:	4a29      	ldr	r2, [pc, #164]	; (80049e0 <HAL_TIM_PWM_Init+0x158>)
 800493c:	4b24      	ldr	r3, [pc, #144]	; (80049d0 <HAL_TIM_PWM_Init+0x148>)
 800493e:	0011      	movs	r1, r2
 8004940:	0018      	movs	r0, r3
 8004942:	f7fc fc42 	bl	80011ca <assert_failed>
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	4a24      	ldr	r2, [pc, #144]	; (80049dc <HAL_TIM_PWM_Init+0x154>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d906      	bls.n	800495e <HAL_TIM_PWM_Init+0xd6>
 8004950:	238f      	movs	r3, #143	; 0x8f
 8004952:	00da      	lsls	r2, r3, #3
 8004954:	4b1e      	ldr	r3, [pc, #120]	; (80049d0 <HAL_TIM_PWM_Init+0x148>)
 8004956:	0011      	movs	r1, r2
 8004958:	0018      	movs	r0, r3
 800495a:	f7fc fc36 	bl	80011ca <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d009      	beq.n	800497a <HAL_TIM_PWM_Init+0xf2>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	2b80      	cmp	r3, #128	; 0x80
 800496c:	d005      	beq.n	800497a <HAL_TIM_PWM_Init+0xf2>
 800496e:	4a1d      	ldr	r2, [pc, #116]	; (80049e4 <HAL_TIM_PWM_Init+0x15c>)
 8004970:	4b17      	ldr	r3, [pc, #92]	; (80049d0 <HAL_TIM_PWM_Init+0x148>)
 8004972:	0011      	movs	r1, r2
 8004974:	0018      	movs	r0, r3
 8004976:	f7fc fc28 	bl	80011ca <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2239      	movs	r2, #57	; 0x39
 800497e:	5c9b      	ldrb	r3, [r3, r2]
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d107      	bne.n	8004996 <HAL_TIM_PWM_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2238      	movs	r2, #56	; 0x38
 800498a:	2100      	movs	r1, #0
 800498c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	0018      	movs	r0, r3
 8004992:	f000 f829 	bl	80049e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2239      	movs	r2, #57	; 0x39
 800499a:	2102      	movs	r1, #2
 800499c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	3304      	adds	r3, #4
 80049a6:	0019      	movs	r1, r3
 80049a8:	0010      	movs	r0, r2
 80049aa:	f000 fd87 	bl	80054bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2239      	movs	r2, #57	; 0x39
 80049b2:	2101      	movs	r1, #1
 80049b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	0018      	movs	r0, r3
 80049ba:	46bd      	mov	sp, r7
 80049bc:	b002      	add	sp, #8
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	40001000 	.word	0x40001000
 80049c4:	40010800 	.word	0x40010800
 80049c8:	40011400 	.word	0x40011400
 80049cc:	00000474 	.word	0x00000474
 80049d0:	08006954 	.word	0x08006954
 80049d4:	00000475 	.word	0x00000475
 80049d8:	00000476 	.word	0x00000476
 80049dc:	0000ffff 	.word	0x0000ffff
 80049e0:	00000477 	.word	0x00000477
 80049e4:	00000479 	.word	0x00000479

080049e8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049f0:	46c0      	nop			; (mov r8, r8)
 80049f2:	46bd      	mov	sp, r7
 80049f4:	b002      	add	sp, #8
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	2380      	movs	r3, #128	; 0x80
 8004a08:	05db      	lsls	r3, r3, #23
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d10b      	bne.n	8004a26 <HAL_TIM_PWM_Start+0x2e>
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d024      	beq.n	8004a5e <HAL_TIM_PWM_Start+0x66>
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	2b04      	cmp	r3, #4
 8004a18:	d021      	beq.n	8004a5e <HAL_TIM_PWM_Start+0x66>
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b08      	cmp	r3, #8
 8004a1e:	d01e      	beq.n	8004a5e <HAL_TIM_PWM_Start+0x66>
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	2b0c      	cmp	r3, #12
 8004a24:	d01b      	beq.n	8004a5e <HAL_TIM_PWM_Start+0x66>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a1b      	ldr	r2, [pc, #108]	; (8004a98 <HAL_TIM_PWM_Start+0xa0>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d105      	bne.n	8004a3c <HAL_TIM_PWM_Start+0x44>
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d013      	beq.n	8004a5e <HAL_TIM_PWM_Start+0x66>
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	2b04      	cmp	r3, #4
 8004a3a:	d010      	beq.n	8004a5e <HAL_TIM_PWM_Start+0x66>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a16      	ldr	r2, [pc, #88]	; (8004a9c <HAL_TIM_PWM_Start+0xa4>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d105      	bne.n	8004a52 <HAL_TIM_PWM_Start+0x5a>
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d008      	beq.n	8004a5e <HAL_TIM_PWM_Start+0x66>
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	2b04      	cmp	r3, #4
 8004a50:	d005      	beq.n	8004a5e <HAL_TIM_PWM_Start+0x66>
 8004a52:	4a13      	ldr	r2, [pc, #76]	; (8004aa0 <HAL_TIM_PWM_Start+0xa8>)
 8004a54:	4b13      	ldr	r3, [pc, #76]	; (8004aa4 <HAL_TIM_PWM_Start+0xac>)
 8004a56:	0011      	movs	r1, r2
 8004a58:	0018      	movs	r0, r3
 8004a5a:	f7fc fbb6 	bl	80011ca <assert_failed>

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	6839      	ldr	r1, [r7, #0]
 8004a64:	2201      	movs	r2, #1
 8004a66:	0018      	movs	r0, r3
 8004a68:	f000 ff1a 	bl	80058a0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	2207      	movs	r2, #7
 8004a74:	4013      	ands	r3, r2
 8004a76:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2b06      	cmp	r3, #6
 8004a7c:	d007      	beq.n	8004a8e <HAL_TIM_PWM_Start+0x96>
  {
    __HAL_TIM_ENABLE(htim);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2101      	movs	r1, #1
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	0018      	movs	r0, r3
 8004a92:	46bd      	mov	sp, r7
 8004a94:	b004      	add	sp, #16
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	40010800 	.word	0x40010800
 8004a9c:	40011400 	.word	0x40011400
 8004aa0:	000004ee 	.word	0x000004ee
 8004aa4:	08006954 	.word	0x08006954

08004aa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	4013      	ands	r3, r2
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d124      	bne.n	8004b08 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	2202      	movs	r2, #2
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d11d      	bne.n	8004b08 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2203      	movs	r2, #3
 8004ad2:	4252      	negs	r2, r2
 8004ad4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	2203      	movs	r2, #3
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	d004      	beq.n	8004af2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	0018      	movs	r0, r3
 8004aec:	f000 fcce 	bl	800548c <HAL_TIM_IC_CaptureCallback>
 8004af0:	e007      	b.n	8004b02 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	0018      	movs	r0, r3
 8004af6:	f000 fcc1 	bl	800547c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	0018      	movs	r0, r3
 8004afe:	f000 fccd 	bl	800549c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	2204      	movs	r2, #4
 8004b10:	4013      	ands	r3, r2
 8004b12:	2b04      	cmp	r3, #4
 8004b14:	d125      	bne.n	8004b62 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	2204      	movs	r2, #4
 8004b1e:	4013      	ands	r3, r2
 8004b20:	2b04      	cmp	r3, #4
 8004b22:	d11e      	bne.n	8004b62 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2205      	movs	r2, #5
 8004b2a:	4252      	negs	r2, r2
 8004b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2202      	movs	r2, #2
 8004b32:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	699a      	ldr	r2, [r3, #24]
 8004b3a:	23c0      	movs	r3, #192	; 0xc0
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4013      	ands	r3, r2
 8004b40:	d004      	beq.n	8004b4c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	0018      	movs	r0, r3
 8004b46:	f000 fca1 	bl	800548c <HAL_TIM_IC_CaptureCallback>
 8004b4a:	e007      	b.n	8004b5c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	0018      	movs	r0, r3
 8004b50:	f000 fc94 	bl	800547c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	0018      	movs	r0, r3
 8004b58:	f000 fca0 	bl	800549c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	2208      	movs	r2, #8
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	2b08      	cmp	r3, #8
 8004b6e:	d124      	bne.n	8004bba <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	2208      	movs	r2, #8
 8004b78:	4013      	ands	r3, r2
 8004b7a:	2b08      	cmp	r3, #8
 8004b7c:	d11d      	bne.n	8004bba <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2209      	movs	r2, #9
 8004b84:	4252      	negs	r2, r2
 8004b86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2204      	movs	r2, #4
 8004b8c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	69db      	ldr	r3, [r3, #28]
 8004b94:	2203      	movs	r2, #3
 8004b96:	4013      	ands	r3, r2
 8004b98:	d004      	beq.n	8004ba4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	0018      	movs	r0, r3
 8004b9e:	f000 fc75 	bl	800548c <HAL_TIM_IC_CaptureCallback>
 8004ba2:	e007      	b.n	8004bb4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	0018      	movs	r0, r3
 8004ba8:	f000 fc68 	bl	800547c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	0018      	movs	r0, r3
 8004bb0:	f000 fc74 	bl	800549c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	2210      	movs	r2, #16
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	2b10      	cmp	r3, #16
 8004bc6:	d125      	bne.n	8004c14 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	2210      	movs	r2, #16
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	2b10      	cmp	r3, #16
 8004bd4:	d11e      	bne.n	8004c14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2211      	movs	r2, #17
 8004bdc:	4252      	negs	r2, r2
 8004bde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2208      	movs	r2, #8
 8004be4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	69da      	ldr	r2, [r3, #28]
 8004bec:	23c0      	movs	r3, #192	; 0xc0
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	d004      	beq.n	8004bfe <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	0018      	movs	r0, r3
 8004bf8:	f000 fc48 	bl	800548c <HAL_TIM_IC_CaptureCallback>
 8004bfc:	e007      	b.n	8004c0e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	0018      	movs	r0, r3
 8004c02:	f000 fc3b 	bl	800547c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	0018      	movs	r0, r3
 8004c0a:	f000 fc47 	bl	800549c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d10f      	bne.n	8004c42 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d108      	bne.n	8004c42 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2202      	movs	r2, #2
 8004c36:	4252      	negs	r2, r2
 8004c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	f7fb fec9 	bl	80009d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	2240      	movs	r2, #64	; 0x40
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	2b40      	cmp	r3, #64	; 0x40
 8004c4e:	d10f      	bne.n	8004c70 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	2240      	movs	r2, #64	; 0x40
 8004c58:	4013      	ands	r3, r2
 8004c5a:	2b40      	cmp	r3, #64	; 0x40
 8004c5c:	d108      	bne.n	8004c70 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2241      	movs	r2, #65	; 0x41
 8004c64:	4252      	negs	r2, r2
 8004c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	0018      	movs	r0, r3
 8004c6c:	f000 fc1e 	bl	80054ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c70:	46c0      	nop			; (mov r8, r8)
 8004c72:	46bd      	mov	sp, r7
 8004c74:	b002      	add	sp, #8
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d011      	beq.n	8004cae <HAL_TIM_PWM_ConfigChannel+0x36>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2b04      	cmp	r3, #4
 8004c8e:	d00e      	beq.n	8004cae <HAL_TIM_PWM_ConfigChannel+0x36>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b08      	cmp	r3, #8
 8004c94:	d00b      	beq.n	8004cae <HAL_TIM_PWM_ConfigChannel+0x36>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2b0c      	cmp	r3, #12
 8004c9a:	d008      	beq.n	8004cae <HAL_TIM_PWM_ConfigChannel+0x36>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b3c      	cmp	r3, #60	; 0x3c
 8004ca0:	d005      	beq.n	8004cae <HAL_TIM_PWM_ConfigChannel+0x36>
 8004ca2:	4a93      	ldr	r2, [pc, #588]	; (8004ef0 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8004ca4:	4b93      	ldr	r3, [pc, #588]	; (8004ef4 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8004ca6:	0011      	movs	r1, r2
 8004ca8:	0018      	movs	r0, r3
 8004caa:	f7fc fa8e 	bl	80011ca <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2b60      	cmp	r3, #96	; 0x60
 8004cb4:	d009      	beq.n	8004cca <HAL_TIM_PWM_ConfigChannel+0x52>
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2b70      	cmp	r3, #112	; 0x70
 8004cbc:	d005      	beq.n	8004cca <HAL_TIM_PWM_ConfigChannel+0x52>
 8004cbe:	4a8e      	ldr	r2, [pc, #568]	; (8004ef8 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8004cc0:	4b8c      	ldr	r3, [pc, #560]	; (8004ef4 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8004cc2:	0011      	movs	r1, r2
 8004cc4:	0018      	movs	r0, r3
 8004cc6:	f7fc fa80 	bl	80011ca <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d009      	beq.n	8004ce6 <HAL_TIM_PWM_ConfigChannel+0x6e>
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d005      	beq.n	8004ce6 <HAL_TIM_PWM_ConfigChannel+0x6e>
 8004cda:	4a88      	ldr	r2, [pc, #544]	; (8004efc <HAL_TIM_PWM_ConfigChannel+0x284>)
 8004cdc:	4b85      	ldr	r3, [pc, #532]	; (8004ef4 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8004cde:	0011      	movs	r1, r2
 8004ce0:	0018      	movs	r0, r3
 8004ce2:	f7fc fa72 	bl	80011ca <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d009      	beq.n	8004d02 <HAL_TIM_PWM_ConfigChannel+0x8a>
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	2b04      	cmp	r3, #4
 8004cf4:	d005      	beq.n	8004d02 <HAL_TIM_PWM_ConfigChannel+0x8a>
 8004cf6:	4a82      	ldr	r2, [pc, #520]	; (8004f00 <HAL_TIM_PWM_ConfigChannel+0x288>)
 8004cf8:	4b7e      	ldr	r3, [pc, #504]	; (8004ef4 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8004cfa:	0011      	movs	r1, r2
 8004cfc:	0018      	movs	r0, r3
 8004cfe:	f7fc fa64 	bl	80011ca <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2238      	movs	r2, #56	; 0x38
 8004d06:	5c9b      	ldrb	r3, [r3, r2]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d101      	bne.n	8004d10 <HAL_TIM_PWM_ConfigChannel+0x98>
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	e0ea      	b.n	8004ee6 <HAL_TIM_PWM_ConfigChannel+0x26e>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2238      	movs	r2, #56	; 0x38
 8004d14:	2101      	movs	r1, #1
 8004d16:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2239      	movs	r2, #57	; 0x39
 8004d1c:	2102      	movs	r1, #2
 8004d1e:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b04      	cmp	r3, #4
 8004d24:	d041      	beq.n	8004daa <HAL_TIM_PWM_ConfigChannel+0x132>
 8004d26:	d802      	bhi.n	8004d2e <HAL_TIM_PWM_ConfigChannel+0xb6>
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d007      	beq.n	8004d3c <HAL_TIM_PWM_ConfigChannel+0xc4>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8004d2c:	e0d2      	b.n	8004ed4 <HAL_TIM_PWM_ConfigChannel+0x25c>
  switch (Channel)
 8004d2e:	2b08      	cmp	r3, #8
 8004d30:	d100      	bne.n	8004d34 <HAL_TIM_PWM_ConfigChannel+0xbc>
 8004d32:	e073      	b.n	8004e1c <HAL_TIM_PWM_ConfigChannel+0x1a4>
 8004d34:	2b0c      	cmp	r3, #12
 8004d36:	d100      	bne.n	8004d3a <HAL_TIM_PWM_ConfigChannel+0xc2>
 8004d38:	e09d      	b.n	8004e76 <HAL_TIM_PWM_ConfigChannel+0x1fe>
      break;
 8004d3a:	e0cb      	b.n	8004ed4 <HAL_TIM_PWM_ConfigChannel+0x25c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	2380      	movs	r3, #128	; 0x80
 8004d42:	05db      	lsls	r3, r3, #23
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d00f      	beq.n	8004d68 <HAL_TIM_PWM_ConfigChannel+0xf0>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a6d      	ldr	r2, [pc, #436]	; (8004f04 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d00a      	beq.n	8004d68 <HAL_TIM_PWM_ConfigChannel+0xf0>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a6c      	ldr	r2, [pc, #432]	; (8004f08 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d005      	beq.n	8004d68 <HAL_TIM_PWM_ConfigChannel+0xf0>
 8004d5c:	4a6b      	ldr	r2, [pc, #428]	; (8004f0c <HAL_TIM_PWM_ConfigChannel+0x294>)
 8004d5e:	4b65      	ldr	r3, [pc, #404]	; (8004ef4 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8004d60:	0011      	movs	r1, r2
 8004d62:	0018      	movs	r0, r3
 8004d64:	f7fc fa31 	bl	80011ca <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68ba      	ldr	r2, [r7, #8]
 8004d6e:	0011      	movs	r1, r2
 8004d70:	0018      	movs	r0, r3
 8004d72:	f000 fbf7 	bl	8005564 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	699a      	ldr	r2, [r3, #24]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2108      	movs	r1, #8
 8004d82:	430a      	orrs	r2, r1
 8004d84:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	699a      	ldr	r2, [r3, #24]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2104      	movs	r1, #4
 8004d92:	438a      	bics	r2, r1
 8004d94:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	6999      	ldr	r1, [r3, #24]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	68da      	ldr	r2, [r3, #12]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	619a      	str	r2, [r3, #24]
      break;
 8004da8:	e094      	b.n	8004ed4 <HAL_TIM_PWM_ConfigChannel+0x25c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	2380      	movs	r3, #128	; 0x80
 8004db0:	05db      	lsls	r3, r3, #23
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d00f      	beq.n	8004dd6 <HAL_TIM_PWM_ConfigChannel+0x15e>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a52      	ldr	r2, [pc, #328]	; (8004f04 <HAL_TIM_PWM_ConfigChannel+0x28c>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d00a      	beq.n	8004dd6 <HAL_TIM_PWM_ConfigChannel+0x15e>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a50      	ldr	r2, [pc, #320]	; (8004f08 <HAL_TIM_PWM_ConfigChannel+0x290>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d005      	beq.n	8004dd6 <HAL_TIM_PWM_ConfigChannel+0x15e>
 8004dca:	4a51      	ldr	r2, [pc, #324]	; (8004f10 <HAL_TIM_PWM_ConfigChannel+0x298>)
 8004dcc:	4b49      	ldr	r3, [pc, #292]	; (8004ef4 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8004dce:	0011      	movs	r1, r2
 8004dd0:	0018      	movs	r0, r3
 8004dd2:	f7fc f9fa 	bl	80011ca <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	0011      	movs	r1, r2
 8004dde:	0018      	movs	r0, r3
 8004de0:	f000 fbfc 	bl	80055dc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	699a      	ldr	r2, [r3, #24]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2180      	movs	r1, #128	; 0x80
 8004df0:	0109      	lsls	r1, r1, #4
 8004df2:	430a      	orrs	r2, r1
 8004df4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	699a      	ldr	r2, [r3, #24]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4944      	ldr	r1, [pc, #272]	; (8004f14 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8004e02:	400a      	ands	r2, r1
 8004e04:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	6999      	ldr	r1, [r3, #24]
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	021a      	lsls	r2, r3, #8
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	619a      	str	r2, [r3, #24]
      break;
 8004e1a:	e05b      	b.n	8004ed4 <HAL_TIM_PWM_ConfigChannel+0x25c>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	2380      	movs	r3, #128	; 0x80
 8004e22:	05db      	lsls	r3, r3, #23
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d005      	beq.n	8004e34 <HAL_TIM_PWM_ConfigChannel+0x1bc>
 8004e28:	4a3b      	ldr	r2, [pc, #236]	; (8004f18 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 8004e2a:	4b32      	ldr	r3, [pc, #200]	; (8004ef4 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8004e2c:	0011      	movs	r1, r2
 8004e2e:	0018      	movs	r0, r3
 8004e30:	f7fc f9cb 	bl	80011ca <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	0011      	movs	r1, r2
 8004e3c:	0018      	movs	r0, r3
 8004e3e:	f000 fc0f 	bl	8005660 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	69da      	ldr	r2, [r3, #28]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2108      	movs	r1, #8
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	69da      	ldr	r2, [r3, #28]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2104      	movs	r1, #4
 8004e5e:	438a      	bics	r2, r1
 8004e60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	69d9      	ldr	r1, [r3, #28]
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	68da      	ldr	r2, [r3, #12]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	430a      	orrs	r2, r1
 8004e72:	61da      	str	r2, [r3, #28]
      break;
 8004e74:	e02e      	b.n	8004ed4 <HAL_TIM_PWM_ConfigChannel+0x25c>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	2380      	movs	r3, #128	; 0x80
 8004e7c:	05db      	lsls	r3, r3, #23
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d005      	beq.n	8004e8e <HAL_TIM_PWM_ConfigChannel+0x216>
 8004e82:	4a26      	ldr	r2, [pc, #152]	; (8004f1c <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 8004e84:	4b1b      	ldr	r3, [pc, #108]	; (8004ef4 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8004e86:	0011      	movs	r1, r2
 8004e88:	0018      	movs	r0, r3
 8004e8a:	f7fc f99e 	bl	80011ca <assert_failed>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	0011      	movs	r1, r2
 8004e96:	0018      	movs	r0, r3
 8004e98:	f000 fc22 	bl	80056e0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	69da      	ldr	r2, [r3, #28]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2180      	movs	r1, #128	; 0x80
 8004ea8:	0109      	lsls	r1, r1, #4
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	69da      	ldr	r2, [r3, #28]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4916      	ldr	r1, [pc, #88]	; (8004f14 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8004eba:	400a      	ands	r2, r1
 8004ebc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	69d9      	ldr	r1, [r3, #28]
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	021a      	lsls	r2, r3, #8
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	61da      	str	r2, [r3, #28]
      break;
 8004ed2:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2239      	movs	r2, #57	; 0x39
 8004ed8:	2101      	movs	r1, #1
 8004eda:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2238      	movs	r2, #56	; 0x38
 8004ee0:	2100      	movs	r1, #0
 8004ee2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	0018      	movs	r0, r3
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	b004      	add	sp, #16
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	46c0      	nop			; (mov r8, r8)
 8004ef0:	00000d75 	.word	0x00000d75
 8004ef4:	08006954 	.word	0x08006954
 8004ef8:	00000d76 	.word	0x00000d76
 8004efc:	00000d77 	.word	0x00000d77
 8004f00:	00000d78 	.word	0x00000d78
 8004f04:	40010800 	.word	0x40010800
 8004f08:	40011400 	.word	0x40011400
 8004f0c:	00000d84 	.word	0x00000d84
 8004f10:	00000d95 	.word	0x00000d95
 8004f14:	fffffbff 	.word	0xfffffbff
 8004f18:	00000da6 	.word	0x00000da6
 8004f1c:	00000db7 	.word	0x00000db7

08004f20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2238      	movs	r2, #56	; 0x38
 8004f2e:	5c9b      	ldrb	r3, [r3, r2]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d101      	bne.n	8004f38 <HAL_TIM_ConfigClockSource+0x18>
 8004f34:	2302      	movs	r3, #2
 8004f36:	e28b      	b.n	8005450 <HAL_TIM_ConfigClockSource+0x530>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2238      	movs	r2, #56	; 0x38
 8004f3c:	2101      	movs	r1, #1
 8004f3e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2239      	movs	r2, #57	; 0x39
 8004f44:	2102      	movs	r1, #2
 8004f46:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	2380      	movs	r3, #128	; 0x80
 8004f4e:	015b      	lsls	r3, r3, #5
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d02b      	beq.n	8004fac <HAL_TIM_ConfigClockSource+0x8c>
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	2380      	movs	r3, #128	; 0x80
 8004f5a:	019b      	lsls	r3, r3, #6
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d025      	beq.n	8004fac <HAL_TIM_ConfigClockSource+0x8c>
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d021      	beq.n	8004fac <HAL_TIM_ConfigClockSource+0x8c>
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2b10      	cmp	r3, #16
 8004f6e:	d01d      	beq.n	8004fac <HAL_TIM_ConfigClockSource+0x8c>
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2b20      	cmp	r3, #32
 8004f76:	d019      	beq.n	8004fac <HAL_TIM_ConfigClockSource+0x8c>
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2b30      	cmp	r3, #48	; 0x30
 8004f7e:	d015      	beq.n	8004fac <HAL_TIM_ConfigClockSource+0x8c>
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2b40      	cmp	r3, #64	; 0x40
 8004f86:	d011      	beq.n	8004fac <HAL_TIM_ConfigClockSource+0x8c>
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2b50      	cmp	r3, #80	; 0x50
 8004f8e:	d00d      	beq.n	8004fac <HAL_TIM_ConfigClockSource+0x8c>
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2b60      	cmp	r3, #96	; 0x60
 8004f96:	d009      	beq.n	8004fac <HAL_TIM_ConfigClockSource+0x8c>
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2b70      	cmp	r3, #112	; 0x70
 8004f9e:	d005      	beq.n	8004fac <HAL_TIM_ConfigClockSource+0x8c>
 8004fa0:	4abe      	ldr	r2, [pc, #760]	; (800529c <HAL_TIM_ConfigClockSource+0x37c>)
 8004fa2:	4bbf      	ldr	r3, [pc, #764]	; (80052a0 <HAL_TIM_ConfigClockSource+0x380>)
 8004fa4:	0011      	movs	r1, r2
 8004fa6:	0018      	movs	r0, r3
 8004fa8:	f7fc f90f 	bl	80011ca <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2277      	movs	r2, #119	; 0x77
 8004fb8:	4393      	bics	r3, r2
 8004fba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	4ab9      	ldr	r2, [pc, #740]	; (80052a4 <HAL_TIM_ConfigClockSource+0x384>)
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2b40      	cmp	r3, #64	; 0x40
 8004fd2:	d100      	bne.n	8004fd6 <HAL_TIM_ConfigClockSource+0xb6>
 8004fd4:	e1cc      	b.n	8005370 <HAL_TIM_ConfigClockSource+0x450>
 8004fd6:	d80e      	bhi.n	8004ff6 <HAL_TIM_ConfigClockSource+0xd6>
 8004fd8:	2b10      	cmp	r3, #16
 8004fda:	d100      	bne.n	8004fde <HAL_TIM_ConfigClockSource+0xbe>
 8004fdc:	e20f      	b.n	80053fe <HAL_TIM_ConfigClockSource+0x4de>
 8004fde:	d803      	bhi.n	8004fe8 <HAL_TIM_ConfigClockSource+0xc8>
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d100      	bne.n	8004fe6 <HAL_TIM_ConfigClockSource+0xc6>
 8004fe4:	e20b      	b.n	80053fe <HAL_TIM_ConfigClockSource+0x4de>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004fe6:	e22a      	b.n	800543e <HAL_TIM_ConfigClockSource+0x51e>
  switch (sClockSourceConfig->ClockSource)
 8004fe8:	2b20      	cmp	r3, #32
 8004fea:	d100      	bne.n	8004fee <HAL_TIM_ConfigClockSource+0xce>
 8004fec:	e207      	b.n	80053fe <HAL_TIM_ConfigClockSource+0x4de>
 8004fee:	2b30      	cmp	r3, #48	; 0x30
 8004ff0:	d100      	bne.n	8004ff4 <HAL_TIM_ConfigClockSource+0xd4>
 8004ff2:	e204      	b.n	80053fe <HAL_TIM_ConfigClockSource+0x4de>
      break;
 8004ff4:	e223      	b.n	800543e <HAL_TIM_ConfigClockSource+0x51e>
  switch (sClockSourceConfig->ClockSource)
 8004ff6:	2b70      	cmp	r3, #112	; 0x70
 8004ff8:	d031      	beq.n	800505e <HAL_TIM_ConfigClockSource+0x13e>
 8004ffa:	d806      	bhi.n	800500a <HAL_TIM_ConfigClockSource+0xea>
 8004ffc:	2b50      	cmp	r3, #80	; 0x50
 8004ffe:	d100      	bne.n	8005002 <HAL_TIM_ConfigClockSource+0xe2>
 8005000:	e104      	b.n	800520c <HAL_TIM_ConfigClockSource+0x2ec>
 8005002:	2b60      	cmp	r3, #96	; 0x60
 8005004:	d100      	bne.n	8005008 <HAL_TIM_ConfigClockSource+0xe8>
 8005006:	e16b      	b.n	80052e0 <HAL_TIM_ConfigClockSource+0x3c0>
      break;
 8005008:	e219      	b.n	800543e <HAL_TIM_ConfigClockSource+0x51e>
  switch (sClockSourceConfig->ClockSource)
 800500a:	2280      	movs	r2, #128	; 0x80
 800500c:	0152      	lsls	r2, r2, #5
 800500e:	4293      	cmp	r3, r2
 8005010:	d005      	beq.n	800501e <HAL_TIM_ConfigClockSource+0xfe>
 8005012:	2280      	movs	r2, #128	; 0x80
 8005014:	0192      	lsls	r2, r2, #6
 8005016:	4293      	cmp	r3, r2
 8005018:	d100      	bne.n	800501c <HAL_TIM_ConfigClockSource+0xfc>
 800501a:	e08a      	b.n	8005132 <HAL_TIM_ConfigClockSource+0x212>
      break;
 800501c:	e20f      	b.n	800543e <HAL_TIM_ConfigClockSource+0x51e>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	2380      	movs	r3, #128	; 0x80
 8005024:	05db      	lsls	r3, r3, #23
 8005026:	429a      	cmp	r2, r3
 8005028:	d100      	bne.n	800502c <HAL_TIM_ConfigClockSource+0x10c>
 800502a:	e207      	b.n	800543c <HAL_TIM_ConfigClockSource+0x51c>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a9d      	ldr	r2, [pc, #628]	; (80052a8 <HAL_TIM_ConfigClockSource+0x388>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d100      	bne.n	8005038 <HAL_TIM_ConfigClockSource+0x118>
 8005036:	e201      	b.n	800543c <HAL_TIM_ConfigClockSource+0x51c>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a9b      	ldr	r2, [pc, #620]	; (80052ac <HAL_TIM_ConfigClockSource+0x38c>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d100      	bne.n	8005044 <HAL_TIM_ConfigClockSource+0x124>
 8005042:	e1fb      	b.n	800543c <HAL_TIM_ConfigClockSource+0x51c>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a99      	ldr	r2, [pc, #612]	; (80052b0 <HAL_TIM_ConfigClockSource+0x390>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d100      	bne.n	8005050 <HAL_TIM_ConfigClockSource+0x130>
 800504e:	e1f5      	b.n	800543c <HAL_TIM_ConfigClockSource+0x51c>
 8005050:	4a98      	ldr	r2, [pc, #608]	; (80052b4 <HAL_TIM_ConfigClockSource+0x394>)
 8005052:	4b93      	ldr	r3, [pc, #588]	; (80052a0 <HAL_TIM_ConfigClockSource+0x380>)
 8005054:	0011      	movs	r1, r2
 8005056:	0018      	movs	r0, r3
 8005058:	f7fc f8b7 	bl	80011ca <assert_failed>
      break;
 800505c:	e1ee      	b.n	800543c <HAL_TIM_ConfigClockSource+0x51c>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	2380      	movs	r3, #128	; 0x80
 8005064:	05db      	lsls	r3, r3, #23
 8005066:	429a      	cmp	r2, r3
 8005068:	d00a      	beq.n	8005080 <HAL_TIM_ConfigClockSource+0x160>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a8f      	ldr	r2, [pc, #572]	; (80052ac <HAL_TIM_ConfigClockSource+0x38c>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d005      	beq.n	8005080 <HAL_TIM_ConfigClockSource+0x160>
 8005074:	4a90      	ldr	r2, [pc, #576]	; (80052b8 <HAL_TIM_ConfigClockSource+0x398>)
 8005076:	4b8a      	ldr	r3, [pc, #552]	; (80052a0 <HAL_TIM_ConfigClockSource+0x380>)
 8005078:	0011      	movs	r1, r2
 800507a:	0018      	movs	r0, r3
 800507c:	f7fc f8a5 	bl	80011ca <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d017      	beq.n	80050b8 <HAL_TIM_ConfigClockSource+0x198>
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	689a      	ldr	r2, [r3, #8]
 800508c:	2380      	movs	r3, #128	; 0x80
 800508e:	015b      	lsls	r3, r3, #5
 8005090:	429a      	cmp	r2, r3
 8005092:	d011      	beq.n	80050b8 <HAL_TIM_ConfigClockSource+0x198>
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	689a      	ldr	r2, [r3, #8]
 8005098:	2380      	movs	r3, #128	; 0x80
 800509a:	019b      	lsls	r3, r3, #6
 800509c:	429a      	cmp	r2, r3
 800509e:	d00b      	beq.n	80050b8 <HAL_TIM_ConfigClockSource+0x198>
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	689a      	ldr	r2, [r3, #8]
 80050a4:	23c0      	movs	r3, #192	; 0xc0
 80050a6:	019b      	lsls	r3, r3, #6
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d005      	beq.n	80050b8 <HAL_TIM_ConfigClockSource+0x198>
 80050ac:	4a83      	ldr	r2, [pc, #524]	; (80052bc <HAL_TIM_ConfigClockSource+0x39c>)
 80050ae:	4b7c      	ldr	r3, [pc, #496]	; (80052a0 <HAL_TIM_ConfigClockSource+0x380>)
 80050b0:	0011      	movs	r1, r2
 80050b2:	0018      	movs	r0, r3
 80050b4:	f7fc f889 	bl	80011ca <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	2380      	movs	r3, #128	; 0x80
 80050be:	021b      	lsls	r3, r3, #8
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d015      	beq.n	80050f0 <HAL_TIM_ConfigClockSource+0x1d0>
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d011      	beq.n	80050f0 <HAL_TIM_ConfigClockSource+0x1d0>
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00d      	beq.n	80050f0 <HAL_TIM_ConfigClockSource+0x1d0>
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d009      	beq.n	80050f0 <HAL_TIM_ConfigClockSource+0x1d0>
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	2b0a      	cmp	r3, #10
 80050e2:	d005      	beq.n	80050f0 <HAL_TIM_ConfigClockSource+0x1d0>
 80050e4:	4a76      	ldr	r2, [pc, #472]	; (80052c0 <HAL_TIM_ConfigClockSource+0x3a0>)
 80050e6:	4b6e      	ldr	r3, [pc, #440]	; (80052a0 <HAL_TIM_ConfigClockSource+0x380>)
 80050e8:	0011      	movs	r1, r2
 80050ea:	0018      	movs	r0, r3
 80050ec:	f7fc f86d 	bl	80011ca <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	2b0f      	cmp	r3, #15
 80050f6:	d905      	bls.n	8005104 <HAL_TIM_ConfigClockSource+0x1e4>
 80050f8:	4a72      	ldr	r2, [pc, #456]	; (80052c4 <HAL_TIM_ConfigClockSource+0x3a4>)
 80050fa:	4b69      	ldr	r3, [pc, #420]	; (80052a0 <HAL_TIM_ConfigClockSource+0x380>)
 80050fc:	0011      	movs	r1, r2
 80050fe:	0018      	movs	r0, r3
 8005100:	f7fc f863 	bl	80011ca <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6818      	ldr	r0, [r3, #0]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	6899      	ldr	r1, [r3, #8]
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685a      	ldr	r2, [r3, #4]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	f000 fba4 	bl	8005860 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2277      	movs	r2, #119	; 0x77
 8005124:	4313      	orrs	r3, r2
 8005126:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	609a      	str	r2, [r3, #8]
      break;
 8005130:	e185      	b.n	800543e <HAL_TIM_ConfigClockSource+0x51e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	2380      	movs	r3, #128	; 0x80
 8005138:	05db      	lsls	r3, r3, #23
 800513a:	429a      	cmp	r2, r3
 800513c:	d00f      	beq.n	800515e <HAL_TIM_ConfigClockSource+0x23e>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a5a      	ldr	r2, [pc, #360]	; (80052ac <HAL_TIM_ConfigClockSource+0x38c>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d00a      	beq.n	800515e <HAL_TIM_ConfigClockSource+0x23e>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a58      	ldr	r2, [pc, #352]	; (80052b0 <HAL_TIM_ConfigClockSource+0x390>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d005      	beq.n	800515e <HAL_TIM_ConfigClockSource+0x23e>
 8005152:	4a5d      	ldr	r2, [pc, #372]	; (80052c8 <HAL_TIM_ConfigClockSource+0x3a8>)
 8005154:	4b52      	ldr	r3, [pc, #328]	; (80052a0 <HAL_TIM_ConfigClockSource+0x380>)
 8005156:	0011      	movs	r1, r2
 8005158:	0018      	movs	r0, r3
 800515a:	f7fc f836 	bl	80011ca <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d017      	beq.n	8005196 <HAL_TIM_ConfigClockSource+0x276>
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	689a      	ldr	r2, [r3, #8]
 800516a:	2380      	movs	r3, #128	; 0x80
 800516c:	015b      	lsls	r3, r3, #5
 800516e:	429a      	cmp	r2, r3
 8005170:	d011      	beq.n	8005196 <HAL_TIM_ConfigClockSource+0x276>
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	689a      	ldr	r2, [r3, #8]
 8005176:	2380      	movs	r3, #128	; 0x80
 8005178:	019b      	lsls	r3, r3, #6
 800517a:	429a      	cmp	r2, r3
 800517c:	d00b      	beq.n	8005196 <HAL_TIM_ConfigClockSource+0x276>
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	689a      	ldr	r2, [r3, #8]
 8005182:	23c0      	movs	r3, #192	; 0xc0
 8005184:	019b      	lsls	r3, r3, #6
 8005186:	429a      	cmp	r2, r3
 8005188:	d005      	beq.n	8005196 <HAL_TIM_ConfigClockSource+0x276>
 800518a:	4a50      	ldr	r2, [pc, #320]	; (80052cc <HAL_TIM_ConfigClockSource+0x3ac>)
 800518c:	4b44      	ldr	r3, [pc, #272]	; (80052a0 <HAL_TIM_ConfigClockSource+0x380>)
 800518e:	0011      	movs	r1, r2
 8005190:	0018      	movs	r0, r3
 8005192:	f7fc f81a 	bl	80011ca <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	2380      	movs	r3, #128	; 0x80
 800519c:	021b      	lsls	r3, r3, #8
 800519e:	429a      	cmp	r2, r3
 80051a0:	d016      	beq.n	80051d0 <HAL_TIM_ConfigClockSource+0x2b0>
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d012      	beq.n	80051d0 <HAL_TIM_ConfigClockSource+0x2b0>
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00e      	beq.n	80051d0 <HAL_TIM_ConfigClockSource+0x2b0>
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d00a      	beq.n	80051d0 <HAL_TIM_ConfigClockSource+0x2b0>
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	2b0a      	cmp	r3, #10
 80051c0:	d006      	beq.n	80051d0 <HAL_TIM_ConfigClockSource+0x2b0>
 80051c2:	2388      	movs	r3, #136	; 0x88
 80051c4:	015a      	lsls	r2, r3, #5
 80051c6:	4b36      	ldr	r3, [pc, #216]	; (80052a0 <HAL_TIM_ConfigClockSource+0x380>)
 80051c8:	0011      	movs	r1, r2
 80051ca:	0018      	movs	r0, r3
 80051cc:	f7fb fffd 	bl	80011ca <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	2b0f      	cmp	r3, #15
 80051d6:	d905      	bls.n	80051e4 <HAL_TIM_ConfigClockSource+0x2c4>
 80051d8:	4a3d      	ldr	r2, [pc, #244]	; (80052d0 <HAL_TIM_ConfigClockSource+0x3b0>)
 80051da:	4b31      	ldr	r3, [pc, #196]	; (80052a0 <HAL_TIM_ConfigClockSource+0x380>)
 80051dc:	0011      	movs	r1, r2
 80051de:	0018      	movs	r0, r3
 80051e0:	f7fb fff3 	bl	80011ca <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6818      	ldr	r0, [r3, #0]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	6899      	ldr	r1, [r3, #8]
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685a      	ldr	r2, [r3, #4]
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f000 fb34 	bl	8005860 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689a      	ldr	r2, [r3, #8]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2180      	movs	r1, #128	; 0x80
 8005204:	01c9      	lsls	r1, r1, #7
 8005206:	430a      	orrs	r2, r1
 8005208:	609a      	str	r2, [r3, #8]
      break;
 800520a:	e118      	b.n	800543e <HAL_TIM_ConfigClockSource+0x51e>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	2380      	movs	r3, #128	; 0x80
 8005212:	05db      	lsls	r3, r3, #23
 8005214:	429a      	cmp	r2, r3
 8005216:	d00a      	beq.n	800522e <HAL_TIM_ConfigClockSource+0x30e>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a23      	ldr	r2, [pc, #140]	; (80052ac <HAL_TIM_ConfigClockSource+0x38c>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d005      	beq.n	800522e <HAL_TIM_ConfigClockSource+0x30e>
 8005222:	4a2c      	ldr	r2, [pc, #176]	; (80052d4 <HAL_TIM_ConfigClockSource+0x3b4>)
 8005224:	4b1e      	ldr	r3, [pc, #120]	; (80052a0 <HAL_TIM_ConfigClockSource+0x380>)
 8005226:	0011      	movs	r1, r2
 8005228:	0018      	movs	r0, r3
 800522a:	f7fb ffce 	bl	80011ca <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	685a      	ldr	r2, [r3, #4]
 8005232:	2380      	movs	r3, #128	; 0x80
 8005234:	021b      	lsls	r3, r3, #8
 8005236:	429a      	cmp	r2, r3
 8005238:	d015      	beq.n	8005266 <HAL_TIM_ConfigClockSource+0x346>
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d011      	beq.n	8005266 <HAL_TIM_ConfigClockSource+0x346>
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00d      	beq.n	8005266 <HAL_TIM_ConfigClockSource+0x346>
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	2b02      	cmp	r3, #2
 8005250:	d009      	beq.n	8005266 <HAL_TIM_ConfigClockSource+0x346>
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	2b0a      	cmp	r3, #10
 8005258:	d005      	beq.n	8005266 <HAL_TIM_ConfigClockSource+0x346>
 800525a:	4a1f      	ldr	r2, [pc, #124]	; (80052d8 <HAL_TIM_ConfigClockSource+0x3b8>)
 800525c:	4b10      	ldr	r3, [pc, #64]	; (80052a0 <HAL_TIM_ConfigClockSource+0x380>)
 800525e:	0011      	movs	r1, r2
 8005260:	0018      	movs	r0, r3
 8005262:	f7fb ffb2 	bl	80011ca <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	2b0f      	cmp	r3, #15
 800526c:	d905      	bls.n	800527a <HAL_TIM_ConfigClockSource+0x35a>
 800526e:	4a1b      	ldr	r2, [pc, #108]	; (80052dc <HAL_TIM_ConfigClockSource+0x3bc>)
 8005270:	4b0b      	ldr	r3, [pc, #44]	; (80052a0 <HAL_TIM_ConfigClockSource+0x380>)
 8005272:	0011      	movs	r1, r2
 8005274:	0018      	movs	r0, r3
 8005276:	f7fb ffa8 	bl	80011ca <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6818      	ldr	r0, [r3, #0]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	6859      	ldr	r1, [r3, #4]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	001a      	movs	r2, r3
 8005288:	f000 fa70 	bl	800576c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2150      	movs	r1, #80	; 0x50
 8005292:	0018      	movs	r0, r3
 8005294:	f000 faca 	bl	800582c <TIM_ITRx_SetConfig>
      break;
 8005298:	e0d1      	b.n	800543e <HAL_TIM_ConfigClockSource+0x51e>
 800529a:	46c0      	nop			; (mov r8, r8)
 800529c:	000010d1 	.word	0x000010d1
 80052a0:	08006954 	.word	0x08006954
 80052a4:	ffff00ff 	.word	0xffff00ff
 80052a8:	40001000 	.word	0x40001000
 80052ac:	40010800 	.word	0x40010800
 80052b0:	40011400 	.word	0x40011400
 80052b4:	000010dd 	.word	0x000010dd
 80052b8:	000010e4 	.word	0x000010e4
 80052bc:	000010e7 	.word	0x000010e7
 80052c0:	000010e8 	.word	0x000010e8
 80052c4:	000010e9 	.word	0x000010e9
 80052c8:	000010fc 	.word	0x000010fc
 80052cc:	000010ff 	.word	0x000010ff
 80052d0:	00001101 	.word	0x00001101
 80052d4:	00001110 	.word	0x00001110
 80052d8:	00001113 	.word	0x00001113
 80052dc:	00001114 	.word	0x00001114
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	2380      	movs	r3, #128	; 0x80
 80052e6:	05db      	lsls	r3, r3, #23
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d00b      	beq.n	8005304 <HAL_TIM_ConfigClockSource+0x3e4>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a59      	ldr	r2, [pc, #356]	; (8005458 <HAL_TIM_ConfigClockSource+0x538>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d006      	beq.n	8005304 <HAL_TIM_ConfigClockSource+0x3e4>
 80052f6:	2389      	movs	r3, #137	; 0x89
 80052f8:	015a      	lsls	r2, r3, #5
 80052fa:	4b58      	ldr	r3, [pc, #352]	; (800545c <HAL_TIM_ConfigClockSource+0x53c>)
 80052fc:	0011      	movs	r1, r2
 80052fe:	0018      	movs	r0, r3
 8005300:	f7fb ff63 	bl	80011ca <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	685a      	ldr	r2, [r3, #4]
 8005308:	2380      	movs	r3, #128	; 0x80
 800530a:	021b      	lsls	r3, r3, #8
 800530c:	429a      	cmp	r2, r3
 800530e:	d015      	beq.n	800533c <HAL_TIM_ConfigClockSource+0x41c>
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d011      	beq.n	800533c <HAL_TIM_ConfigClockSource+0x41c>
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00d      	beq.n	800533c <HAL_TIM_ConfigClockSource+0x41c>
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	2b02      	cmp	r3, #2
 8005326:	d009      	beq.n	800533c <HAL_TIM_ConfigClockSource+0x41c>
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	2b0a      	cmp	r3, #10
 800532e:	d005      	beq.n	800533c <HAL_TIM_ConfigClockSource+0x41c>
 8005330:	4a4b      	ldr	r2, [pc, #300]	; (8005460 <HAL_TIM_ConfigClockSource+0x540>)
 8005332:	4b4a      	ldr	r3, [pc, #296]	; (800545c <HAL_TIM_ConfigClockSource+0x53c>)
 8005334:	0011      	movs	r1, r2
 8005336:	0018      	movs	r0, r3
 8005338:	f7fb ff47 	bl	80011ca <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	2b0f      	cmp	r3, #15
 8005342:	d905      	bls.n	8005350 <HAL_TIM_ConfigClockSource+0x430>
 8005344:	4a47      	ldr	r2, [pc, #284]	; (8005464 <HAL_TIM_ConfigClockSource+0x544>)
 8005346:	4b45      	ldr	r3, [pc, #276]	; (800545c <HAL_TIM_ConfigClockSource+0x53c>)
 8005348:	0011      	movs	r1, r2
 800534a:	0018      	movs	r0, r3
 800534c:	f7fb ff3d 	bl	80011ca <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6818      	ldr	r0, [r3, #0]
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	6859      	ldr	r1, [r3, #4]
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	001a      	movs	r2, r3
 800535e:	f000 fa33 	bl	80057c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2160      	movs	r1, #96	; 0x60
 8005368:	0018      	movs	r0, r3
 800536a:	f000 fa5f 	bl	800582c <TIM_ITRx_SetConfig>
      break;
 800536e:	e066      	b.n	800543e <HAL_TIM_ConfigClockSource+0x51e>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	2380      	movs	r3, #128	; 0x80
 8005376:	05db      	lsls	r3, r3, #23
 8005378:	429a      	cmp	r2, r3
 800537a:	d00a      	beq.n	8005392 <HAL_TIM_ConfigClockSource+0x472>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a35      	ldr	r2, [pc, #212]	; (8005458 <HAL_TIM_ConfigClockSource+0x538>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d005      	beq.n	8005392 <HAL_TIM_ConfigClockSource+0x472>
 8005386:	4a38      	ldr	r2, [pc, #224]	; (8005468 <HAL_TIM_ConfigClockSource+0x548>)
 8005388:	4b34      	ldr	r3, [pc, #208]	; (800545c <HAL_TIM_ConfigClockSource+0x53c>)
 800538a:	0011      	movs	r1, r2
 800538c:	0018      	movs	r0, r3
 800538e:	f7fb ff1c 	bl	80011ca <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	2380      	movs	r3, #128	; 0x80
 8005398:	021b      	lsls	r3, r3, #8
 800539a:	429a      	cmp	r2, r3
 800539c:	d015      	beq.n	80053ca <HAL_TIM_ConfigClockSource+0x4aa>
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d011      	beq.n	80053ca <HAL_TIM_ConfigClockSource+0x4aa>
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00d      	beq.n	80053ca <HAL_TIM_ConfigClockSource+0x4aa>
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d009      	beq.n	80053ca <HAL_TIM_ConfigClockSource+0x4aa>
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	2b0a      	cmp	r3, #10
 80053bc:	d005      	beq.n	80053ca <HAL_TIM_ConfigClockSource+0x4aa>
 80053be:	4a2b      	ldr	r2, [pc, #172]	; (800546c <HAL_TIM_ConfigClockSource+0x54c>)
 80053c0:	4b26      	ldr	r3, [pc, #152]	; (800545c <HAL_TIM_ConfigClockSource+0x53c>)
 80053c2:	0011      	movs	r1, r2
 80053c4:	0018      	movs	r0, r3
 80053c6:	f7fb ff00 	bl	80011ca <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	2b0f      	cmp	r3, #15
 80053d0:	d905      	bls.n	80053de <HAL_TIM_ConfigClockSource+0x4be>
 80053d2:	4a27      	ldr	r2, [pc, #156]	; (8005470 <HAL_TIM_ConfigClockSource+0x550>)
 80053d4:	4b21      	ldr	r3, [pc, #132]	; (800545c <HAL_TIM_ConfigClockSource+0x53c>)
 80053d6:	0011      	movs	r1, r2
 80053d8:	0018      	movs	r0, r3
 80053da:	f7fb fef6 	bl	80011ca <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6818      	ldr	r0, [r3, #0]
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	6859      	ldr	r1, [r3, #4]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	001a      	movs	r2, r3
 80053ec:	f000 f9be 	bl	800576c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2140      	movs	r1, #64	; 0x40
 80053f6:	0018      	movs	r0, r3
 80053f8:	f000 fa18 	bl	800582c <TIM_ITRx_SetConfig>
      break;
 80053fc:	e01f      	b.n	800543e <HAL_TIM_ConfigClockSource+0x51e>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	2380      	movs	r3, #128	; 0x80
 8005404:	05db      	lsls	r3, r3, #23
 8005406:	429a      	cmp	r2, r3
 8005408:	d00f      	beq.n	800542a <HAL_TIM_ConfigClockSource+0x50a>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a12      	ldr	r2, [pc, #72]	; (8005458 <HAL_TIM_ConfigClockSource+0x538>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d00a      	beq.n	800542a <HAL_TIM_ConfigClockSource+0x50a>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a16      	ldr	r2, [pc, #88]	; (8005474 <HAL_TIM_ConfigClockSource+0x554>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d005      	beq.n	800542a <HAL_TIM_ConfigClockSource+0x50a>
 800541e:	4a16      	ldr	r2, [pc, #88]	; (8005478 <HAL_TIM_ConfigClockSource+0x558>)
 8005420:	4b0e      	ldr	r3, [pc, #56]	; (800545c <HAL_TIM_ConfigClockSource+0x53c>)
 8005422:	0011      	movs	r1, r2
 8005424:	0018      	movs	r0, r3
 8005426:	f7fb fed0 	bl	80011ca <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	0019      	movs	r1, r3
 8005434:	0010      	movs	r0, r2
 8005436:	f000 f9f9 	bl	800582c <TIM_ITRx_SetConfig>
      break;
 800543a:	e000      	b.n	800543e <HAL_TIM_ConfigClockSource+0x51e>
      break;
 800543c:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2239      	movs	r2, #57	; 0x39
 8005442:	2101      	movs	r1, #1
 8005444:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2238      	movs	r2, #56	; 0x38
 800544a:	2100      	movs	r1, #0
 800544c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	0018      	movs	r0, r3
 8005452:	46bd      	mov	sp, r7
 8005454:	b004      	add	sp, #16
 8005456:	bd80      	pop	{r7, pc}
 8005458:	40010800 	.word	0x40010800
 800545c:	08006954 	.word	0x08006954
 8005460:	00001123 	.word	0x00001123
 8005464:	00001124 	.word	0x00001124
 8005468:	00001130 	.word	0x00001130
 800546c:	00001133 	.word	0x00001133
 8005470:	00001134 	.word	0x00001134
 8005474:	40011400 	.word	0x40011400
 8005478:	00001143 	.word	0x00001143

0800547c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005484:	46c0      	nop			; (mov r8, r8)
 8005486:	46bd      	mov	sp, r7
 8005488:	b002      	add	sp, #8
 800548a:	bd80      	pop	{r7, pc}

0800548c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005494:	46c0      	nop			; (mov r8, r8)
 8005496:	46bd      	mov	sp, r7
 8005498:	b002      	add	sp, #8
 800549a:	bd80      	pop	{r7, pc}

0800549c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054a4:	46c0      	nop			; (mov r8, r8)
 80054a6:	46bd      	mov	sp, r7
 80054a8:	b002      	add	sp, #8
 80054aa:	bd80      	pop	{r7, pc}

080054ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054b4:	46c0      	nop			; (mov r8, r8)
 80054b6:	46bd      	mov	sp, r7
 80054b8:	b002      	add	sp, #8
 80054ba:	bd80      	pop	{r7, pc}

080054bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	2380      	movs	r3, #128	; 0x80
 80054d0:	05db      	lsls	r3, r3, #23
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d007      	beq.n	80054e6 <TIM_Base_SetConfig+0x2a>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a1f      	ldr	r2, [pc, #124]	; (8005558 <TIM_Base_SetConfig+0x9c>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d003      	beq.n	80054e6 <TIM_Base_SetConfig+0x2a>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a1e      	ldr	r2, [pc, #120]	; (800555c <TIM_Base_SetConfig+0xa0>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d108      	bne.n	80054f8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2270      	movs	r2, #112	; 0x70
 80054ea:	4393      	bics	r3, r2
 80054ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	2380      	movs	r3, #128	; 0x80
 80054fc:	05db      	lsls	r3, r3, #23
 80054fe:	429a      	cmp	r2, r3
 8005500:	d007      	beq.n	8005512 <TIM_Base_SetConfig+0x56>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a14      	ldr	r2, [pc, #80]	; (8005558 <TIM_Base_SetConfig+0x9c>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d003      	beq.n	8005512 <TIM_Base_SetConfig+0x56>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a13      	ldr	r2, [pc, #76]	; (800555c <TIM_Base_SetConfig+0xa0>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d108      	bne.n	8005524 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	4a12      	ldr	r2, [pc, #72]	; (8005560 <TIM_Base_SetConfig+0xa4>)
 8005516:	4013      	ands	r3, r2
 8005518:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	4313      	orrs	r3, r2
 8005522:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2280      	movs	r2, #128	; 0x80
 8005528:	4393      	bics	r3, r2
 800552a:	001a      	movs	r2, r3
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	4313      	orrs	r3, r2
 8005532:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	689a      	ldr	r2, [r3, #8]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2201      	movs	r2, #1
 800554e:	615a      	str	r2, [r3, #20]
}
 8005550:	46c0      	nop			; (mov r8, r8)
 8005552:	46bd      	mov	sp, r7
 8005554:	b004      	add	sp, #16
 8005556:	bd80      	pop	{r7, pc}
 8005558:	40010800 	.word	0x40010800
 800555c:	40011400 	.word	0x40011400
 8005560:	fffffcff 	.word	0xfffffcff

08005564 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	2201      	movs	r2, #1
 8005574:	4393      	bics	r3, r2
 8005576:	001a      	movs	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a1b      	ldr	r3, [r3, #32]
 8005580:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2270      	movs	r2, #112	; 0x70
 8005592:	4393      	bics	r3, r2
 8005594:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2203      	movs	r2, #3
 800559a:	4393      	bics	r3, r2
 800559c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	2202      	movs	r2, #2
 80055ac:	4393      	bics	r3, r2
 80055ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	685a      	ldr	r2, [r3, #4]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	621a      	str	r2, [r3, #32]
}
 80055d4:	46c0      	nop			; (mov r8, r8)
 80055d6:	46bd      	mov	sp, r7
 80055d8:	b006      	add	sp, #24
 80055da:	bd80      	pop	{r7, pc}

080055dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b086      	sub	sp, #24
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	2210      	movs	r2, #16
 80055ec:	4393      	bics	r3, r2
 80055ee:	001a      	movs	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	4a13      	ldr	r2, [pc, #76]	; (8005658 <TIM_OC2_SetConfig+0x7c>)
 800560a:	4013      	ands	r3, r2
 800560c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	4a12      	ldr	r2, [pc, #72]	; (800565c <TIM_OC2_SetConfig+0x80>)
 8005612:	4013      	ands	r3, r2
 8005614:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	021b      	lsls	r3, r3, #8
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	4313      	orrs	r3, r2
 8005620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	2220      	movs	r2, #32
 8005626:	4393      	bics	r3, r2
 8005628:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	011b      	lsls	r3, r3, #4
 8005630:	697a      	ldr	r2, [r7, #20]
 8005632:	4313      	orrs	r3, r2
 8005634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	621a      	str	r2, [r3, #32]
}
 8005650:	46c0      	nop			; (mov r8, r8)
 8005652:	46bd      	mov	sp, r7
 8005654:	b006      	add	sp, #24
 8005656:	bd80      	pop	{r7, pc}
 8005658:	ffff8fff 	.word	0xffff8fff
 800565c:	fffffcff 	.word	0xfffffcff

08005660 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	4a1a      	ldr	r2, [pc, #104]	; (80056d8 <TIM_OC3_SetConfig+0x78>)
 8005670:	401a      	ands	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	69db      	ldr	r3, [r3, #28]
 8005686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2270      	movs	r2, #112	; 0x70
 800568c:	4393      	bics	r3, r2
 800568e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2203      	movs	r2, #3
 8005694:	4393      	bics	r3, r2
 8005696:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	4313      	orrs	r3, r2
 80056a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	4a0d      	ldr	r2, [pc, #52]	; (80056dc <TIM_OC3_SetConfig+0x7c>)
 80056a6:	4013      	ands	r3, r2
 80056a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	021b      	lsls	r3, r3, #8
 80056b0:	697a      	ldr	r2, [r7, #20]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	697a      	ldr	r2, [r7, #20]
 80056ce:	621a      	str	r2, [r3, #32]
}
 80056d0:	46c0      	nop			; (mov r8, r8)
 80056d2:	46bd      	mov	sp, r7
 80056d4:	b006      	add	sp, #24
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	fffffeff 	.word	0xfffffeff
 80056dc:	fffffdff 	.word	0xfffffdff

080056e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	4a1b      	ldr	r2, [pc, #108]	; (800575c <TIM_OC4_SetConfig+0x7c>)
 80056f0:	401a      	ands	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	69db      	ldr	r3, [r3, #28]
 8005706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	4a15      	ldr	r2, [pc, #84]	; (8005760 <TIM_OC4_SetConfig+0x80>)
 800570c:	4013      	ands	r3, r2
 800570e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	4a14      	ldr	r2, [pc, #80]	; (8005764 <TIM_OC4_SetConfig+0x84>)
 8005714:	4013      	ands	r3, r2
 8005716:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	021b      	lsls	r3, r3, #8
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	4313      	orrs	r3, r2
 8005722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	4a10      	ldr	r2, [pc, #64]	; (8005768 <TIM_OC4_SetConfig+0x88>)
 8005728:	4013      	ands	r3, r2
 800572a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	031b      	lsls	r3, r3, #12
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	4313      	orrs	r3, r2
 8005736:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	621a      	str	r2, [r3, #32]
}
 8005752:	46c0      	nop			; (mov r8, r8)
 8005754:	46bd      	mov	sp, r7
 8005756:	b006      	add	sp, #24
 8005758:	bd80      	pop	{r7, pc}
 800575a:	46c0      	nop			; (mov r8, r8)
 800575c:	ffffefff 	.word	0xffffefff
 8005760:	ffff8fff 	.word	0xffff8fff
 8005764:	fffffcff 	.word	0xfffffcff
 8005768:	ffffdfff 	.word	0xffffdfff

0800576c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b086      	sub	sp, #24
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6a1b      	ldr	r3, [r3, #32]
 800577c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	2201      	movs	r2, #1
 8005784:	4393      	bics	r3, r2
 8005786:	001a      	movs	r2, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	22f0      	movs	r2, #240	; 0xf0
 8005796:	4393      	bics	r3, r2
 8005798:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	011b      	lsls	r3, r3, #4
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	220a      	movs	r2, #10
 80057a8:	4393      	bics	r3, r2
 80057aa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057ac:	697a      	ldr	r2, [r7, #20]
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	621a      	str	r2, [r3, #32]
}
 80057c0:	46c0      	nop			; (mov r8, r8)
 80057c2:	46bd      	mov	sp, r7
 80057c4:	b006      	add	sp, #24
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6a1b      	ldr	r3, [r3, #32]
 80057d8:	2210      	movs	r2, #16
 80057da:	4393      	bics	r3, r2
 80057dc:	001a      	movs	r2, r3
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6a1b      	ldr	r3, [r3, #32]
 80057ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	4a0d      	ldr	r2, [pc, #52]	; (8005828 <TIM_TI2_ConfigInputStage+0x60>)
 80057f2:	4013      	ands	r3, r2
 80057f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	031b      	lsls	r3, r3, #12
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	22a0      	movs	r2, #160	; 0xa0
 8005804:	4393      	bics	r3, r2
 8005806:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	011b      	lsls	r3, r3, #4
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	4313      	orrs	r3, r2
 8005810:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	621a      	str	r2, [r3, #32]
}
 800581e:	46c0      	nop			; (mov r8, r8)
 8005820:	46bd      	mov	sp, r7
 8005822:	b006      	add	sp, #24
 8005824:	bd80      	pop	{r7, pc}
 8005826:	46c0      	nop			; (mov r8, r8)
 8005828:	ffff0fff 	.word	0xffff0fff

0800582c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2270      	movs	r2, #112	; 0x70
 8005840:	4393      	bics	r3, r2
 8005842:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005844:	683a      	ldr	r2, [r7, #0]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	4313      	orrs	r3, r2
 800584a:	2207      	movs	r2, #7
 800584c:	4313      	orrs	r3, r2
 800584e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	609a      	str	r2, [r3, #8]
}
 8005856:	46c0      	nop			; (mov r8, r8)
 8005858:	46bd      	mov	sp, r7
 800585a:	b004      	add	sp, #16
 800585c:	bd80      	pop	{r7, pc}
	...

08005860 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b086      	sub	sp, #24
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]
 800586c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	4a09      	ldr	r2, [pc, #36]	; (800589c <TIM_ETR_SetConfig+0x3c>)
 8005878:	4013      	ands	r3, r2
 800587a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	021a      	lsls	r2, r3, #8
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	431a      	orrs	r2, r3
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	4313      	orrs	r3, r2
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	4313      	orrs	r3, r2
 800588c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	609a      	str	r2, [r3, #8]
}
 8005894:	46c0      	nop			; (mov r8, r8)
 8005896:	46bd      	mov	sp, r7
 8005898:	b006      	add	sp, #24
 800589a:	bd80      	pop	{r7, pc}
 800589c:	ffff00ff 	.word	0xffff00ff

080058a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b086      	sub	sp, #24
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	2380      	movs	r3, #128	; 0x80
 80058b0:	05db      	lsls	r3, r3, #23
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d00d      	beq.n	80058d2 <TIM_CCxChannelCmd+0x32>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	4a1f      	ldr	r2, [pc, #124]	; (8005938 <TIM_CCxChannelCmd+0x98>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d009      	beq.n	80058d2 <TIM_CCxChannelCmd+0x32>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	4a1e      	ldr	r2, [pc, #120]	; (800593c <TIM_CCxChannelCmd+0x9c>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d005      	beq.n	80058d2 <TIM_CCxChannelCmd+0x32>
 80058c6:	4a1e      	ldr	r2, [pc, #120]	; (8005940 <TIM_CCxChannelCmd+0xa0>)
 80058c8:	4b1e      	ldr	r3, [pc, #120]	; (8005944 <TIM_CCxChannelCmd+0xa4>)
 80058ca:	0011      	movs	r1, r2
 80058cc:	0018      	movs	r0, r3
 80058ce:	f7fb fc7c 	bl	80011ca <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d011      	beq.n	80058fc <TIM_CCxChannelCmd+0x5c>
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	2b04      	cmp	r3, #4
 80058dc:	d00e      	beq.n	80058fc <TIM_CCxChannelCmd+0x5c>
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	2b08      	cmp	r3, #8
 80058e2:	d00b      	beq.n	80058fc <TIM_CCxChannelCmd+0x5c>
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	2b0c      	cmp	r3, #12
 80058e8:	d008      	beq.n	80058fc <TIM_CCxChannelCmd+0x5c>
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	2b3c      	cmp	r3, #60	; 0x3c
 80058ee:	d005      	beq.n	80058fc <TIM_CCxChannelCmd+0x5c>
 80058f0:	4a15      	ldr	r2, [pc, #84]	; (8005948 <TIM_CCxChannelCmd+0xa8>)
 80058f2:	4b14      	ldr	r3, [pc, #80]	; (8005944 <TIM_CCxChannelCmd+0xa4>)
 80058f4:	0011      	movs	r1, r2
 80058f6:	0018      	movs	r0, r3
 80058f8:	f7fb fc67 	bl	80011ca <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	221f      	movs	r2, #31
 8005900:	4013      	ands	r3, r2
 8005902:	2201      	movs	r2, #1
 8005904:	409a      	lsls	r2, r3
 8005906:	0013      	movs	r3, r2
 8005908:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	43d2      	mvns	r2, r2
 8005912:	401a      	ands	r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6a1a      	ldr	r2, [r3, #32]
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	211f      	movs	r1, #31
 8005920:	400b      	ands	r3, r1
 8005922:	6879      	ldr	r1, [r7, #4]
 8005924:	4099      	lsls	r1, r3
 8005926:	000b      	movs	r3, r1
 8005928:	431a      	orrs	r2, r3
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	621a      	str	r2, [r3, #32]
}
 800592e:	46c0      	nop			; (mov r8, r8)
 8005930:	46bd      	mov	sp, r7
 8005932:	b006      	add	sp, #24
 8005934:	bd80      	pop	{r7, pc}
 8005936:	46c0      	nop			; (mov r8, r8)
 8005938:	40010800 	.word	0x40010800
 800593c:	40011400 	.word	0x40011400
 8005940:	0000186a 	.word	0x0000186a
 8005944:	08006954 	.word	0x08006954
 8005948:	0000186b 	.word	0x0000186b

0800594c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	2380      	movs	r3, #128	; 0x80
 800595c:	05db      	lsls	r3, r3, #23
 800595e:	429a      	cmp	r2, r3
 8005960:	d013      	beq.n	800598a <HAL_TIMEx_MasterConfigSynchronization+0x3e>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a41      	ldr	r2, [pc, #260]	; (8005a6c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d00e      	beq.n	800598a <HAL_TIMEx_MasterConfigSynchronization+0x3e>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a3f      	ldr	r2, [pc, #252]	; (8005a70 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d009      	beq.n	800598a <HAL_TIMEx_MasterConfigSynchronization+0x3e>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a3e      	ldr	r2, [pc, #248]	; (8005a74 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d004      	beq.n	800598a <HAL_TIMEx_MasterConfigSynchronization+0x3e>
 8005980:	4b3d      	ldr	r3, [pc, #244]	; (8005a78 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8005982:	2159      	movs	r1, #89	; 0x59
 8005984:	0018      	movs	r0, r3
 8005986:	f7fb fc20 	bl	80011ca <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d020      	beq.n	80059d4 <HAL_TIMEx_MasterConfigSynchronization+0x88>
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2b10      	cmp	r3, #16
 8005998:	d01c      	beq.n	80059d4 <HAL_TIMEx_MasterConfigSynchronization+0x88>
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2b20      	cmp	r3, #32
 80059a0:	d018      	beq.n	80059d4 <HAL_TIMEx_MasterConfigSynchronization+0x88>
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2b30      	cmp	r3, #48	; 0x30
 80059a8:	d014      	beq.n	80059d4 <HAL_TIMEx_MasterConfigSynchronization+0x88>
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2b40      	cmp	r3, #64	; 0x40
 80059b0:	d010      	beq.n	80059d4 <HAL_TIMEx_MasterConfigSynchronization+0x88>
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2b50      	cmp	r3, #80	; 0x50
 80059b8:	d00c      	beq.n	80059d4 <HAL_TIMEx_MasterConfigSynchronization+0x88>
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2b60      	cmp	r3, #96	; 0x60
 80059c0:	d008      	beq.n	80059d4 <HAL_TIMEx_MasterConfigSynchronization+0x88>
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2b70      	cmp	r3, #112	; 0x70
 80059c8:	d004      	beq.n	80059d4 <HAL_TIMEx_MasterConfigSynchronization+0x88>
 80059ca:	4b2b      	ldr	r3, [pc, #172]	; (8005a78 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80059cc:	215a      	movs	r1, #90	; 0x5a
 80059ce:	0018      	movs	r0, r3
 80059d0:	f7fb fbfb 	bl	80011ca <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	2b80      	cmp	r3, #128	; 0x80
 80059da:	d008      	beq.n	80059ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d004      	beq.n	80059ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059e4:	4b24      	ldr	r3, [pc, #144]	; (8005a78 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80059e6:	215b      	movs	r1, #91	; 0x5b
 80059e8:	0018      	movs	r0, r3
 80059ea:	f7fb fbee 	bl	80011ca <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2238      	movs	r2, #56	; 0x38
 80059f2:	5c9b      	ldrb	r3, [r3, r2]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d101      	bne.n	80059fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 80059f8:	2302      	movs	r3, #2
 80059fa:	e032      	b.n	8005a62 <HAL_TIMEx_MasterConfigSynchronization+0x116>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2238      	movs	r2, #56	; 0x38
 8005a00:	2101      	movs	r1, #1
 8005a02:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2239      	movs	r2, #57	; 0x39
 8005a08:	2102      	movs	r1, #2
 8005a0a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2270      	movs	r2, #112	; 0x70
 8005a20:	4393      	bics	r3, r2
 8005a22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	2280      	movs	r2, #128	; 0x80
 8005a32:	4393      	bics	r3, r2
 8005a34:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	68ba      	ldr	r2, [r7, #8]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68ba      	ldr	r2, [r7, #8]
 8005a4e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2239      	movs	r2, #57	; 0x39
 8005a54:	2101      	movs	r1, #1
 8005a56:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2238      	movs	r2, #56	; 0x38
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	0018      	movs	r0, r3
 8005a64:	46bd      	mov	sp, r7
 8005a66:	b004      	add	sp, #16
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	46c0      	nop			; (mov r8, r8)
 8005a6c:	40001000 	.word	0x40001000
 8005a70:	40010800 	.word	0x40010800
 8005a74:	40011400 	.word	0x40011400
 8005a78:	0800698c 	.word	0x0800698c

08005a7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d101      	bne.n	8005a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e076      	b.n	8005b7c <HAL_UART_Init+0x100>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d017      	beq.n	8005ac6 <HAL_UART_Init+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a3a      	ldr	r2, [pc, #232]	; (8005b84 <HAL_UART_Init+0x108>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d028      	beq.n	8005af2 <HAL_UART_Init+0x76>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a38      	ldr	r2, [pc, #224]	; (8005b88 <HAL_UART_Init+0x10c>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d023      	beq.n	8005af2 <HAL_UART_Init+0x76>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a37      	ldr	r2, [pc, #220]	; (8005b8c <HAL_UART_Init+0x110>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d01e      	beq.n	8005af2 <HAL_UART_Init+0x76>
 8005ab4:	2330      	movs	r3, #48	; 0x30
 8005ab6:	33ff      	adds	r3, #255	; 0xff
 8005ab8:	001a      	movs	r2, r3
 8005aba:	4b35      	ldr	r3, [pc, #212]	; (8005b90 <HAL_UART_Init+0x114>)
 8005abc:	0011      	movs	r1, r2
 8005abe:	0018      	movs	r0, r3
 8005ac0:	f7fb fb83 	bl	80011ca <assert_failed>
 8005ac4:	e015      	b.n	8005af2 <HAL_UART_Init+0x76>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a2e      	ldr	r2, [pc, #184]	; (8005b84 <HAL_UART_Init+0x108>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d010      	beq.n	8005af2 <HAL_UART_Init+0x76>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a2c      	ldr	r2, [pc, #176]	; (8005b88 <HAL_UART_Init+0x10c>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d00b      	beq.n	8005af2 <HAL_UART_Init+0x76>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a2b      	ldr	r2, [pc, #172]	; (8005b8c <HAL_UART_Init+0x110>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d006      	beq.n	8005af2 <HAL_UART_Init+0x76>
 8005ae4:	239a      	movs	r3, #154	; 0x9a
 8005ae6:	005a      	lsls	r2, r3, #1
 8005ae8:	4b29      	ldr	r3, [pc, #164]	; (8005b90 <HAL_UART_Init+0x114>)
 8005aea:	0011      	movs	r1, r2
 8005aec:	0018      	movs	r0, r3
 8005aee:	f7fb fb6c 	bl	80011ca <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d107      	bne.n	8005b0a <HAL_UART_Init+0x8e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2270      	movs	r2, #112	; 0x70
 8005afe:	2100      	movs	r1, #0
 8005b00:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	0018      	movs	r0, r3
 8005b06:	f7fb fcab 	bl	8001460 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2224      	movs	r2, #36	; 0x24
 8005b0e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2101      	movs	r1, #1
 8005b1c:	438a      	bics	r2, r1
 8005b1e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	0018      	movs	r0, r3
 8005b24:	f000 f838 	bl	8005b98 <UART_SetConfig>
 8005b28:	0003      	movs	r3, r0
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d101      	bne.n	8005b32 <HAL_UART_Init+0xb6>
  {
    return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e024      	b.n	8005b7c <HAL_UART_Init+0x100>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d003      	beq.n	8005b42 <HAL_UART_Init+0xc6>
  {
    UART_AdvFeatureConfig(huart);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	0018      	movs	r0, r3
 8005b3e:	f000 fc0d 	bl	800635c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4911      	ldr	r1, [pc, #68]	; (8005b94 <HAL_UART_Init+0x118>)
 8005b4e:	400a      	ands	r2, r1
 8005b50:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	689a      	ldr	r2, [r3, #8]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	212a      	movs	r1, #42	; 0x2a
 8005b5e:	438a      	bics	r2, r1
 8005b60:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2101      	movs	r1, #1
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	0018      	movs	r0, r3
 8005b76:	f000 fd77 	bl	8006668 <UART_CheckIdleState>
 8005b7a:	0003      	movs	r3, r0
}
 8005b7c:	0018      	movs	r0, r3
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	b002      	add	sp, #8
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	40013800 	.word	0x40013800
 8005b88:	40004400 	.word	0x40004400
 8005b8c:	40004800 	.word	0x40004800
 8005b90:	080069c8 	.word	0x080069c8
 8005b94:	ffffb7ff 	.word	0xffffb7ff

08005b98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b98:	b5b0      	push	{r4, r5, r7, lr}
 8005b9a:	b08e      	sub	sp, #56	; 0x38
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8005ba0:	231b      	movs	r3, #27
 8005ba2:	2218      	movs	r2, #24
 8005ba4:	4694      	mov	ip, r2
 8005ba6:	44bc      	add	ip, r7
 8005ba8:	4463      	add	r3, ip
 8005baa:	2210      	movs	r2, #16
 8005bac:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bb2:	2313      	movs	r3, #19
 8005bb4:	2218      	movs	r2, #24
 8005bb6:	4694      	mov	ip, r2
 8005bb8:	44bc      	add	ip, r7
 8005bba:	4463      	add	r3, ip
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	4ac9      	ldr	r2, [pc, #804]	; (8005ef0 <UART_SetConfig+0x358>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d905      	bls.n	8005bda <UART_SetConfig+0x42>
 8005bce:	4ac9      	ldr	r2, [pc, #804]	; (8005ef4 <UART_SetConfig+0x35c>)
 8005bd0:	4bc9      	ldr	r3, [pc, #804]	; (8005ef8 <UART_SetConfig+0x360>)
 8005bd2:	0011      	movs	r1, r2
 8005bd4:	0018      	movs	r0, r3
 8005bd6:	f7fb faf8 	bl	80011ca <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	689a      	ldr	r2, [r3, #8]
 8005bde:	2380      	movs	r3, #128	; 0x80
 8005be0:	055b      	lsls	r3, r3, #21
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d00f      	beq.n	8005c06 <UART_SetConfig+0x6e>
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00b      	beq.n	8005c06 <UART_SetConfig+0x6e>
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	689a      	ldr	r2, [r3, #8]
 8005bf2:	2380      	movs	r3, #128	; 0x80
 8005bf4:	015b      	lsls	r3, r3, #5
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d005      	beq.n	8005c06 <UART_SetConfig+0x6e>
 8005bfa:	4ac0      	ldr	r2, [pc, #768]	; (8005efc <UART_SetConfig+0x364>)
 8005bfc:	4bbe      	ldr	r3, [pc, #760]	; (8005ef8 <UART_SetConfig+0x360>)
 8005bfe:	0011      	movs	r1, r2
 8005c00:	0018      	movs	r0, r3
 8005c02:	f7fb fae2 	bl	80011ca <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4abd      	ldr	r2, [pc, #756]	; (8005f00 <UART_SetConfig+0x368>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d110      	bne.n	8005c32 <UART_SetConfig+0x9a>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d039      	beq.n	8005c8c <UART_SetConfig+0xf4>
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	68da      	ldr	r2, [r3, #12]
 8005c1c:	2380      	movs	r3, #128	; 0x80
 8005c1e:	019b      	lsls	r3, r3, #6
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d033      	beq.n	8005c8c <UART_SetConfig+0xf4>
 8005c24:	4ab7      	ldr	r2, [pc, #732]	; (8005f04 <UART_SetConfig+0x36c>)
 8005c26:	4bb4      	ldr	r3, [pc, #720]	; (8005ef8 <UART_SetConfig+0x360>)
 8005c28:	0011      	movs	r1, r2
 8005c2a:	0018      	movs	r0, r3
 8005c2c:	f7fb facd 	bl	80011ca <assert_failed>
 8005c30:	e02c      	b.n	8005c8c <UART_SetConfig+0xf4>
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	68da      	ldr	r2, [r3, #12]
 8005c36:	2380      	movs	r3, #128	; 0x80
 8005c38:	015b      	lsls	r3, r3, #5
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d016      	beq.n	8005c6c <UART_SetConfig+0xd4>
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d012      	beq.n	8005c6c <UART_SetConfig+0xd4>
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	68da      	ldr	r2, [r3, #12]
 8005c4a:	23c0      	movs	r3, #192	; 0xc0
 8005c4c:	019b      	lsls	r3, r3, #6
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d00c      	beq.n	8005c6c <UART_SetConfig+0xd4>
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	68da      	ldr	r2, [r3, #12]
 8005c56:	2380      	movs	r3, #128	; 0x80
 8005c58:	019b      	lsls	r3, r3, #6
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d006      	beq.n	8005c6c <UART_SetConfig+0xd4>
 8005c5e:	23ad      	movs	r3, #173	; 0xad
 8005c60:	011a      	lsls	r2, r3, #4
 8005c62:	4ba5      	ldr	r3, [pc, #660]	; (8005ef8 <UART_SetConfig+0x360>)
 8005c64:	0011      	movs	r1, r2
 8005c66:	0018      	movs	r0, r3
 8005c68:	f7fb faaf 	bl	80011ca <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	6a1b      	ldr	r3, [r3, #32]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00b      	beq.n	8005c8c <UART_SetConfig+0xf4>
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	6a1a      	ldr	r2, [r3, #32]
 8005c78:	2380      	movs	r3, #128	; 0x80
 8005c7a:	011b      	lsls	r3, r3, #4
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d005      	beq.n	8005c8c <UART_SetConfig+0xf4>
 8005c80:	4aa1      	ldr	r2, [pc, #644]	; (8005f08 <UART_SetConfig+0x370>)
 8005c82:	4b9d      	ldr	r3, [pc, #628]	; (8005ef8 <UART_SetConfig+0x360>)
 8005c84:	0011      	movs	r1, r2
 8005c86:	0018      	movs	r0, r3
 8005c88:	f7fb fa9f 	bl	80011ca <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d011      	beq.n	8005cb8 <UART_SetConfig+0x120>
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	691a      	ldr	r2, [r3, #16]
 8005c98:	2380      	movs	r3, #128	; 0x80
 8005c9a:	00db      	lsls	r3, r3, #3
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d00b      	beq.n	8005cb8 <UART_SetConfig+0x120>
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	691a      	ldr	r2, [r3, #16]
 8005ca4:	23c0      	movs	r3, #192	; 0xc0
 8005ca6:	00db      	lsls	r3, r3, #3
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d005      	beq.n	8005cb8 <UART_SetConfig+0x120>
 8005cac:	4a97      	ldr	r2, [pc, #604]	; (8005f0c <UART_SetConfig+0x374>)
 8005cae:	4b92      	ldr	r3, [pc, #584]	; (8005ef8 <UART_SetConfig+0x360>)
 8005cb0:	0011      	movs	r1, r2
 8005cb2:	0018      	movs	r0, r3
 8005cb4:	f7fb fa89 	bl	80011ca <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	695b      	ldr	r3, [r3, #20]
 8005cbc:	220c      	movs	r2, #12
 8005cbe:	4393      	bics	r3, r2
 8005cc0:	d103      	bne.n	8005cca <UART_SetConfig+0x132>
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d105      	bne.n	8005cd6 <UART_SetConfig+0x13e>
 8005cca:	4a91      	ldr	r2, [pc, #580]	; (8005f10 <UART_SetConfig+0x378>)
 8005ccc:	4b8a      	ldr	r3, [pc, #552]	; (8005ef8 <UART_SetConfig+0x360>)
 8005cce:	0011      	movs	r1, r2
 8005cd0:	0018      	movs	r0, r3
 8005cd2:	f7fb fa7a 	bl	80011ca <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d017      	beq.n	8005d0e <UART_SetConfig+0x176>
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	699a      	ldr	r2, [r3, #24]
 8005ce2:	2380      	movs	r3, #128	; 0x80
 8005ce4:	005b      	lsls	r3, r3, #1
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d011      	beq.n	8005d0e <UART_SetConfig+0x176>
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	699a      	ldr	r2, [r3, #24]
 8005cee:	2380      	movs	r3, #128	; 0x80
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d00b      	beq.n	8005d0e <UART_SetConfig+0x176>
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	699a      	ldr	r2, [r3, #24]
 8005cfa:	23c0      	movs	r3, #192	; 0xc0
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d005      	beq.n	8005d0e <UART_SetConfig+0x176>
 8005d02:	4a84      	ldr	r2, [pc, #528]	; (8005f14 <UART_SetConfig+0x37c>)
 8005d04:	4b7c      	ldr	r3, [pc, #496]	; (8005ef8 <UART_SetConfig+0x360>)
 8005d06:	0011      	movs	r1, r2
 8005d08:	0018      	movs	r0, r3
 8005d0a:	f7fb fa5e 	bl	80011ca <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	69db      	ldr	r3, [r3, #28]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00b      	beq.n	8005d2e <UART_SetConfig+0x196>
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	69da      	ldr	r2, [r3, #28]
 8005d1a:	2380      	movs	r3, #128	; 0x80
 8005d1c:	021b      	lsls	r3, r3, #8
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d005      	beq.n	8005d2e <UART_SetConfig+0x196>
 8005d22:	4a7d      	ldr	r2, [pc, #500]	; (8005f18 <UART_SetConfig+0x380>)
 8005d24:	4b74      	ldr	r3, [pc, #464]	; (8005ef8 <UART_SetConfig+0x360>)
 8005d26:	0011      	movs	r1, r2
 8005d28:	0018      	movs	r0, r3
 8005d2a:	f7fb fa4e 	bl	80011ca <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	689a      	ldr	r2, [r3, #8]
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	431a      	orrs	r2, r3
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	695b      	ldr	r3, [r3, #20]
 8005d3c:	431a      	orrs	r2, r3
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	69db      	ldr	r3, [r3, #28]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a73      	ldr	r2, [pc, #460]	; (8005f1c <UART_SetConfig+0x384>)
 8005d4e:	4013      	ands	r3, r2
 8005d50:	0019      	movs	r1, r3
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d58:	430a      	orrs	r2, r1
 8005d5a:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	4a6f      	ldr	r2, [pc, #444]	; (8005f20 <UART_SetConfig+0x388>)
 8005d64:	4013      	ands	r3, r2
 8005d66:	0019      	movs	r1, r3
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	68da      	ldr	r2, [r3, #12]
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	430a      	orrs	r2, r1
 8005d72:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a60      	ldr	r2, [pc, #384]	; (8005f00 <UART_SetConfig+0x368>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d004      	beq.n	8005d8e <UART_SetConfig+0x1f6>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	6a1b      	ldr	r3, [r3, #32]
 8005d88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	4a63      	ldr	r2, [pc, #396]	; (8005f24 <UART_SetConfig+0x38c>)
 8005d96:	4013      	ands	r3, r2
 8005d98:	0019      	movs	r1, r3
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005da0:	430a      	orrs	r2, r1
 8005da2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a5f      	ldr	r2, [pc, #380]	; (8005f28 <UART_SetConfig+0x390>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d134      	bne.n	8005e18 <UART_SetConfig+0x280>
 8005dae:	4b5f      	ldr	r3, [pc, #380]	; (8005f2c <UART_SetConfig+0x394>)
 8005db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005db2:	2203      	movs	r2, #3
 8005db4:	4013      	ands	r3, r2
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d015      	beq.n	8005de6 <UART_SetConfig+0x24e>
 8005dba:	d304      	bcc.n	8005dc6 <UART_SetConfig+0x22e>
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d00a      	beq.n	8005dd6 <UART_SetConfig+0x23e>
 8005dc0:	2b03      	cmp	r3, #3
 8005dc2:	d018      	beq.n	8005df6 <UART_SetConfig+0x25e>
 8005dc4:	e01f      	b.n	8005e06 <UART_SetConfig+0x26e>
 8005dc6:	231b      	movs	r3, #27
 8005dc8:	2218      	movs	r2, #24
 8005dca:	4694      	mov	ip, r2
 8005dcc:	44bc      	add	ip, r7
 8005dce:	4463      	add	r3, ip
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	701a      	strb	r2, [r3, #0]
 8005dd4:	e0ce      	b.n	8005f74 <UART_SetConfig+0x3dc>
 8005dd6:	231b      	movs	r3, #27
 8005dd8:	2218      	movs	r2, #24
 8005dda:	4694      	mov	ip, r2
 8005ddc:	44bc      	add	ip, r7
 8005dde:	4463      	add	r3, ip
 8005de0:	2202      	movs	r2, #2
 8005de2:	701a      	strb	r2, [r3, #0]
 8005de4:	e0c6      	b.n	8005f74 <UART_SetConfig+0x3dc>
 8005de6:	231b      	movs	r3, #27
 8005de8:	2218      	movs	r2, #24
 8005dea:	4694      	mov	ip, r2
 8005dec:	44bc      	add	ip, r7
 8005dee:	4463      	add	r3, ip
 8005df0:	2204      	movs	r2, #4
 8005df2:	701a      	strb	r2, [r3, #0]
 8005df4:	e0be      	b.n	8005f74 <UART_SetConfig+0x3dc>
 8005df6:	231b      	movs	r3, #27
 8005df8:	2218      	movs	r2, #24
 8005dfa:	4694      	mov	ip, r2
 8005dfc:	44bc      	add	ip, r7
 8005dfe:	4463      	add	r3, ip
 8005e00:	2208      	movs	r2, #8
 8005e02:	701a      	strb	r2, [r3, #0]
 8005e04:	e0b6      	b.n	8005f74 <UART_SetConfig+0x3dc>
 8005e06:	231b      	movs	r3, #27
 8005e08:	2218      	movs	r2, #24
 8005e0a:	4694      	mov	ip, r2
 8005e0c:	44bc      	add	ip, r7
 8005e0e:	4463      	add	r3, ip
 8005e10:	2210      	movs	r2, #16
 8005e12:	701a      	strb	r2, [r3, #0]
 8005e14:	46c0      	nop			; (mov r8, r8)
 8005e16:	e0ad      	b.n	8005f74 <UART_SetConfig+0x3dc>
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a44      	ldr	r2, [pc, #272]	; (8005f30 <UART_SetConfig+0x398>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d137      	bne.n	8005e92 <UART_SetConfig+0x2fa>
 8005e22:	4b42      	ldr	r3, [pc, #264]	; (8005f2c <UART_SetConfig+0x394>)
 8005e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e26:	220c      	movs	r2, #12
 8005e28:	4013      	ands	r3, r2
 8005e2a:	2b04      	cmp	r3, #4
 8005e2c:	d018      	beq.n	8005e60 <UART_SetConfig+0x2c8>
 8005e2e:	d802      	bhi.n	8005e36 <UART_SetConfig+0x29e>
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d005      	beq.n	8005e40 <UART_SetConfig+0x2a8>
 8005e34:	e024      	b.n	8005e80 <UART_SetConfig+0x2e8>
 8005e36:	2b08      	cmp	r3, #8
 8005e38:	d00a      	beq.n	8005e50 <UART_SetConfig+0x2b8>
 8005e3a:	2b0c      	cmp	r3, #12
 8005e3c:	d018      	beq.n	8005e70 <UART_SetConfig+0x2d8>
 8005e3e:	e01f      	b.n	8005e80 <UART_SetConfig+0x2e8>
 8005e40:	231b      	movs	r3, #27
 8005e42:	2218      	movs	r2, #24
 8005e44:	4694      	mov	ip, r2
 8005e46:	44bc      	add	ip, r7
 8005e48:	4463      	add	r3, ip
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	701a      	strb	r2, [r3, #0]
 8005e4e:	e091      	b.n	8005f74 <UART_SetConfig+0x3dc>
 8005e50:	231b      	movs	r3, #27
 8005e52:	2218      	movs	r2, #24
 8005e54:	4694      	mov	ip, r2
 8005e56:	44bc      	add	ip, r7
 8005e58:	4463      	add	r3, ip
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	701a      	strb	r2, [r3, #0]
 8005e5e:	e089      	b.n	8005f74 <UART_SetConfig+0x3dc>
 8005e60:	231b      	movs	r3, #27
 8005e62:	2218      	movs	r2, #24
 8005e64:	4694      	mov	ip, r2
 8005e66:	44bc      	add	ip, r7
 8005e68:	4463      	add	r3, ip
 8005e6a:	2204      	movs	r2, #4
 8005e6c:	701a      	strb	r2, [r3, #0]
 8005e6e:	e081      	b.n	8005f74 <UART_SetConfig+0x3dc>
 8005e70:	231b      	movs	r3, #27
 8005e72:	2218      	movs	r2, #24
 8005e74:	4694      	mov	ip, r2
 8005e76:	44bc      	add	ip, r7
 8005e78:	4463      	add	r3, ip
 8005e7a:	2208      	movs	r2, #8
 8005e7c:	701a      	strb	r2, [r3, #0]
 8005e7e:	e079      	b.n	8005f74 <UART_SetConfig+0x3dc>
 8005e80:	231b      	movs	r3, #27
 8005e82:	2218      	movs	r2, #24
 8005e84:	4694      	mov	ip, r2
 8005e86:	44bc      	add	ip, r7
 8005e88:	4463      	add	r3, ip
 8005e8a:	2210      	movs	r2, #16
 8005e8c:	701a      	strb	r2, [r3, #0]
 8005e8e:	46c0      	nop			; (mov r8, r8)
 8005e90:	e070      	b.n	8005f74 <UART_SetConfig+0x3dc>
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a1a      	ldr	r2, [pc, #104]	; (8005f00 <UART_SetConfig+0x368>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d164      	bne.n	8005f66 <UART_SetConfig+0x3ce>
 8005e9c:	4b23      	ldr	r3, [pc, #140]	; (8005f2c <UART_SetConfig+0x394>)
 8005e9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ea0:	23c0      	movs	r3, #192	; 0xc0
 8005ea2:	011b      	lsls	r3, r3, #4
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	2280      	movs	r2, #128	; 0x80
 8005ea8:	00d2      	lsls	r2, r2, #3
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d042      	beq.n	8005f34 <UART_SetConfig+0x39c>
 8005eae:	2280      	movs	r2, #128	; 0x80
 8005eb0:	00d2      	lsls	r2, r2, #3
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d802      	bhi.n	8005ebc <UART_SetConfig+0x324>
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d009      	beq.n	8005ece <UART_SetConfig+0x336>
 8005eba:	e04b      	b.n	8005f54 <UART_SetConfig+0x3bc>
 8005ebc:	2280      	movs	r2, #128	; 0x80
 8005ebe:	0112      	lsls	r2, r2, #4
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d00c      	beq.n	8005ede <UART_SetConfig+0x346>
 8005ec4:	22c0      	movs	r2, #192	; 0xc0
 8005ec6:	0112      	lsls	r2, r2, #4
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d03b      	beq.n	8005f44 <UART_SetConfig+0x3ac>
 8005ecc:	e042      	b.n	8005f54 <UART_SetConfig+0x3bc>
 8005ece:	231b      	movs	r3, #27
 8005ed0:	2218      	movs	r2, #24
 8005ed2:	4694      	mov	ip, r2
 8005ed4:	44bc      	add	ip, r7
 8005ed6:	4463      	add	r3, ip
 8005ed8:	2200      	movs	r2, #0
 8005eda:	701a      	strb	r2, [r3, #0]
 8005edc:	e04a      	b.n	8005f74 <UART_SetConfig+0x3dc>
 8005ede:	231b      	movs	r3, #27
 8005ee0:	2218      	movs	r2, #24
 8005ee2:	4694      	mov	ip, r2
 8005ee4:	44bc      	add	ip, r7
 8005ee6:	4463      	add	r3, ip
 8005ee8:	2202      	movs	r2, #2
 8005eea:	701a      	strb	r2, [r3, #0]
 8005eec:	e042      	b.n	8005f74 <UART_SetConfig+0x3dc>
 8005eee:	46c0      	nop			; (mov r8, r8)
 8005ef0:	003d0900 	.word	0x003d0900
 8005ef4:	00000ac8 	.word	0x00000ac8
 8005ef8:	080069c8 	.word	0x080069c8
 8005efc:	00000ac9 	.word	0x00000ac9
 8005f00:	40004800 	.word	0x40004800
 8005f04:	00000acc 	.word	0x00000acc
 8005f08:	00000ad1 	.word	0x00000ad1
 8005f0c:	00000ad4 	.word	0x00000ad4
 8005f10:	00000ad5 	.word	0x00000ad5
 8005f14:	00000ad6 	.word	0x00000ad6
 8005f18:	00000ad7 	.word	0x00000ad7
 8005f1c:	efff69f3 	.word	0xefff69f3
 8005f20:	ffffcfff 	.word	0xffffcfff
 8005f24:	fffff4ff 	.word	0xfffff4ff
 8005f28:	40013800 	.word	0x40013800
 8005f2c:	40021000 	.word	0x40021000
 8005f30:	40004400 	.word	0x40004400
 8005f34:	231b      	movs	r3, #27
 8005f36:	2218      	movs	r2, #24
 8005f38:	4694      	mov	ip, r2
 8005f3a:	44bc      	add	ip, r7
 8005f3c:	4463      	add	r3, ip
 8005f3e:	2204      	movs	r2, #4
 8005f40:	701a      	strb	r2, [r3, #0]
 8005f42:	e017      	b.n	8005f74 <UART_SetConfig+0x3dc>
 8005f44:	231b      	movs	r3, #27
 8005f46:	2218      	movs	r2, #24
 8005f48:	4694      	mov	ip, r2
 8005f4a:	44bc      	add	ip, r7
 8005f4c:	4463      	add	r3, ip
 8005f4e:	2208      	movs	r2, #8
 8005f50:	701a      	strb	r2, [r3, #0]
 8005f52:	e00f      	b.n	8005f74 <UART_SetConfig+0x3dc>
 8005f54:	231b      	movs	r3, #27
 8005f56:	2218      	movs	r2, #24
 8005f58:	4694      	mov	ip, r2
 8005f5a:	44bc      	add	ip, r7
 8005f5c:	4463      	add	r3, ip
 8005f5e:	2210      	movs	r2, #16
 8005f60:	701a      	strb	r2, [r3, #0]
 8005f62:	46c0      	nop			; (mov r8, r8)
 8005f64:	e006      	b.n	8005f74 <UART_SetConfig+0x3dc>
 8005f66:	231b      	movs	r3, #27
 8005f68:	2218      	movs	r2, #24
 8005f6a:	4694      	mov	ip, r2
 8005f6c:	44bc      	add	ip, r7
 8005f6e:	4463      	add	r3, ip
 8005f70:	2210      	movs	r2, #16
 8005f72:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4ad6      	ldr	r2, [pc, #856]	; (80062d4 <UART_SetConfig+0x73c>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d000      	beq.n	8005f80 <UART_SetConfig+0x3e8>
 8005f7e:	e083      	b.n	8006088 <UART_SetConfig+0x4f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f80:	231b      	movs	r3, #27
 8005f82:	2218      	movs	r2, #24
 8005f84:	4694      	mov	ip, r2
 8005f86:	44bc      	add	ip, r7
 8005f88:	4463      	add	r3, ip
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	d00d      	beq.n	8005fac <UART_SetConfig+0x414>
 8005f90:	dc02      	bgt.n	8005f98 <UART_SetConfig+0x400>
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d005      	beq.n	8005fa2 <UART_SetConfig+0x40a>
 8005f96:	e01d      	b.n	8005fd4 <UART_SetConfig+0x43c>
 8005f98:	2b04      	cmp	r3, #4
 8005f9a:	d012      	beq.n	8005fc2 <UART_SetConfig+0x42a>
 8005f9c:	2b08      	cmp	r3, #8
 8005f9e:	d015      	beq.n	8005fcc <UART_SetConfig+0x434>
 8005fa0:	e018      	b.n	8005fd4 <UART_SetConfig+0x43c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8005fa2:	f7fe f93f 	bl	8004224 <HAL_RCC_GetPCLK1Freq>
 8005fa6:	0003      	movs	r3, r0
 8005fa8:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005faa:	e01b      	b.n	8005fe4 <UART_SetConfig+0x44c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fac:	4bca      	ldr	r3, [pc, #808]	; (80062d8 <UART_SetConfig+0x740>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2210      	movs	r2, #16
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	d002      	beq.n	8005fbc <UART_SetConfig+0x424>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8005fb6:	4bc9      	ldr	r3, [pc, #804]	; (80062dc <UART_SetConfig+0x744>)
 8005fb8:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 8005fba:	e013      	b.n	8005fe4 <UART_SetConfig+0x44c>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005fbc:	4bc8      	ldr	r3, [pc, #800]	; (80062e0 <UART_SetConfig+0x748>)
 8005fbe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005fc0:	e010      	b.n	8005fe4 <UART_SetConfig+0x44c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8005fc2:	f7fe f8a1 	bl	8004108 <HAL_RCC_GetSysClockFreq>
 8005fc6:	0003      	movs	r3, r0
 8005fc8:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005fca:	e00b      	b.n	8005fe4 <UART_SetConfig+0x44c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8005fcc:	2380      	movs	r3, #128	; 0x80
 8005fce:	021b      	lsls	r3, r3, #8
 8005fd0:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005fd2:	e007      	b.n	8005fe4 <UART_SetConfig+0x44c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005fd4:	2313      	movs	r3, #19
 8005fd6:	2218      	movs	r2, #24
 8005fd8:	4694      	mov	ip, r2
 8005fda:	44bc      	add	ip, r7
 8005fdc:	4463      	add	r3, ip
 8005fde:	2201      	movs	r2, #1
 8005fe0:	701a      	strb	r2, [r3, #0]
        break;
 8005fe2:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d100      	bne.n	8005fec <UART_SetConfig+0x454>
 8005fea:	e1a4      	b.n	8006336 <UART_SetConfig+0x79e>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	685a      	ldr	r2, [r3, #4]
 8005ff0:	0013      	movs	r3, r2
 8005ff2:	005b      	lsls	r3, r3, #1
 8005ff4:	189b      	adds	r3, r3, r2
 8005ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d305      	bcc.n	8006008 <UART_SetConfig+0x470>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006004:	429a      	cmp	r2, r3
 8006006:	d907      	bls.n	8006018 <UART_SetConfig+0x480>
      {
        ret = HAL_ERROR;
 8006008:	2313      	movs	r3, #19
 800600a:	2218      	movs	r2, #24
 800600c:	4694      	mov	ip, r2
 800600e:	44bc      	add	ip, r7
 8006010:	4463      	add	r3, ip
 8006012:	2201      	movs	r2, #1
 8006014:	701a      	strb	r2, [r3, #0]
 8006016:	e18e      	b.n	8006336 <UART_SetConfig+0x79e>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8006018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601a:	613b      	str	r3, [r7, #16]
 800601c:	2300      	movs	r3, #0
 800601e:	617b      	str	r3, [r7, #20]
 8006020:	6939      	ldr	r1, [r7, #16]
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	000b      	movs	r3, r1
 8006026:	0e1b      	lsrs	r3, r3, #24
 8006028:	0010      	movs	r0, r2
 800602a:	0205      	lsls	r5, r0, #8
 800602c:	431d      	orrs	r5, r3
 800602e:	000b      	movs	r3, r1
 8006030:	021c      	lsls	r4, r3, #8
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	085b      	lsrs	r3, r3, #1
 8006038:	60bb      	str	r3, [r7, #8]
 800603a:	2300      	movs	r3, #0
 800603c:	60fb      	str	r3, [r7, #12]
 800603e:	68b8      	ldr	r0, [r7, #8]
 8006040:	68f9      	ldr	r1, [r7, #12]
 8006042:	1900      	adds	r0, r0, r4
 8006044:	4169      	adcs	r1, r5
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	603b      	str	r3, [r7, #0]
 800604c:	2300      	movs	r3, #0
 800604e:	607b      	str	r3, [r7, #4]
 8006050:	683a      	ldr	r2, [r7, #0]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f7fa f9ce 	bl	80003f4 <__aeabi_uldivmod>
 8006058:	0003      	movs	r3, r0
 800605a:	000c      	movs	r4, r1
 800605c:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800605e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006060:	4aa0      	ldr	r2, [pc, #640]	; (80062e4 <UART_SetConfig+0x74c>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d908      	bls.n	8006078 <UART_SetConfig+0x4e0>
 8006066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006068:	4a9f      	ldr	r2, [pc, #636]	; (80062e8 <UART_SetConfig+0x750>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d804      	bhi.n	8006078 <UART_SetConfig+0x4e0>
        {
          huart->Instance->BRR = usartdiv;
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006074:	60da      	str	r2, [r3, #12]
 8006076:	e15e      	b.n	8006336 <UART_SetConfig+0x79e>
        }
        else
        {
          ret = HAL_ERROR;
 8006078:	2313      	movs	r3, #19
 800607a:	2218      	movs	r2, #24
 800607c:	4694      	mov	ip, r2
 800607e:	44bc      	add	ip, r7
 8006080:	4463      	add	r3, ip
 8006082:	2201      	movs	r2, #1
 8006084:	701a      	strb	r2, [r3, #0]
 8006086:	e156      	b.n	8006336 <UART_SetConfig+0x79e>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	69da      	ldr	r2, [r3, #28]
 800608c:	2380      	movs	r3, #128	; 0x80
 800608e:	021b      	lsls	r3, r3, #8
 8006090:	429a      	cmp	r2, r3
 8006092:	d000      	beq.n	8006096 <UART_SetConfig+0x4fe>
 8006094:	e0a9      	b.n	80061ea <UART_SetConfig+0x652>
  {
    switch (clocksource)
 8006096:	231b      	movs	r3, #27
 8006098:	2218      	movs	r2, #24
 800609a:	4694      	mov	ip, r2
 800609c:	44bc      	add	ip, r7
 800609e:	4463      	add	r3, ip
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	2b08      	cmp	r3, #8
 80060a4:	d86d      	bhi.n	8006182 <UART_SetConfig+0x5ea>
 80060a6:	009a      	lsls	r2, r3, #2
 80060a8:	4b90      	ldr	r3, [pc, #576]	; (80062ec <UART_SetConfig+0x754>)
 80060aa:	18d3      	adds	r3, r2, r3
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80060b0:	f7fe f8b8 	bl	8004224 <HAL_RCC_GetPCLK1Freq>
 80060b4:	0003      	movs	r3, r0
 80060b6:	005a      	lsls	r2, r3, #1
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	085b      	lsrs	r3, r3, #1
 80060be:	18d2      	adds	r2, r2, r3
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	0019      	movs	r1, r3
 80060c6:	0010      	movs	r0, r2
 80060c8:	f7fa f81e 	bl	8000108 <__udivsi3>
 80060cc:	0003      	movs	r3, r0
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80060d2:	e05e      	b.n	8006192 <UART_SetConfig+0x5fa>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80060d4:	f7fe f8bc 	bl	8004250 <HAL_RCC_GetPCLK2Freq>
 80060d8:	0003      	movs	r3, r0
 80060da:	005a      	lsls	r2, r3, #1
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	085b      	lsrs	r3, r3, #1
 80060e2:	18d2      	adds	r2, r2, r3
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	0019      	movs	r1, r3
 80060ea:	0010      	movs	r0, r2
 80060ec:	f7fa f80c 	bl	8000108 <__udivsi3>
 80060f0:	0003      	movs	r3, r0
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80060f6:	e04c      	b.n	8006192 <UART_SetConfig+0x5fa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060f8:	4b77      	ldr	r3, [pc, #476]	; (80062d8 <UART_SetConfig+0x740>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2210      	movs	r2, #16
 80060fe:	4013      	ands	r3, r2
 8006100:	d00e      	beq.n	8006120 <UART_SetConfig+0x588>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	085b      	lsrs	r3, r3, #1
 8006108:	4a79      	ldr	r2, [pc, #484]	; (80062f0 <UART_SetConfig+0x758>)
 800610a:	189a      	adds	r2, r3, r2
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	0019      	movs	r1, r3
 8006112:	0010      	movs	r0, r2
 8006114:	f7f9 fff8 	bl	8000108 <__udivsi3>
 8006118:	0003      	movs	r3, r0
 800611a:	b29b      	uxth	r3, r3
 800611c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 800611e:	e038      	b.n	8006192 <UART_SetConfig+0x5fa>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	085b      	lsrs	r3, r3, #1
 8006126:	4a73      	ldr	r2, [pc, #460]	; (80062f4 <UART_SetConfig+0x75c>)
 8006128:	189a      	adds	r2, r3, r2
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	0019      	movs	r1, r3
 8006130:	0010      	movs	r0, r2
 8006132:	f7f9 ffe9 	bl	8000108 <__udivsi3>
 8006136:	0003      	movs	r3, r0
 8006138:	b29b      	uxth	r3, r3
 800613a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800613c:	e029      	b.n	8006192 <UART_SetConfig+0x5fa>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800613e:	f7fd ffe3 	bl	8004108 <HAL_RCC_GetSysClockFreq>
 8006142:	0003      	movs	r3, r0
 8006144:	005a      	lsls	r2, r3, #1
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	085b      	lsrs	r3, r3, #1
 800614c:	18d2      	adds	r2, r2, r3
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	0019      	movs	r1, r3
 8006154:	0010      	movs	r0, r2
 8006156:	f7f9 ffd7 	bl	8000108 <__udivsi3>
 800615a:	0003      	movs	r3, r0
 800615c:	b29b      	uxth	r3, r3
 800615e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006160:	e017      	b.n	8006192 <UART_SetConfig+0x5fa>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	085b      	lsrs	r3, r3, #1
 8006168:	2280      	movs	r2, #128	; 0x80
 800616a:	0252      	lsls	r2, r2, #9
 800616c:	189a      	adds	r2, r3, r2
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	0019      	movs	r1, r3
 8006174:	0010      	movs	r0, r2
 8006176:	f7f9 ffc7 	bl	8000108 <__udivsi3>
 800617a:	0003      	movs	r3, r0
 800617c:	b29b      	uxth	r3, r3
 800617e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006180:	e007      	b.n	8006192 <UART_SetConfig+0x5fa>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006182:	2313      	movs	r3, #19
 8006184:	2218      	movs	r2, #24
 8006186:	4694      	mov	ip, r2
 8006188:	44bc      	add	ip, r7
 800618a:	4463      	add	r3, ip
 800618c:	2201      	movs	r2, #1
 800618e:	701a      	strb	r2, [r3, #0]
        break;
 8006190:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006194:	2b0f      	cmp	r3, #15
 8006196:	d920      	bls.n	80061da <UART_SetConfig+0x642>
 8006198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800619a:	4a57      	ldr	r2, [pc, #348]	; (80062f8 <UART_SetConfig+0x760>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d81c      	bhi.n	80061da <UART_SetConfig+0x642>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	200a      	movs	r0, #10
 80061a6:	2418      	movs	r4, #24
 80061a8:	193b      	adds	r3, r7, r4
 80061aa:	181b      	adds	r3, r3, r0
 80061ac:	210f      	movs	r1, #15
 80061ae:	438a      	bics	r2, r1
 80061b0:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b4:	085b      	lsrs	r3, r3, #1
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	2207      	movs	r2, #7
 80061ba:	4013      	ands	r3, r2
 80061bc:	b299      	uxth	r1, r3
 80061be:	193b      	adds	r3, r7, r4
 80061c0:	181b      	adds	r3, r3, r0
 80061c2:	193a      	adds	r2, r7, r4
 80061c4:	1812      	adds	r2, r2, r0
 80061c6:	8812      	ldrh	r2, [r2, #0]
 80061c8:	430a      	orrs	r2, r1
 80061ca:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	193a      	adds	r2, r7, r4
 80061d2:	1812      	adds	r2, r2, r0
 80061d4:	8812      	ldrh	r2, [r2, #0]
 80061d6:	60da      	str	r2, [r3, #12]
 80061d8:	e0ad      	b.n	8006336 <UART_SetConfig+0x79e>
    }
    else
    {
      ret = HAL_ERROR;
 80061da:	2313      	movs	r3, #19
 80061dc:	2218      	movs	r2, #24
 80061de:	4694      	mov	ip, r2
 80061e0:	44bc      	add	ip, r7
 80061e2:	4463      	add	r3, ip
 80061e4:	2201      	movs	r2, #1
 80061e6:	701a      	strb	r2, [r3, #0]
 80061e8:	e0a5      	b.n	8006336 <UART_SetConfig+0x79e>
    }
  }
  else
  {
    switch (clocksource)
 80061ea:	231b      	movs	r3, #27
 80061ec:	2218      	movs	r2, #24
 80061ee:	4694      	mov	ip, r2
 80061f0:	44bc      	add	ip, r7
 80061f2:	4463      	add	r3, ip
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	2b08      	cmp	r3, #8
 80061f8:	d900      	bls.n	80061fc <UART_SetConfig+0x664>
 80061fa:	e081      	b.n	8006300 <UART_SetConfig+0x768>
 80061fc:	009a      	lsls	r2, r3, #2
 80061fe:	4b3f      	ldr	r3, [pc, #252]	; (80062fc <UART_SetConfig+0x764>)
 8006200:	18d3      	adds	r3, r2, r3
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8006206:	f7fe f80d 	bl	8004224 <HAL_RCC_GetPCLK1Freq>
 800620a:	0002      	movs	r2, r0
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	085b      	lsrs	r3, r3, #1
 8006212:	18d2      	adds	r2, r2, r3
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	0019      	movs	r1, r3
 800621a:	0010      	movs	r0, r2
 800621c:	f7f9 ff74 	bl	8000108 <__udivsi3>
 8006220:	0003      	movs	r3, r0
 8006222:	b29b      	uxth	r3, r3
 8006224:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006226:	e073      	b.n	8006310 <UART_SetConfig+0x778>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8006228:	f7fe f812 	bl	8004250 <HAL_RCC_GetPCLK2Freq>
 800622c:	0002      	movs	r2, r0
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	085b      	lsrs	r3, r3, #1
 8006234:	18d2      	adds	r2, r2, r3
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	0019      	movs	r1, r3
 800623c:	0010      	movs	r0, r2
 800623e:	f7f9 ff63 	bl	8000108 <__udivsi3>
 8006242:	0003      	movs	r3, r0
 8006244:	b29b      	uxth	r3, r3
 8006246:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006248:	e062      	b.n	8006310 <UART_SetConfig+0x778>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800624a:	4b23      	ldr	r3, [pc, #140]	; (80062d8 <UART_SetConfig+0x740>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2210      	movs	r2, #16
 8006250:	4013      	ands	r3, r2
 8006252:	d00e      	beq.n	8006272 <UART_SetConfig+0x6da>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	085b      	lsrs	r3, r3, #1
 800625a:	4a20      	ldr	r2, [pc, #128]	; (80062dc <UART_SetConfig+0x744>)
 800625c:	189a      	adds	r2, r3, r2
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	0019      	movs	r1, r3
 8006264:	0010      	movs	r0, r2
 8006266:	f7f9 ff4f 	bl	8000108 <__udivsi3>
 800626a:	0003      	movs	r3, r0
 800626c:	b29b      	uxth	r3, r3
 800626e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8006270:	e04e      	b.n	8006310 <UART_SetConfig+0x778>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	085b      	lsrs	r3, r3, #1
 8006278:	4a19      	ldr	r2, [pc, #100]	; (80062e0 <UART_SetConfig+0x748>)
 800627a:	189a      	adds	r2, r3, r2
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	0019      	movs	r1, r3
 8006282:	0010      	movs	r0, r2
 8006284:	f7f9 ff40 	bl	8000108 <__udivsi3>
 8006288:	0003      	movs	r3, r0
 800628a:	b29b      	uxth	r3, r3
 800628c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800628e:	e03f      	b.n	8006310 <UART_SetConfig+0x778>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8006290:	f7fd ff3a 	bl	8004108 <HAL_RCC_GetSysClockFreq>
 8006294:	0002      	movs	r2, r0
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	085b      	lsrs	r3, r3, #1
 800629c:	18d2      	adds	r2, r2, r3
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	0019      	movs	r1, r3
 80062a4:	0010      	movs	r0, r2
 80062a6:	f7f9 ff2f 	bl	8000108 <__udivsi3>
 80062aa:	0003      	movs	r3, r0
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062b0:	e02e      	b.n	8006310 <UART_SetConfig+0x778>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	085b      	lsrs	r3, r3, #1
 80062b8:	2280      	movs	r2, #128	; 0x80
 80062ba:	0212      	lsls	r2, r2, #8
 80062bc:	189a      	adds	r2, r3, r2
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	0019      	movs	r1, r3
 80062c4:	0010      	movs	r0, r2
 80062c6:	f7f9 ff1f 	bl	8000108 <__udivsi3>
 80062ca:	0003      	movs	r3, r0
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062d0:	e01e      	b.n	8006310 <UART_SetConfig+0x778>
 80062d2:	46c0      	nop			; (mov r8, r8)
 80062d4:	40004800 	.word	0x40004800
 80062d8:	40021000 	.word	0x40021000
 80062dc:	003d0900 	.word	0x003d0900
 80062e0:	00f42400 	.word	0x00f42400
 80062e4:	000002ff 	.word	0x000002ff
 80062e8:	000fffff 	.word	0x000fffff
 80062ec:	08006a28 	.word	0x08006a28
 80062f0:	007a1200 	.word	0x007a1200
 80062f4:	01e84800 	.word	0x01e84800
 80062f8:	0000ffff 	.word	0x0000ffff
 80062fc:	08006a4c 	.word	0x08006a4c
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8006300:	2313      	movs	r3, #19
 8006302:	2218      	movs	r2, #24
 8006304:	4694      	mov	ip, r2
 8006306:	44bc      	add	ip, r7
 8006308:	4463      	add	r3, ip
 800630a:	2201      	movs	r2, #1
 800630c:	701a      	strb	r2, [r3, #0]
        break;
 800630e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006312:	2b0f      	cmp	r3, #15
 8006314:	d908      	bls.n	8006328 <UART_SetConfig+0x790>
 8006316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006318:	4a0f      	ldr	r2, [pc, #60]	; (8006358 <UART_SetConfig+0x7c0>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d804      	bhi.n	8006328 <UART_SetConfig+0x790>
    {
      huart->Instance->BRR = usartdiv;
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006324:	60da      	str	r2, [r3, #12]
 8006326:	e006      	b.n	8006336 <UART_SetConfig+0x79e>
    }
    else
    {
      ret = HAL_ERROR;
 8006328:	2313      	movs	r3, #19
 800632a:	2218      	movs	r2, #24
 800632c:	4694      	mov	ip, r2
 800632e:	44bc      	add	ip, r7
 8006330:	4463      	add	r3, ip
 8006332:	2201      	movs	r2, #1
 8006334:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	2200      	movs	r2, #0
 800633a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	2200      	movs	r2, #0
 8006340:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006342:	2313      	movs	r3, #19
 8006344:	2218      	movs	r2, #24
 8006346:	4694      	mov	ip, r2
 8006348:	44bc      	add	ip, r7
 800634a:	4463      	add	r3, ip
 800634c:	781b      	ldrb	r3, [r3, #0]
}
 800634e:	0018      	movs	r0, r3
 8006350:	46bd      	mov	sp, r7
 8006352:	b00e      	add	sp, #56	; 0x38
 8006354:	bdb0      	pop	{r4, r5, r7, pc}
 8006356:	46c0      	nop			; (mov r8, r8)
 8006358:	0000ffff 	.word	0x0000ffff

0800635c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006368:	2bff      	cmp	r3, #255	; 0xff
 800636a:	d905      	bls.n	8006378 <UART_AdvFeatureConfig+0x1c>
 800636c:	4aa7      	ldr	r2, [pc, #668]	; (800660c <UART_AdvFeatureConfig+0x2b0>)
 800636e:	4ba8      	ldr	r3, [pc, #672]	; (8006610 <UART_AdvFeatureConfig+0x2b4>)
 8006370:	0011      	movs	r1, r2
 8006372:	0018      	movs	r0, r3
 8006374:	f7fa ff29 	bl	80011ca <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637c:	2201      	movs	r2, #1
 800637e:	4013      	ands	r3, r2
 8006380:	d01b      	beq.n	80063ba <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00b      	beq.n	80063a2 <UART_AdvFeatureConfig+0x46>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800638e:	2380      	movs	r3, #128	; 0x80
 8006390:	029b      	lsls	r3, r3, #10
 8006392:	429a      	cmp	r2, r3
 8006394:	d005      	beq.n	80063a2 <UART_AdvFeatureConfig+0x46>
 8006396:	4a9f      	ldr	r2, [pc, #636]	; (8006614 <UART_AdvFeatureConfig+0x2b8>)
 8006398:	4b9d      	ldr	r3, [pc, #628]	; (8006610 <UART_AdvFeatureConfig+0x2b4>)
 800639a:	0011      	movs	r1, r2
 800639c:	0018      	movs	r0, r3
 800639e:	f7fa ff14 	bl	80011ca <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	4a9b      	ldr	r2, [pc, #620]	; (8006618 <UART_AdvFeatureConfig+0x2bc>)
 80063aa:	4013      	ands	r3, r2
 80063ac:	0019      	movs	r1, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	430a      	orrs	r2, r1
 80063b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063be:	2202      	movs	r2, #2
 80063c0:	4013      	ands	r3, r2
 80063c2:	d01b      	beq.n	80063fc <UART_AdvFeatureConfig+0xa0>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00b      	beq.n	80063e4 <UART_AdvFeatureConfig+0x88>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063d0:	2380      	movs	r3, #128	; 0x80
 80063d2:	025b      	lsls	r3, r3, #9
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d005      	beq.n	80063e4 <UART_AdvFeatureConfig+0x88>
 80063d8:	4a90      	ldr	r2, [pc, #576]	; (800661c <UART_AdvFeatureConfig+0x2c0>)
 80063da:	4b8d      	ldr	r3, [pc, #564]	; (8006610 <UART_AdvFeatureConfig+0x2b4>)
 80063dc:	0011      	movs	r1, r2
 80063de:	0018      	movs	r0, r3
 80063e0:	f7fa fef3 	bl	80011ca <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	4a8d      	ldr	r2, [pc, #564]	; (8006620 <UART_AdvFeatureConfig+0x2c4>)
 80063ec:	4013      	ands	r3, r2
 80063ee:	0019      	movs	r1, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	430a      	orrs	r2, r1
 80063fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006400:	2204      	movs	r2, #4
 8006402:	4013      	ands	r3, r2
 8006404:	d01b      	beq.n	800643e <UART_AdvFeatureConfig+0xe2>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00b      	beq.n	8006426 <UART_AdvFeatureConfig+0xca>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006412:	2380      	movs	r3, #128	; 0x80
 8006414:	02db      	lsls	r3, r3, #11
 8006416:	429a      	cmp	r2, r3
 8006418:	d005      	beq.n	8006426 <UART_AdvFeatureConfig+0xca>
 800641a:	4a82      	ldr	r2, [pc, #520]	; (8006624 <UART_AdvFeatureConfig+0x2c8>)
 800641c:	4b7c      	ldr	r3, [pc, #496]	; (8006610 <UART_AdvFeatureConfig+0x2b4>)
 800641e:	0011      	movs	r1, r2
 8006420:	0018      	movs	r0, r3
 8006422:	f7fa fed2 	bl	80011ca <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	4a7e      	ldr	r2, [pc, #504]	; (8006628 <UART_AdvFeatureConfig+0x2cc>)
 800642e:	4013      	ands	r3, r2
 8006430:	0019      	movs	r1, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	430a      	orrs	r2, r1
 800643c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006442:	2208      	movs	r2, #8
 8006444:	4013      	ands	r3, r2
 8006446:	d01b      	beq.n	8006480 <UART_AdvFeatureConfig+0x124>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00b      	beq.n	8006468 <UART_AdvFeatureConfig+0x10c>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006454:	2380      	movs	r3, #128	; 0x80
 8006456:	021b      	lsls	r3, r3, #8
 8006458:	429a      	cmp	r2, r3
 800645a:	d005      	beq.n	8006468 <UART_AdvFeatureConfig+0x10c>
 800645c:	4a73      	ldr	r2, [pc, #460]	; (800662c <UART_AdvFeatureConfig+0x2d0>)
 800645e:	4b6c      	ldr	r3, [pc, #432]	; (8006610 <UART_AdvFeatureConfig+0x2b4>)
 8006460:	0011      	movs	r1, r2
 8006462:	0018      	movs	r0, r3
 8006464:	f7fa feb1 	bl	80011ca <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	4a70      	ldr	r2, [pc, #448]	; (8006630 <UART_AdvFeatureConfig+0x2d4>)
 8006470:	4013      	ands	r3, r2
 8006472:	0019      	movs	r1, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	430a      	orrs	r2, r1
 800647e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006484:	2210      	movs	r2, #16
 8006486:	4013      	ands	r3, r2
 8006488:	d01b      	beq.n	80064c2 <UART_AdvFeatureConfig+0x166>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00b      	beq.n	80064aa <UART_AdvFeatureConfig+0x14e>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006496:	2380      	movs	r3, #128	; 0x80
 8006498:	015b      	lsls	r3, r3, #5
 800649a:	429a      	cmp	r2, r3
 800649c:	d005      	beq.n	80064aa <UART_AdvFeatureConfig+0x14e>
 800649e:	4a65      	ldr	r2, [pc, #404]	; (8006634 <UART_AdvFeatureConfig+0x2d8>)
 80064a0:	4b5b      	ldr	r3, [pc, #364]	; (8006610 <UART_AdvFeatureConfig+0x2b4>)
 80064a2:	0011      	movs	r1, r2
 80064a4:	0018      	movs	r0, r3
 80064a6:	f7fa fe90 	bl	80011ca <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	4a61      	ldr	r2, [pc, #388]	; (8006638 <UART_AdvFeatureConfig+0x2dc>)
 80064b2:	4013      	ands	r3, r2
 80064b4:	0019      	movs	r1, r3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	430a      	orrs	r2, r1
 80064c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c6:	2220      	movs	r2, #32
 80064c8:	4013      	ands	r3, r2
 80064ca:	d01b      	beq.n	8006504 <UART_AdvFeatureConfig+0x1a8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00b      	beq.n	80064ec <UART_AdvFeatureConfig+0x190>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064d8:	2380      	movs	r3, #128	; 0x80
 80064da:	019b      	lsls	r3, r3, #6
 80064dc:	429a      	cmp	r2, r3
 80064de:	d005      	beq.n	80064ec <UART_AdvFeatureConfig+0x190>
 80064e0:	4a56      	ldr	r2, [pc, #344]	; (800663c <UART_AdvFeatureConfig+0x2e0>)
 80064e2:	4b4b      	ldr	r3, [pc, #300]	; (8006610 <UART_AdvFeatureConfig+0x2b4>)
 80064e4:	0011      	movs	r1, r2
 80064e6:	0018      	movs	r0, r3
 80064e8:	f7fa fe6f 	bl	80011ca <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	4a53      	ldr	r2, [pc, #332]	; (8006640 <UART_AdvFeatureConfig+0x2e4>)
 80064f4:	4013      	ands	r3, r2
 80064f6:	0019      	movs	r1, r3
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	430a      	orrs	r2, r1
 8006502:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006508:	2240      	movs	r2, #64	; 0x40
 800650a:	4013      	ands	r3, r2
 800650c:	d059      	beq.n	80065c2 <UART_AdvFeatureConfig+0x266>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a4c      	ldr	r2, [pc, #304]	; (8006644 <UART_AdvFeatureConfig+0x2e8>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d00a      	beq.n	800652e <UART_AdvFeatureConfig+0x1d2>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a4a      	ldr	r2, [pc, #296]	; (8006648 <UART_AdvFeatureConfig+0x2ec>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d005      	beq.n	800652e <UART_AdvFeatureConfig+0x1d2>
 8006522:	4a4a      	ldr	r2, [pc, #296]	; (800664c <UART_AdvFeatureConfig+0x2f0>)
 8006524:	4b3a      	ldr	r3, [pc, #232]	; (8006610 <UART_AdvFeatureConfig+0x2b4>)
 8006526:	0011      	movs	r1, r2
 8006528:	0018      	movs	r0, r3
 800652a:	f7fa fe4e 	bl	80011ca <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00b      	beq.n	800654e <UART_AdvFeatureConfig+0x1f2>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800653a:	2380      	movs	r3, #128	; 0x80
 800653c:	035b      	lsls	r3, r3, #13
 800653e:	429a      	cmp	r2, r3
 8006540:	d005      	beq.n	800654e <UART_AdvFeatureConfig+0x1f2>
 8006542:	4a43      	ldr	r2, [pc, #268]	; (8006650 <UART_AdvFeatureConfig+0x2f4>)
 8006544:	4b32      	ldr	r3, [pc, #200]	; (8006610 <UART_AdvFeatureConfig+0x2b4>)
 8006546:	0011      	movs	r1, r2
 8006548:	0018      	movs	r0, r3
 800654a:	f7fa fe3e 	bl	80011ca <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	4a3f      	ldr	r2, [pc, #252]	; (8006654 <UART_AdvFeatureConfig+0x2f8>)
 8006556:	4013      	ands	r3, r2
 8006558:	0019      	movs	r1, r3
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	430a      	orrs	r2, r1
 8006564:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800656a:	2380      	movs	r3, #128	; 0x80
 800656c:	035b      	lsls	r3, r3, #13
 800656e:	429a      	cmp	r2, r3
 8006570:	d127      	bne.n	80065c2 <UART_AdvFeatureConfig+0x266>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006576:	2b00      	cmp	r3, #0
 8006578:	d017      	beq.n	80065aa <UART_AdvFeatureConfig+0x24e>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800657e:	2380      	movs	r3, #128	; 0x80
 8006580:	039b      	lsls	r3, r3, #14
 8006582:	429a      	cmp	r2, r3
 8006584:	d011      	beq.n	80065aa <UART_AdvFeatureConfig+0x24e>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800658a:	2380      	movs	r3, #128	; 0x80
 800658c:	03db      	lsls	r3, r3, #15
 800658e:	429a      	cmp	r2, r3
 8006590:	d00b      	beq.n	80065aa <UART_AdvFeatureConfig+0x24e>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006596:	23c0      	movs	r3, #192	; 0xc0
 8006598:	03db      	lsls	r3, r3, #15
 800659a:	429a      	cmp	r2, r3
 800659c:	d005      	beq.n	80065aa <UART_AdvFeatureConfig+0x24e>
 800659e:	4a2e      	ldr	r2, [pc, #184]	; (8006658 <UART_AdvFeatureConfig+0x2fc>)
 80065a0:	4b1b      	ldr	r3, [pc, #108]	; (8006610 <UART_AdvFeatureConfig+0x2b4>)
 80065a2:	0011      	movs	r1, r2
 80065a4:	0018      	movs	r0, r3
 80065a6:	f7fa fe10 	bl	80011ca <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	4a2a      	ldr	r2, [pc, #168]	; (800665c <UART_AdvFeatureConfig+0x300>)
 80065b2:	4013      	ands	r3, r2
 80065b4:	0019      	movs	r1, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	430a      	orrs	r2, r1
 80065c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c6:	2280      	movs	r2, #128	; 0x80
 80065c8:	4013      	ands	r3, r2
 80065ca:	d01b      	beq.n	8006604 <UART_AdvFeatureConfig+0x2a8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00b      	beq.n	80065ec <UART_AdvFeatureConfig+0x290>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065d8:	2380      	movs	r3, #128	; 0x80
 80065da:	031b      	lsls	r3, r3, #12
 80065dc:	429a      	cmp	r2, r3
 80065de:	d005      	beq.n	80065ec <UART_AdvFeatureConfig+0x290>
 80065e0:	4a1f      	ldr	r2, [pc, #124]	; (8006660 <UART_AdvFeatureConfig+0x304>)
 80065e2:	4b0b      	ldr	r3, [pc, #44]	; (8006610 <UART_AdvFeatureConfig+0x2b4>)
 80065e4:	0011      	movs	r1, r2
 80065e6:	0018      	movs	r0, r3
 80065e8:	f7fa fdef 	bl	80011ca <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	4a1c      	ldr	r2, [pc, #112]	; (8006664 <UART_AdvFeatureConfig+0x308>)
 80065f4:	4013      	ands	r3, r2
 80065f6:	0019      	movs	r1, r3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	430a      	orrs	r2, r1
 8006602:	605a      	str	r2, [r3, #4]
  }
}
 8006604:	46c0      	nop			; (mov r8, r8)
 8006606:	46bd      	mov	sp, r7
 8006608:	b002      	add	sp, #8
 800660a:	bd80      	pop	{r7, pc}
 800660c:	00000b9a 	.word	0x00000b9a
 8006610:	080069c8 	.word	0x080069c8
 8006614:	00000b9f 	.word	0x00000b9f
 8006618:	fffdffff 	.word	0xfffdffff
 800661c:	00000ba6 	.word	0x00000ba6
 8006620:	fffeffff 	.word	0xfffeffff
 8006624:	00000bad 	.word	0x00000bad
 8006628:	fffbffff 	.word	0xfffbffff
 800662c:	00000bb4 	.word	0x00000bb4
 8006630:	ffff7fff 	.word	0xffff7fff
 8006634:	00000bbb 	.word	0x00000bbb
 8006638:	ffffefff 	.word	0xffffefff
 800663c:	00000bc2 	.word	0x00000bc2
 8006640:	ffffdfff 	.word	0xffffdfff
 8006644:	40013800 	.word	0x40013800
 8006648:	40004400 	.word	0x40004400
 800664c:	00000bc9 	.word	0x00000bc9
 8006650:	00000bca 	.word	0x00000bca
 8006654:	ffefffff 	.word	0xffefffff
 8006658:	00000bcf 	.word	0x00000bcf
 800665c:	ff9fffff 	.word	0xff9fffff
 8006660:	00000bd7 	.word	0x00000bd7
 8006664:	fff7ffff 	.word	0xfff7ffff

08006668 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b086      	sub	sp, #24
 800666c:	af02      	add	r7, sp, #8
 800666e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006676:	f7fb f83d 	bl	80016f4 <HAL_GetTick>
 800667a:	0003      	movs	r3, r0
 800667c:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2208      	movs	r2, #8
 8006686:	4013      	ands	r3, r2
 8006688:	2b08      	cmp	r3, #8
 800668a:	d10d      	bne.n	80066a8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	2380      	movs	r3, #128	; 0x80
 8006690:	0399      	lsls	r1, r3, #14
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	4b16      	ldr	r3, [pc, #88]	; (80066f0 <UART_CheckIdleState+0x88>)
 8006696:	9300      	str	r3, [sp, #0]
 8006698:	0013      	movs	r3, r2
 800669a:	2200      	movs	r2, #0
 800669c:	f000 f82a 	bl	80066f4 <UART_WaitOnFlagUntilTimeout>
 80066a0:	1e03      	subs	r3, r0, #0
 80066a2:	d001      	beq.n	80066a8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e01f      	b.n	80066e8 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2204      	movs	r2, #4
 80066b0:	4013      	ands	r3, r2
 80066b2:	2b04      	cmp	r3, #4
 80066b4:	d10d      	bne.n	80066d2 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	2380      	movs	r3, #128	; 0x80
 80066ba:	03d9      	lsls	r1, r3, #15
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	4b0c      	ldr	r3, [pc, #48]	; (80066f0 <UART_CheckIdleState+0x88>)
 80066c0:	9300      	str	r3, [sp, #0]
 80066c2:	0013      	movs	r3, r2
 80066c4:	2200      	movs	r2, #0
 80066c6:	f000 f815 	bl	80066f4 <UART_WaitOnFlagUntilTimeout>
 80066ca:	1e03      	subs	r3, r0, #0
 80066cc:	d001      	beq.n	80066d2 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e00a      	b.n	80066e8 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2220      	movs	r2, #32
 80066d6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2220      	movs	r2, #32
 80066dc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2270      	movs	r2, #112	; 0x70
 80066e2:	2100      	movs	r1, #0
 80066e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	0018      	movs	r0, r3
 80066ea:	46bd      	mov	sp, r7
 80066ec:	b004      	add	sp, #16
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	01ffffff 	.word	0x01ffffff

080066f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	603b      	str	r3, [r7, #0]
 8006700:	1dfb      	adds	r3, r7, #7
 8006702:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006704:	e029      	b.n	800675a <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	3301      	adds	r3, #1
 800670a:	d026      	beq.n	800675a <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800670c:	f7fa fff2 	bl	80016f4 <HAL_GetTick>
 8006710:	0002      	movs	r2, r0
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	69ba      	ldr	r2, [r7, #24]
 8006718:	429a      	cmp	r2, r3
 800671a:	d302      	bcc.n	8006722 <UART_WaitOnFlagUntilTimeout+0x2e>
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d11b      	bne.n	800675a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4915      	ldr	r1, [pc, #84]	; (8006784 <UART_WaitOnFlagUntilTimeout+0x90>)
 800672e:	400a      	ands	r2, r1
 8006730:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	689a      	ldr	r2, [r3, #8]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	2101      	movs	r1, #1
 800673e:	438a      	bics	r2, r1
 8006740:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2220      	movs	r2, #32
 8006746:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2220      	movs	r2, #32
 800674c:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2270      	movs	r2, #112	; 0x70
 8006752:	2100      	movs	r1, #0
 8006754:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e00f      	b.n	800677a <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	69db      	ldr	r3, [r3, #28]
 8006760:	68ba      	ldr	r2, [r7, #8]
 8006762:	4013      	ands	r3, r2
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	425a      	negs	r2, r3
 800676a:	4153      	adcs	r3, r2
 800676c:	b2db      	uxtb	r3, r3
 800676e:	001a      	movs	r2, r3
 8006770:	1dfb      	adds	r3, r7, #7
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	429a      	cmp	r2, r3
 8006776:	d0c6      	beq.n	8006706 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	0018      	movs	r0, r3
 800677c:	46bd      	mov	sp, r7
 800677e:	b004      	add	sp, #16
 8006780:	bd80      	pop	{r7, pc}
 8006782:	46c0      	nop			; (mov r8, r8)
 8006784:	fffffe5f 	.word	0xfffffe5f

08006788 <__libc_init_array>:
 8006788:	b570      	push	{r4, r5, r6, lr}
 800678a:	2600      	movs	r6, #0
 800678c:	4d0c      	ldr	r5, [pc, #48]	; (80067c0 <__libc_init_array+0x38>)
 800678e:	4c0d      	ldr	r4, [pc, #52]	; (80067c4 <__libc_init_array+0x3c>)
 8006790:	1b64      	subs	r4, r4, r5
 8006792:	10a4      	asrs	r4, r4, #2
 8006794:	42a6      	cmp	r6, r4
 8006796:	d109      	bne.n	80067ac <__libc_init_array+0x24>
 8006798:	2600      	movs	r6, #0
 800679a:	f000 f821 	bl	80067e0 <_init>
 800679e:	4d0a      	ldr	r5, [pc, #40]	; (80067c8 <__libc_init_array+0x40>)
 80067a0:	4c0a      	ldr	r4, [pc, #40]	; (80067cc <__libc_init_array+0x44>)
 80067a2:	1b64      	subs	r4, r4, r5
 80067a4:	10a4      	asrs	r4, r4, #2
 80067a6:	42a6      	cmp	r6, r4
 80067a8:	d105      	bne.n	80067b6 <__libc_init_array+0x2e>
 80067aa:	bd70      	pop	{r4, r5, r6, pc}
 80067ac:	00b3      	lsls	r3, r6, #2
 80067ae:	58eb      	ldr	r3, [r5, r3]
 80067b0:	4798      	blx	r3
 80067b2:	3601      	adds	r6, #1
 80067b4:	e7ee      	b.n	8006794 <__libc_init_array+0xc>
 80067b6:	00b3      	lsls	r3, r6, #2
 80067b8:	58eb      	ldr	r3, [r5, r3]
 80067ba:	4798      	blx	r3
 80067bc:	3601      	adds	r6, #1
 80067be:	e7f2      	b.n	80067a6 <__libc_init_array+0x1e>
 80067c0:	08006a78 	.word	0x08006a78
 80067c4:	08006a78 	.word	0x08006a78
 80067c8:	08006a78 	.word	0x08006a78
 80067cc:	08006a7c 	.word	0x08006a7c

080067d0 <memset>:
 80067d0:	0003      	movs	r3, r0
 80067d2:	1812      	adds	r2, r2, r0
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d100      	bne.n	80067da <memset+0xa>
 80067d8:	4770      	bx	lr
 80067da:	7019      	strb	r1, [r3, #0]
 80067dc:	3301      	adds	r3, #1
 80067de:	e7f9      	b.n	80067d4 <memset+0x4>

080067e0 <_init>:
 80067e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067e2:	46c0      	nop			; (mov r8, r8)
 80067e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067e6:	bc08      	pop	{r3}
 80067e8:	469e      	mov	lr, r3
 80067ea:	4770      	bx	lr

080067ec <_fini>:
 80067ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ee:	46c0      	nop			; (mov r8, r8)
 80067f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067f2:	bc08      	pop	{r3}
 80067f4:	469e      	mov	lr, r3
 80067f6:	4770      	bx	lr
